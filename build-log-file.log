Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
org.bank.account.Account.<init>()
org.bank.account.Account.<init>(int,int,org.bank.client.Client,double)
org.bank.account.Account.<init>(int,int)
org.bank.facade.Facade.<init>()
org.bank.gui.GUI.<init>()
org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account)
org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account)
org.bank.account.Account.toString()
org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account)
org.bank.account.Account.getBalance()
org.bank.account.Account.debito(double)
org.bank.account.Account.setBalance(double)
org.bank.account.Account.deposito(double)
org.bank.account.Account.sacar(double)
org.bank.account.Account.getAg()
org.bank.account.Account.setAg(int)
org.bank.account.Account.getCc()
org.bank.account.Account.setCc(int)
org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
org.bank.client.Client.setAccount(org.bank.account.Account)
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: org.bank.account.Account.setBalance(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: org.bank.facade.Facade.<init>()
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.bank.facade.Facade
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: org.bank.account.Account.toString()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 6
Selected statement: org.bank.account.Account.sacar(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 7
Selected statement: org.bank.account.Account.setBalance(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: org.bank.account.Account.<init>()
Successfully created new unique sequence:var0 =  cons : org.bank.account.Account.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.account.Account var0 = new org.bank.account.Account();
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: org.bank.account.Account.toString()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 10
randoop.util.Randomness: total calls to random: 11
Successfully created new unique sequence:var0 =  cons : org.bank.account.Account.<init>() : 
var1 =  method : org.bank.account.Account.toString() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.account.Account var0 = new org.bank.account.Account();
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.String var1 = var0.toString();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=Conta [ag=0, cc=0, balance=0.0] [var1]  : true

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 12
Selected statement: org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
Will query component set for objects of typeclass org.bank.facade.Facade
getActivesequencesThatYield: entering method, clazz=class org.bank.facade.Facade
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 13
randoop.util.Randomness: total calls to random: 14
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 15
randoop.util.Randomness: total calls to random: 16
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 17
randoop.util.Randomness: total calls to random: 18
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  cons : org.bank.account.Account.<init>() : 
var2 =  method : org.bank.account.Account.toString() : var1 
var3 =  prim : double:100.0 : 
var4 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.facade.Facade
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
org.bank.account.Account var1 = new org.bank.account.Account();
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.String var2 = var1.toString();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var3 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var0.withdraw(var1, (java.lang.Double)100.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=Conta [ag=0, cc=0, balance=0.0] [var2]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 19
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: found no sequences matching class class org.bank.client.Client
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 20
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: found no sequences matching class class org.bank.client.Client
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 21
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 22
Selected statement: org.bank.account.Account.<init>(int,int,org.bank.client.Client,double)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 23
randoop.util.Randomness: total calls to random: 24
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 25
randoop.util.Randomness: total calls to random: 26
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: found no sequences matching class class org.bank.client.Client
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 27
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 28
randoop.util.Randomness: total calls to random: 29
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 30
randoop.util.Randomness: total calls to random: 31
Successfully created new unique sequence:var0 =  cons : org.bank.account.Account.<init>() : 
var1 =  method : org.bank.account.Account.toString() : var0 
var2 =  prim : int:10 : 
var3 =  method : org.bank.account.Account.setCc(int) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.account.Account var0 = new org.bank.account.Account();
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.String var1 = var0.toString();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var0.setCc(10);
// <NormalExecution object=null>;
<randoop.PrimValue, value=Conta [ag=0, cc=0, balance=0.0] [var1]  : true

allSequences.size()=6
