
------------------------------------------------------------------------------

15-08-2013   20:21:49

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<evosuite>

Failed Tests:


  public void test7()  throws Throwable  {
      UseCaseEditor useCaseEditor0 = new UseCaseEditor();
      // Undeclared exception!
      try {
        useCaseEditor0.doSaveAs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.setActivePage("hi!");
    var0.setFocus();
    java.lang.String var5 = var0.getTitle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }


  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    org.eclipse.ui.forms.editor.IFormPage var7 = var0.selectReveal((java.lang.Object)(byte)0);
    var0.editorDirtyStateChanged();
    var0.dispose();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    org.eclipse.ui.IEditorInput var11 = var0.getEditorInput();
    var0.doSaveAs();

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    boolean var10 = var0.isSaveAsAllowed();
    var0.editorDirtyStateChanged();
    java.lang.String var12 = var0.getContentDescription();
    org.eclipse.ui.forms.editor.IFormPage var13 = var0.getActivePageInstance();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.refresh(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }


  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var12 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var13 = var12.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var15 = var12.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var16 = var12.getEditorInput();
    java.lang.String var17 = var12.getPartName();
    org.eclipse.ui.forms.editor.IFormPage var18 = var0.selectReveal((java.lang.Object)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    java.lang.String var10 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }


  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.util.Map var9 = var0.getPartProperties();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }


  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    var7.showBusy(true);
    br.ufpe.cin.target.pm.exceptions.TargetSearchException var18 = new br.ufpe.cin.target.pm.exceptions.TargetSearchException("hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var20 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var18, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var21 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var18);
    org.eclipse.ui.forms.editor.IFormPage var22 = var7.setActivePage("", (java.lang.Object)var18);
    org.eclipse.ui.forms.editor.IFormPage var24 = var7.findPage("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }


  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));

  }


  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    org.eclipse.ui.IEditorSite var4 = var0.getEditorSite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test35");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    var7.showBusy(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test28");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.lang.String var5 = var0.getPartName();
    org.eclipse.ui.IEditorSite var6 = var0.getEditorSite();
    boolean var7 = var0.isSaveOnCloseNeeded();
    org.eclipse.ui.IEditorSite var8 = var0.getEditorSite();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var10 = var9.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var12 = var9.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var13 = var9.getEditorInput();
    java.util.Map var14 = var9.getPartProperties();
    java.lang.String var15 = var9.getTitle();
    org.eclipse.ui.forms.editor.IFormPage var16 = var0.selectReveal((java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test212");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }


  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test342");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    org.eclipse.ui.IEditorPart var1 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.findPage("");
    java.lang.String var4 = var0.getTitle();
    java.lang.String var6 = var0.getPartProperty("");
    br.ufpe.cin.target.common.exceptions.TargetException var8 = new br.ufpe.cin.target.common.exceptions.TargetException("");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var10 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var8, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var11 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var10);
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var13 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var11, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var14 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var13);
    org.eclipse.ui.forms.editor.IFormPage var15 = var0.selectReveal((java.lang.Object)var13);
    java.lang.Object var16 = var0.getSelectedPage();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test325");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.setActivePage("hi!");
    var0.setFocus();
    java.lang.Object var5 = var0.getSelectedPage();
    boolean var6 = var0.isSaveAsAllowed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }


  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test423");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("");
    org.eclipse.ui.forms.editor.IFormPage var10 = var0.findPage("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test318");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test304");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.lang.String var5 = var0.getPartName();
    org.eclipse.ui.IEditorSite var6 = var0.getEditorSite();
    boolean var7 = var0.isSaveOnCloseNeeded();
    org.eclipse.ui.IEditorSite var8 = var0.getEditorSite();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var10 = var9.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var12 = var9.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var13 = var9.getEditorInput();
    java.util.Map var14 = var9.getPartProperties();
    java.lang.String var15 = var9.getTitle();
    org.eclipse.ui.forms.editor.IFormPage var16 = var0.selectReveal((java.lang.Object)var9);
    java.util.Map var17 = var0.getPartProperties();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }


  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test157");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    java.util.Map var12 = var0.getPartProperties();
    var0.setFocus();
    br.ufpe.cin.target.pm.common.TreeObject var14 = new br.ufpe.cin.target.pm.common.TreeObject((java.lang.Object)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }


  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test60");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    java.lang.String var14 = var0.getTitle();
    java.lang.String var15 = var0.getPartName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));

  }


  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test8");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("");
    var0.setFocus();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    var0.showBusy(false);
    var0.updateTitle("hi!");
    boolean var15 = var0.isSaveAsAllowed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }


  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test99");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    var0.setFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test14");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    boolean var6 = var0.isSaveOnCloseNeeded();
    java.lang.String var7 = var0.getTitle();
    java.lang.String var8 = var0.getTitleToolTip();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    boolean var10 = var9.isDirty();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)var10);
    java.lang.String var12 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

15-08-2013   20:38:08

Pair ID: branch161.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", 1);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var7 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var8 = var7.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var9 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var8);
    com.motorola.btc.research.target.pm.controller.TargetProject var11 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var8, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var13 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var14 = var13.toString();
    java.util.Set var15 = var13.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var19 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var31 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var26, (java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var33 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var19, "Determiner: Determiner: //DT//DT", "", "hi!", "", var29);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var36 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var37 = var36.toString();
    java.util.Set var38 = var36.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var44 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var45 = var44.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var46 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var40, var45);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var51 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var52 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    com.motorola.btc.research.target.pm.controller.TargetProject var54 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var51, 10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var55 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var56 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var11, (java.util.Collection)var15, (java.util.Collection)var29, 0, (java.util.Collection)var38, (java.util.Collection)var45, (java.util.Collection)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var14.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var41.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var42.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }


  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", 100);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var12, var15);
    java.util.Set var17 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var27, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var35 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var39 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var40 = var39.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var41 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var35, var40);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var51 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var54 = var53.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var55 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var51, var54);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var57 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var18, (java.util.Collection)var27, (java.util.Collection)var40, 1, (java.util.Collection)var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var36.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }


  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }


  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var11 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var13 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var10, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var10, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var25 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var25);
    com.motorola.btc.research.target.pm.controller.TargetProject var27 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var25);
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var29 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.util.Set var30 = var29.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var34 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var44 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var46 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var43, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var43, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var50 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var34, (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var51 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var56 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var57 = var56.toString();
    java.util.Set var58 = var56.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var59 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var58);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var60 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var58);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "hi!", "", "");
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var72 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var80 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var81 = var80.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var82 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var84 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var81, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var85 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var87 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var81, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var88 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var72, (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var89 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var90 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var18, var27, (java.util.Collection)var30, (java.util.Collection)var43, 100, (java.util.Collection)var58, (java.util.Collection)var68, (java.util.Collection)var81);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Determiner: //DT"+ "'", var57.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var8 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var13 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var8, (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var15 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var11, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var11, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11, 100);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var19 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    com.motorola.btc.research.target.pm.controller.TargetProject var5 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", 10);
    com.motorola.btc.research.target.common.ucdoc.StepId var9 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var16 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var15);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var17 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var9, "hi!", "", "hi!", var15);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var18 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var5, (java.util.Collection)var15);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: //DT//DT", "hi!", (java.util.Collection)var15, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var23 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var30 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("hi!", "hi!", "hi!", "hi!", "hi!", "");
    java.util.HashMap var31 = var30.getTermsMap();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException();
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var35 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("hi!", (java.lang.Throwable)var34);
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var36 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("", (java.lang.Throwable)var35);
    com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException var37 = new com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var36);
    boolean var38 = var30.equals((java.lang.Object)var37);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var43 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var44 = var43.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var45 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var46 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var41, (java.util.Collection)var44);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var47 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var48 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var30, var44);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var53 = var52.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var54 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var53, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var57 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var58 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var61 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var66 = var65.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var67 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var61, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var68 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var20, var23, (java.util.Collection)var44, (java.util.Collection)var53, 0, (java.util.Collection)var66);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var62.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var63.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }


  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var11 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var12 = var11.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var13 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var12);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var12, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var12, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var12, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var12, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "", (java.util.Collection)var12);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var28 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var41 = var40.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var44 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var45 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var41, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var51 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", (java.util.Collection)var41, (-1));
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var54 = var53.toString();
    java.util.Set var55 = var53.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var64 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var65 = var64.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var66 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var68 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var69 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var71 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var72 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var73 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var22, var28, (java.util.Collection)var41, (java.util.Collection)var55, (-1), (java.util.Collection)var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Determiner: //DT"+ "'", var54.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }


  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    java.util.Set var10 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var9 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var17 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var18 = var17.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var18, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var24 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var18, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var9, (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var35 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var37 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var38 = var37.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var39 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var40 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var35, (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var43 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var28, var38);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var46 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("", "Determiner: //DT");
    java.util.Set var47 = var46.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var54 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var55 = var54.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var56 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var55);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var57 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var52, var55);
    com.motorola.btc.research.target.pm.controller.TargetProject var58 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var55);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "", "");
    java.util.HashMap var66 = var65.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var66);
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var72 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var78 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var79 = var78.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var80 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var72, "", "", "", "Determiner: //DT", var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var81 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var26, (java.util.Collection)var38, (java.util.Collection)var47, (-1), (java.util.Collection)var55, (java.util.Collection)var68, (java.util.Collection)var79);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var29.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var30.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }


  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var13 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var14 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var15 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var10, (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var18 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3, var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var13, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var5.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }


  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var10 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var9);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var11 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var6, (java.util.Collection)var9);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var15 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var16 = var15.toString();
    java.util.Set var17 = var15.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var17);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm var21 = new com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm("");
    java.util.Set var22 = var21.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var23 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var22);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var6, (java.util.Collection)var17, (java.util.Collection)var22, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Determiner: //DT"+ "'", var16.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var10 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4, var9);
    int var11 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var6.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 21);

  }


  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var7 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var8.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var8 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.common.ucdoc.PhoneDocument var6 = new com.motorola.btc.research.target.common.ucdoc.PhoneDocument("hi!", 0L);
    boolean var7 = var1.equals((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }


  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test71");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test37");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));

  }


  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test6");


    com.motorola.btc.research.target.common.ucdoc.StepId var3 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var11 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "", "", "", "Determiner: //DT", var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var27, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var34 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var18, (java.util.Collection)var27);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var35 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("Determiner: //DT", "Determiner: //DT");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var44 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "Determiner: Determiner: //DT//DT", "hi!", "hi!", "Determiner: //DT", var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var51 = var50.toString();
    java.util.Set var52 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var53 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", "Determiner: Determiner: Determiner: //DT//DT//DT", "", var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var51.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }


  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test95");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test24");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));

  }


  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test2");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: //DT"+ "'", var6.equals("Determiner: //DT"));

  }


  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test18");


    com.motorola.btc.research.target.pm.controller.TargetProject var4 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var7 = var6.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var8 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var4, (java.util.Collection)var7);
    com.motorola.btc.research.target.pm.controller.TargetProject var12 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var16 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var17 = var16.toString();
    java.util.Set var18 = var16.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var30 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var26, var29);
    java.util.Set var31 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var31);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var34 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var4, var12, (java.util.Collection)var18, (java.util.Collection)var31, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var35 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var31);
    com.motorola.btc.research.target.pm.controller.TargetProject var37 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: //DT", (java.util.Collection)var31, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Determiner: //DT"+ "'", var17.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }


Approach: EIC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertNotNull(string0);
      assertEquals("Determiner: //DT", string0);
  }


Approach: EIC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", 1);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var7 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var8 = var7.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var9 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var8);
    com.motorola.btc.research.target.pm.controller.TargetProject var11 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var8, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var13 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var14 = var13.toString();
    java.util.Set var15 = var13.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var19 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var31 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var26, (java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var33 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var19, "Determiner: Determiner: //DT//DT", "", "hi!", "", var29);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var36 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var37 = var36.toString();
    java.util.Set var38 = var36.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var44 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var45 = var44.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var46 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var40, var45);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var51 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var52 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    com.motorola.btc.research.target.pm.controller.TargetProject var54 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var51, 10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var55 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var56 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var11, (java.util.Collection)var15, (java.util.Collection)var29, 0, (java.util.Collection)var38, (java.util.Collection)var45, (java.util.Collection)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var14.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var41.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var42.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }


  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", 100);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var12, var15);
    java.util.Set var17 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var27, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var35 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var39 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var40 = var39.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var41 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var35, var40);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var51 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var54 = var53.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var55 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var51, var54);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var57 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var18, (java.util.Collection)var27, (java.util.Collection)var40, 1, (java.util.Collection)var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var36.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }


  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }


  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var11 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var13 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var10, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var10, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var25 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var25);
    com.motorola.btc.research.target.pm.controller.TargetProject var27 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var25);
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var29 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.util.Set var30 = var29.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var34 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var44 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var46 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var43, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var43, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var50 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var34, (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var51 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var56 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var57 = var56.toString();
    java.util.Set var58 = var56.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var59 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var58);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var60 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var58);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "hi!", "", "");
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var72 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var80 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var81 = var80.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var82 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var84 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var81, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var85 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var87 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var81, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var88 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var72, (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var89 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var90 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var18, var27, (java.util.Collection)var30, (java.util.Collection)var43, 100, (java.util.Collection)var58, (java.util.Collection)var68, (java.util.Collection)var81);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Determiner: //DT"+ "'", var57.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var8 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var13 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var8, (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var15 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var11, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var11, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11, 100);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var19 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    com.motorola.btc.research.target.pm.controller.TargetProject var5 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", 10);
    com.motorola.btc.research.target.common.ucdoc.StepId var9 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var16 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var15);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var17 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var9, "hi!", "", "hi!", var15);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var18 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var5, (java.util.Collection)var15);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: //DT//DT", "hi!", (java.util.Collection)var15, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var23 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var30 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("hi!", "hi!", "hi!", "hi!", "hi!", "");
    java.util.HashMap var31 = var30.getTermsMap();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException();
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var35 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("hi!", (java.lang.Throwable)var34);
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var36 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("", (java.lang.Throwable)var35);
    com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException var37 = new com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var36);
    boolean var38 = var30.equals((java.lang.Object)var37);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var43 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var44 = var43.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var45 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var46 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var41, (java.util.Collection)var44);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var47 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var48 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var30, var44);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var53 = var52.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var54 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var53, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var57 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var58 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var61 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var66 = var65.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var67 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var61, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var68 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var20, var23, (java.util.Collection)var44, (java.util.Collection)var53, 0, (java.util.Collection)var66);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var62.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var63.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }


  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var11 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var12 = var11.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var13 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var12);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var12, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var12, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var12, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var12, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "", (java.util.Collection)var12);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var28 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var41 = var40.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var44 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var45 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var41, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var51 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", (java.util.Collection)var41, (-1));
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var54 = var53.toString();
    java.util.Set var55 = var53.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var64 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var65 = var64.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var66 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var68 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var69 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var71 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var72 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var73 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var22, var28, (java.util.Collection)var41, (java.util.Collection)var55, (-1), (java.util.Collection)var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Determiner: //DT"+ "'", var54.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }


  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    java.util.Set var10 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var9 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var17 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var18 = var17.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var18, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var24 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var18, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var9, (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var35 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var37 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var38 = var37.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var39 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var40 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var35, (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var43 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var28, var38);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var46 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("", "Determiner: //DT");
    java.util.Set var47 = var46.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var54 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var55 = var54.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var56 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var55);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var57 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var52, var55);
    com.motorola.btc.research.target.pm.controller.TargetProject var58 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var55);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "", "");
    java.util.HashMap var66 = var65.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var66);
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var72 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var78 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var79 = var78.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var80 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var72, "", "", "", "Determiner: //DT", var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var81 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var26, (java.util.Collection)var38, (java.util.Collection)var47, (-1), (java.util.Collection)var55, (java.util.Collection)var68, (java.util.Collection)var79);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var29.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var30.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }


  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var13 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var14 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var15 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var10, (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var18 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3, var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var13, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var5.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }


  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var10 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var9);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var11 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var6, (java.util.Collection)var9);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var15 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var16 = var15.toString();
    java.util.Set var17 = var15.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var17);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm var21 = new com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm("");
    java.util.Set var22 = var21.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var23 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var22);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var6, (java.util.Collection)var17, (java.util.Collection)var22, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Determiner: //DT"+ "'", var16.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var10 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4, var9);
    int var11 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var6.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 21);

  }


  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var7 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var8.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var8 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.common.ucdoc.PhoneDocument var6 = new com.motorola.btc.research.target.common.ucdoc.PhoneDocument("hi!", 0L);
    boolean var7 = var1.equals((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures ------------------------------------------------------------------------------

16-08-2013   08:10:17

Pair ID: branch51.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

16-08-2013   08:14:18

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<evosuite>

Failed Tests:


  public void test5()  throws Throwable  {
      UseCaseEditor useCaseEditor0 = new UseCaseEditor();
      // Undeclared exception!
      try {
        useCaseEditor0.doSaveAs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.setActivePage("hi!");
    var0.setFocus();
    java.lang.String var5 = var0.getTitle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }


  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    org.eclipse.ui.forms.editor.IFormPage var7 = var0.selectReveal((java.lang.Object)(byte)0);
    var0.editorDirtyStateChanged();
    var0.dispose();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    org.eclipse.ui.IEditorInput var11 = var0.getEditorInput();
    var0.doSaveAs();

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    boolean var10 = var0.isSaveAsAllowed();
    var0.editorDirtyStateChanged();
    java.lang.String var12 = var0.getContentDescription();
    org.eclipse.ui.forms.editor.IFormPage var13 = var0.getActivePageInstance();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.refresh(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }


  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var12 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var13 = var12.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var15 = var12.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var16 = var12.getEditorInput();
    java.lang.String var17 = var12.getPartName();
    org.eclipse.ui.forms.editor.IFormPage var18 = var0.selectReveal((java.lang.Object)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    java.lang.String var10 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }


  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.util.Map var9 = var0.getPartProperties();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }


  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    var7.showBusy(true);
    br.ufpe.cin.target.pm.exceptions.TargetSearchException var18 = new br.ufpe.cin.target.pm.exceptions.TargetSearchException("hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var20 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var18, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var21 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var18);
    org.eclipse.ui.forms.editor.IFormPage var22 = var7.setActivePage("", (java.lang.Object)var18);
    org.eclipse.ui.forms.editor.IFormPage var24 = var7.findPage("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }


  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));

  }


  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    org.eclipse.ui.IEditorSite var4 = var0.getEditorSite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test35");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    var7.showBusy(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test28");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.lang.String var5 = var0.getPartName();
    org.eclipse.ui.IEditorSite var6 = var0.getEditorSite();
    boolean var7 = var0.isSaveOnCloseNeeded();
    org.eclipse.ui.IEditorSite var8 = var0.getEditorSite();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var10 = var9.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var12 = var9.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var13 = var9.getEditorInput();
    java.util.Map var14 = var9.getPartProperties();
    java.lang.String var15 = var9.getTitle();
    org.eclipse.ui.forms.editor.IFormPage var16 = var0.selectReveal((java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test212");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }


  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test342");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    org.eclipse.ui.IEditorPart var1 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.findPage("");
    java.lang.String var4 = var0.getTitle();
    java.lang.String var6 = var0.getPartProperty("");
    br.ufpe.cin.target.common.exceptions.TargetException var8 = new br.ufpe.cin.target.common.exceptions.TargetException("");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var10 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var8, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var11 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var10);
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var13 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var11, "hi!");
    br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException var14 = new br.ufpe.cin.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var13);
    org.eclipse.ui.forms.editor.IFormPage var15 = var0.selectReveal((java.lang.Object)var13);
    java.lang.Object var16 = var0.getSelectedPage();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test325");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.setActivePage("hi!");
    var0.setFocus();
    java.lang.Object var5 = var0.getSelectedPage();
    boolean var6 = var0.isSaveAsAllowed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }


  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test423");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("");
    org.eclipse.ui.forms.editor.IFormPage var10 = var0.findPage("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test318");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test304");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.lang.String var5 = var0.getPartName();
    org.eclipse.ui.IEditorSite var6 = var0.getEditorSite();
    boolean var7 = var0.isSaveOnCloseNeeded();
    org.eclipse.ui.IEditorSite var8 = var0.getEditorSite();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var10 = var9.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var12 = var9.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var13 = var9.getEditorInput();
    java.util.Map var14 = var9.getPartProperties();
    java.lang.String var15 = var9.getTitle();
    org.eclipse.ui.forms.editor.IFormPage var16 = var0.selectReveal((java.lang.Object)var9);
    java.util.Map var17 = var0.getPartProperties();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }


  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test157");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    java.util.Map var12 = var0.getPartProperties();
    var0.setFocus();
    br.ufpe.cin.target.pm.common.TreeObject var14 = new br.ufpe.cin.target.pm.common.TreeObject((java.lang.Object)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }


  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test60");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    java.lang.String var5 = var0.getTitleToolTip();
    boolean var6 = var0.isSaveOnCloseNeeded();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var7 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var8 = var7.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var10 = var7.setActivePage("hi!");
    var7.setFocus();
    java.lang.Object var12 = var7.getSelectedPage();
    var0.setActiveEditor((org.eclipse.ui.IEditorPart)var7);
    java.lang.String var14 = var0.getTitle();
    java.lang.String var15 = var0.getPartName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));

  }


  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test8");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("");
    var0.setFocus();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    var0.showBusy(false);
    var0.updateTitle("hi!");
    boolean var15 = var0.isSaveAsAllowed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }


  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test99");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    var0.setFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test14");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    boolean var6 = var0.isSaveOnCloseNeeded();
    java.lang.String var7 = var0.getTitle();
    java.lang.String var8 = var0.getTitleToolTip();
    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var9 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    boolean var10 = var9.isDirty();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)var10);
    java.lang.String var12 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   08:41:10

Pair ID: branch161.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", 1);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var7 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var8 = var7.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var9 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var8);
    com.motorola.btc.research.target.pm.controller.TargetProject var11 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var8, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var13 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var14 = var13.toString();
    java.util.Set var15 = var13.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var19 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var31 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var26, (java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var33 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var19, "Determiner: Determiner: //DT//DT", "", "hi!", "", var29);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var36 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var37 = var36.toString();
    java.util.Set var38 = var36.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var44 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var45 = var44.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var46 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var40, var45);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var51 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var52 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    com.motorola.btc.research.target.pm.controller.TargetProject var54 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var51, 10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var55 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var56 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var11, (java.util.Collection)var15, (java.util.Collection)var29, 0, (java.util.Collection)var38, (java.util.Collection)var45, (java.util.Collection)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var14.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var41.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var42.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }


  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", 100);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var12, var15);
    java.util.Set var17 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var27, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var35 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var39 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var40 = var39.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var41 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var35, var40);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var51 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var54 = var53.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var55 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var51, var54);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var57 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var18, (java.util.Collection)var27, (java.util.Collection)var40, 1, (java.util.Collection)var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var36.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }


  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }


  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var11 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var13 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var10, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var10, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var25 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var25);
    com.motorola.btc.research.target.pm.controller.TargetProject var27 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var25);
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var29 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.util.Set var30 = var29.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var34 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var44 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var46 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var43, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var43, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var50 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var34, (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var51 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var56 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var57 = var56.toString();
    java.util.Set var58 = var56.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var59 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var58);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var60 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var58);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "hi!", "", "");
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var72 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var80 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var81 = var80.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var82 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var84 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var81, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var85 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var87 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var81, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var88 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var72, (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var89 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var90 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var18, var27, (java.util.Collection)var30, (java.util.Collection)var43, 100, (java.util.Collection)var58, (java.util.Collection)var68, (java.util.Collection)var81);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Determiner: //DT"+ "'", var57.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var8 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var13 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var8, (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var15 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var11, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var11, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11, 100);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var19 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    com.motorola.btc.research.target.pm.controller.TargetProject var5 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", 10);
    com.motorola.btc.research.target.common.ucdoc.StepId var9 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var16 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var15);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var17 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var9, "hi!", "", "hi!", var15);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var18 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var5, (java.util.Collection)var15);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: //DT//DT", "hi!", (java.util.Collection)var15, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var23 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var30 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("hi!", "hi!", "hi!", "hi!", "hi!", "");
    java.util.HashMap var31 = var30.getTermsMap();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException();
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var35 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("hi!", (java.lang.Throwable)var34);
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var36 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("", (java.lang.Throwable)var35);
    com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException var37 = new com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var36);
    boolean var38 = var30.equals((java.lang.Object)var37);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var43 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var44 = var43.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var45 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var46 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var41, (java.util.Collection)var44);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var47 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var48 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var30, var44);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var53 = var52.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var54 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var53, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var57 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var58 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var61 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var66 = var65.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var67 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var61, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var68 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var20, var23, (java.util.Collection)var44, (java.util.Collection)var53, 0, (java.util.Collection)var66);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var62.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var63.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }


  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var11 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var12 = var11.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var13 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var12);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var12, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var12, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var12, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var12, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "", (java.util.Collection)var12);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var28 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var41 = var40.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var44 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var45 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var41, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var51 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", (java.util.Collection)var41, (-1));
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var54 = var53.toString();
    java.util.Set var55 = var53.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var64 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var65 = var64.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var66 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var68 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var69 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var71 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var72 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var73 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var22, var28, (java.util.Collection)var41, (java.util.Collection)var55, (-1), (java.util.Collection)var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Determiner: //DT"+ "'", var54.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }


  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    java.util.Set var10 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var9 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var17 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var18 = var17.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var18, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var24 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var18, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var9, (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var35 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var37 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var38 = var37.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var39 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var40 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var35, (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var43 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var28, var38);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var46 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("", "Determiner: //DT");
    java.util.Set var47 = var46.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var54 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var55 = var54.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var56 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var55);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var57 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var52, var55);
    com.motorola.btc.research.target.pm.controller.TargetProject var58 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var55);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "", "");
    java.util.HashMap var66 = var65.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var66);
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var72 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var78 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var79 = var78.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var80 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var72, "", "", "", "Determiner: //DT", var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var81 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var26, (java.util.Collection)var38, (java.util.Collection)var47, (-1), (java.util.Collection)var55, (java.util.Collection)var68, (java.util.Collection)var79);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var29.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var30.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }


  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var13 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var14 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var15 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var10, (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var18 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3, var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var13, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var5.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }


  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var10 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var9);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var11 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var6, (java.util.Collection)var9);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var15 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var16 = var15.toString();
    java.util.Set var17 = var15.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var17);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm var21 = new com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm("");
    java.util.Set var22 = var21.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var23 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var22);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var6, (java.util.Collection)var17, (java.util.Collection)var22, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Determiner: //DT"+ "'", var16.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var10 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4, var9);
    int var11 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var6.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 21);

  }


  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var7 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var8.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var8 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.common.ucdoc.PhoneDocument var6 = new com.motorola.btc.research.target.common.ucdoc.PhoneDocument("hi!", 0L);
    boolean var7 = var1.equals((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }


  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test71");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test37");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));

  }


  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test6");


    com.motorola.btc.research.target.common.ucdoc.StepId var3 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var11 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "", "", "", "Determiner: //DT", var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var27, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var34 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var18, (java.util.Collection)var27);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var35 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("Determiner: //DT", "Determiner: //DT");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var44 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "Determiner: Determiner: //DT//DT", "hi!", "hi!", "Determiner: //DT", var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var51 = var50.toString();
    java.util.Set var52 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var53 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var3, "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", "Determiner: Determiner: Determiner: //DT//DT//DT", "", var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var51.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }


  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test95");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test24");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));

  }


  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test2");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: //DT"+ "'", var6.equals("Determiner: //DT"));

  }


  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test18");


    com.motorola.btc.research.target.pm.controller.TargetProject var4 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var7 = var6.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var8 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var4, (java.util.Collection)var7);
    com.motorola.btc.research.target.pm.controller.TargetProject var12 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var16 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var17 = var16.toString();
    java.util.Set var18 = var16.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var30 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var26, var29);
    java.util.Set var31 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var31);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var34 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var4, var12, (java.util.Collection)var18, (java.util.Collection)var31, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var35 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var31);
    com.motorola.btc.research.target.pm.controller.TargetProject var37 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: //DT", (java.util.Collection)var31, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Determiner: //DT"+ "'", var17.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }


Approach: EIC<evosuite>

Failed Tests:


  public void test2()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: EIC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", 1);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var7 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var8 = var7.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var9 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var8);
    com.motorola.btc.research.target.pm.controller.TargetProject var11 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var8, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var13 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var14 = var13.toString();
    java.util.Set var15 = var13.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var19 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var31 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var26, (java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var33 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var19, "Determiner: Determiner: //DT//DT", "", "hi!", "", var29);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var36 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var37 = var36.toString();
    java.util.Set var38 = var36.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var44 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var45 = var44.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var46 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var40, var45);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var51 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var52 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    com.motorola.btc.research.target.pm.controller.TargetProject var54 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var51, 10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var55 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var56 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var11, (java.util.Collection)var15, (java.util.Collection)var29, 0, (java.util.Collection)var38, (java.util.Collection)var45, (java.util.Collection)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var14.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var41.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var42.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }


  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", 100);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var12, var15);
    java.util.Set var17 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var28 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var30 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var27, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var31 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.target.pm.controller.TargetProject var33 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var27, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var35 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var39 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var40 = var39.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var41 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var35, var40);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var51 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var54 = var53.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var55 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var51, var54);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var57 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var18, (java.util.Collection)var27, (java.util.Collection)var40, 1, (java.util.Collection)var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var36.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }


  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var33 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));

  }


  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }


  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var9 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var10 = var9.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var11 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var13 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var10, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var10, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var10);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var25 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var25);
    com.motorola.btc.research.target.pm.controller.TargetProject var27 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var25);
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var29 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.util.Set var30 = var29.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var34 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var42 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var43 = var42.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var44 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var46 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var43, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var43, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var50 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var34, (java.util.Collection)var43);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var51 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var43);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var56 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var57 = var56.toString();
    java.util.Set var58 = var56.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var59 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var58);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var60 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var58);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "hi!", "", "");
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var72 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var80 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var81 = var80.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var82 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var84 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var81, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var85 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.controller.TargetProject var87 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var81, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var88 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var72, (java.util.Collection)var81);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var89 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var90 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var18, var27, (java.util.Collection)var30, (java.util.Collection)var43, 100, (java.util.Collection)var58, (java.util.Collection)var68, (java.util.Collection)var81);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Determiner: //DT"+ "'", var57.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.util.Set var5 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var8 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var13 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var8, (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var15 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var16 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var10 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var11 = var10.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var12 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var11);
    com.motorola.btc.research.target.pm.controller.TargetProject var14 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var11, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var11, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var11, 100);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var19 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }


  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    com.motorola.btc.research.target.pm.controller.TargetProject var5 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", 10);
    com.motorola.btc.research.target.common.ucdoc.StepId var9 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var15 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var16 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var15);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var17 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var9, "hi!", "", "hi!", var15);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var18 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var5, (java.util.Collection)var15);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: //DT//DT", "hi!", (java.util.Collection)var15, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var23 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var30 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("hi!", "hi!", "hi!", "hi!", "hi!", "");
    java.util.HashMap var31 = var30.getTermsMap();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var34 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException();
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var35 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("hi!", (java.lang.Throwable)var34);
    com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException var36 = new com.motorola.btc.research.cnlframework.exceptions.RepositoryInitializationException("", (java.lang.Throwable)var35);
    com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException var37 = new com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException((java.lang.Exception)var36);
    boolean var38 = var30.equals((java.lang.Object)var37);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var43 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var44 = var43.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var45 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var46 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var41, (java.util.Collection)var44);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var47 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var44);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var48 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var30, var44);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var53 = var52.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var54 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.controller.TargetProject var56 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var53, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var57 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var58 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var53);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var61 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var66 = var65.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var67 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var61, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var68 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var20, var23, (java.util.Collection)var44, (java.util.Collection)var53, 0, (java.util.Collection)var66);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var62.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var63.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }


  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var11 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var12 = var11.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var13 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var12);
    com.motorola.btc.research.target.pm.controller.TargetProject var15 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var12, 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", (java.util.Collection)var12, 1);
    com.motorola.btc.research.target.pm.controller.TargetProject var19 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var12, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var12, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "", (java.util.Collection)var12);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var28 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "hi!", (java.util.Collection)var27);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var41 = var40.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var44 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var45 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var41);
    com.motorola.btc.research.target.pm.controller.TargetProject var47 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var41, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var49 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var41, 100);
    com.motorola.btc.research.target.pm.controller.TargetProject var51 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: //DT//DT", (java.util.Collection)var41, (-1));
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var53 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var54 = var53.toString();
    java.util.Set var55 = var53.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var64 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var65 = var64.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var66 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var68 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var69 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var65);
    com.motorola.btc.research.target.pm.controller.TargetProject var71 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var65, 0);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var72 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var73 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var22, var28, (java.util.Collection)var41, (java.util.Collection)var55, (-1), (java.util.Collection)var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Determiner: //DT"+ "'", var54.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }


  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.util.HashMap var8 = var1.getTermsMap();
    java.lang.String var9 = var1.toString();
    java.util.Set var10 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var9.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "hi!", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var9 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var17 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var18 = var17.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var21 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var18, 0);
    com.motorola.btc.research.target.pm.controller.TargetProject var22 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!", (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var24 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var18, (-1));
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var9, (java.util.Collection)var18);
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", (java.util.Collection)var18);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var35 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var37 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var38 = var37.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var39 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var40 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var35, (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.controller.TargetProject var41 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var38);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var42 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var38);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var43 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var28, var38);
    com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm var46 = new com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm("", "Determiner: //DT");
    java.util.Set var47 = var46.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var52 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var54 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var55 = var54.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var56 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var55);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var57 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var52, var55);
    com.motorola.btc.research.target.pm.controller.TargetProject var58 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "Determiner: //DT", (java.util.Collection)var55);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var65 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "Determiner: //DT", "Determiner: Determiner: Determiner: //DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "", "");
    java.util.HashMap var66 = var65.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var67 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var66);
    java.util.Set var68 = var67.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var72 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var78 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var79 = var78.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.FlowStep var80 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var72, "", "", "", "Determiner: //DT", var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var81 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var26, (java.util.Collection)var38, (java.util.Collection)var47, (-1), (java.util.Collection)var55, (java.util.Collection)var68, (java.util.Collection)var79);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var29.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var30.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }


  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT");
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var12 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var13 = var12.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var14 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var15 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var10, (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var16 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: //DT", (java.util.Collection)var13);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var17 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var13);
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var18 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3, var13);
    com.motorola.btc.research.target.pm.controller.TargetProject var20 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT", (java.util.Collection)var13, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"+ "'", var5.equals("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }


  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var10 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var9);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var11 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var6, (java.util.Collection)var9);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var15 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var16 = var15.toString();
    java.util.Set var17 = var15.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var18 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var17);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var19 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var17);
    com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm var21 = new com.motorola.btc.research.cnlframework.vocabulary.terms.CardinalTerm("");
    java.util.Set var22 = var21.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var23 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var22);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var25 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var6, (java.util.Collection)var17, (java.util.Collection)var22, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Determiner: //DT"+ "'", var16.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var9 = var8.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var10 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4, var9);
    int var11 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var6.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 21);

  }


  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var4 = var3.toString();
    java.util.Set var5 = var3.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var6 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var7 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: //DT"+ "'", var4.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var8.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    com.motorola.btc.research.target.pm.controller.TargetProject var2 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: //DT", "");
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.util.Set var5 = var4.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var6 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var2, (java.util.Collection)var5);
    com.motorola.btc.research.target.pm.controller.TargetProject var10 = new com.motorola.btc.research.target.pm.controller.TargetProject("Determiner: Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT//DT", "Determiner: //DT", 10);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var14 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var15 = var14.toString();
    java.util.Set var16 = var14.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.controller.TargetProject var17 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "Determiner: Determiner: Determiner: //DT//DT//DT", (java.util.Collection)var16);
    com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm var24 = new com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm("", "hi!", "", "", "hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var26 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var27 = var26.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var28 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var24, var27);
    java.util.Set var29 = var24.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var32 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var2, var10, (java.util.Collection)var16, (java.util.Collection)var29, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Determiner: //DT"+ "'", var15.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }


  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var8 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: Determiner: //DT//DT//DT");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: Determiner: //DT//DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var5.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.target.common.ucdoc.PhoneDocument var6 = new com.motorola.btc.research.target.common.ucdoc.PhoneDocument("hi!", 0L);
    boolean var7 = var1.equals((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures ------------------------------------------------------------------------------

16-08-2013   09:11:55

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   09:15:19

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      UseCaseEditor useCaseEditor0 = new UseCaseEditor();
      // Undeclared exception!
      try {
        useCaseEditor0.doSaveAs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    org.eclipse.ui.forms.editor.IFormPage var7 = var0.selectReveal((java.lang.Object)(byte)0);
    var0.editorDirtyStateChanged();
    var0.dispose();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    org.eclipse.ui.IEditorInput var11 = var0.getEditorInput();
    var0.doSaveAs();

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    boolean var10 = var0.isSaveAsAllowed();
    var0.editorDirtyStateChanged();
    java.lang.String var12 = var0.getContentDescription();
    org.eclipse.ui.forms.editor.IFormPage var13 = var0.getActivePageInstance();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.refresh(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }


  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    java.lang.String var10 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }


  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));

  }


  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    org.eclipse.ui.IEditorSite var4 = var0.getEditorSite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


Approach: EIC<evosuite>
------------------------------------------------------------------------------

16-08-2013   09:24:48

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      UseCaseEditor useCaseEditor0 = new UseCaseEditor();
      // Undeclared exception!
      try {
        useCaseEditor0.doSaveAs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    org.eclipse.ui.forms.editor.IFormPage var7 = var0.selectReveal((java.lang.Object)(byte)0);
    var0.editorDirtyStateChanged();
    var0.dispose();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    org.eclipse.ui.IEditorInput var11 = var0.getEditorInput();
    var0.doSaveAs();

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    boolean var10 = var0.isSaveAsAllowed();
    var0.editorDirtyStateChanged();
    java.lang.String var12 = var0.getContentDescription();
    org.eclipse.ui.forms.editor.IFormPage var13 = var0.getActivePageInstance();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.refresh(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    java.lang.String var4 = var0.getTitleToolTip();
    org.eclipse.ui.IEditorInput var5 = var0.getEditorInput();
    org.eclipse.ui.IEditorPart var6 = var0.getActiveEditor();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.findPage("hi!");
    org.eclipse.ui.IEditorInput var9 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var11 = var0.selectReveal((java.lang.Object)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }


  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    java.lang.String var10 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }


  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));

  }


  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    org.eclipse.ui.IEditorSite var4 = var0.getEditorSite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   09:41:36

Pair ID: branch161.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    com.motorola.btc.research.target.pm.controller.TargetProject var3 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "hi!", 1);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var7 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var8 = var7.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var9 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var8);
    com.motorola.btc.research.target.pm.controller.TargetProject var11 = new com.motorola.btc.research.target.pm.controller.TargetProject("", "", (java.util.Collection)var8, 0);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var13 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var14 = var13.toString();
    java.util.Set var15 = var13.getAvailablePOSTags();
    com.motorola.btc.research.target.common.ucdoc.StepId var19 = new com.motorola.btc.research.target.common.ucdoc.StepId("", "hi!", "");
    com.motorola.btc.research.target.pm.controller.TargetProject var26 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "hi!");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var28 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var29 = var28.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var30 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.pm.controller.TargetProjectRefresher var31 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefresher(var26, (java.util.Collection)var29);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var32 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var29);
    com.motorola.btc.research.target.common.ucdoc.FlowStep var33 = new com.motorola.btc.research.target.common.ucdoc.FlowStep(var19, "Determiner: Determiner: //DT//DT", "", "hi!", "", var29);
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var36 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var37 = var36.toString();
    java.util.Set var38 = var36.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var40 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var44 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var45 = var44.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var46 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var40, var45);
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var50 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.Set var51 = var50.getAvailablePOSTags();
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var52 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    com.motorola.btc.research.target.pm.controller.TargetProject var54 = new com.motorola.btc.research.target.pm.controller.TargetProject("hi!", "", (java.util.Collection)var51, 10);
    com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException var55 = new com.motorola.btc.research.target.pm.exceptions.TargetProjectLoadingException((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation var56 = new com.motorola.btc.research.target.pm.controller.TargetProjectRefreshInformation(var3, var11, (java.util.Collection)var15, (java.util.Collection)var29, 0, (java.util.Collection)var38, (java.util.Collection)var45, (java.util.Collection)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var14.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var37.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var41.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var42.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }


  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var4.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var5 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Determiner: Determiner: //DT//DT");
    java.util.Set var6 = var5.getAvailablePOSTags();
    com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException var7 = new com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var4.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var3.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: //DT"+ "'", var3.equals("Determiner: //DT"));

  }


Approach: EIC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   10:11:00

Pair ID: branch51.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.UseCaseEditor.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.save.XMLFileGenerator.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.providers.TableEditingSupport.java, TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.editor.actions.ExportCommand.java]

Approach: IC<evosuite>

Failed Tests:


  public void test5()  throws Throwable  {
      UseCaseEditor useCaseEditor0 = new UseCaseEditor();
      // Undeclared exception!
      try {
        useCaseEditor0.doSaveAs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    org.eclipse.ui.forms.editor.IFormPage var7 = var0.selectReveal((java.lang.Object)(byte)0);
    var0.editorDirtyStateChanged();
    var0.dispose();
    org.eclipse.ui.IEditorPart var10 = var0.getActiveEditor();
    org.eclipse.ui.IEditorInput var11 = var0.getEditorInput();
    var0.doSaveAs();

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.refresh(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }


  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    org.eclipse.ui.forms.editor.IFormPage var5 = var0.getActivePageInstance();
    org.eclipse.ui.forms.editor.IFormPage var8 = var0.setActivePage("hi!", (java.lang.Object)(short)(-1));
    java.lang.String var9 = var0.getPartName();
    java.lang.String var10 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }


  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    org.eclipse.ui.forms.editor.IFormPage var3 = var0.selectReveal((java.lang.Object)1.0d);
    org.eclipse.ui.IEditorInput var4 = var0.getEditorInput();
    java.util.Map var5 = var0.getPartProperties();
    java.lang.String var6 = var0.getTitle();
    boolean var7 = var0.isSaveOnCloseNeeded();
    java.lang.String var8 = var0.getTitle();
    java.lang.String var9 = var0.getTitle();
    boolean var10 = var0.isSaveAsAllowed();
    java.lang.String var11 = var0.getContentDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));

  }


  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    br.ufpe.cin.target.uceditor.editor.UseCaseEditor var0 = new br.ufpe.cin.target.uceditor.editor.UseCaseEditor();
    int var1 = var0.getActivePage();
    var0.setFocus();
    var0.editorDirtyStateChanged();
    org.eclipse.ui.IEditorSite var4 = var0.getEditorSite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.doSaveAs();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   10:26:43

Pair ID: branch161.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertNotNull(string0);
      assertEquals("Determiner: //DT", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


Approach: EIC<evosuite>
------------------------------------------------------------------------------

16-08-2013   10:48:21

Pair ID: branch206.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test1()  throws Throwable  {
      AdapterManager adapterManager0 = AdapterManager.getDefault();
      HashMap hashMap0 = adapterManager0.getFactories();
      LexicalEntry lexicalEntry0 = new LexicalEntry(hashMap0);
      HashSet hashSet0 = new HashSet();
      DuplicatedTermInLexiconException duplicatedTermInLexiconException0 = new DuplicatedTermInLexiconException(lexicalEntry0, hashSet0);
      String string0 = duplicatedTermInLexiconException0.toString();
      assertNotNull(string0);
      assertEquals("The following terms somehow intersects with the lexical entry to be added:\n", duplicatedTermInLexiconException0.getLocalizedMessage());
      assertEquals("com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException: The following terms somehow intersects with the lexical entry to be added:\n", string0);
  }


Approach: IC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      HashMap hashMap0 = new HashMap();
      LexicalEntry lexicalEntry0 = new LexicalEntry(hashMap0);
      LinkedHashSet linkedHashSet0 = new LinkedHashSet();
      DuplicatedTermInLexiconException duplicatedTermInLexiconException0 = new DuplicatedTermInLexiconException(lexicalEntry0, linkedHashSet0);
      assertEquals("com.motorola.btc.research.target.cnl.exceptions.DuplicatedTermInLexiconException: The following terms somehow intersects with the lexical entry to be added:\n", duplicatedTermInLexiconException0.toString());
  }


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

16-08-2013   10:54:16

Pair ID: branch207.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.NounTerm.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.VerbTerm.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      AdjectiveTerm adjectiveTerm0 = new AdjectiveTerm(" 9HMEEa");
      assertEquals("Adjective: ' 9HMEEa'/JJ", adjectiveTerm0.toString());
  }


  public void test4()  throws Throwable  {
      AdjectiveTerm adjectiveTerm0 = new AdjectiveTerm("");
      String string0 = adjectiveTerm0.toString();
      assertNotNull(string0);
      assertEquals("Adjective: ''/JJ", adjectiveTerm0.toString());
      assertEquals("Adjective: ''/JJ", string0);
  }


  public void test1()  throws Throwable  {
      AdverbTerm adverbTerm0 = new AdverbTerm("");
      String string0 = adverbTerm0.toString();
      assertNotNull(string0);
      assertEquals("Adverb: ''/ADV", adverbTerm0.toString());
      assertEquals("Adverb: ''/ADV", string0);
  }


  public void test6()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("", "");
      assertNotNull(nounTerm0);
      
      int int0 = nounTerm0.compareTo((LexicalEntry) null);
      assertEquals(0, int0);
      assertEquals("Noun: ''/NNS''/NN", nounTerm0.toString());
  }


  public void test3()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("", "");
      assertNotNull(nounTerm0);
      
      String string0 = nounTerm0.getSingular();
      assertEquals("Noun: ''/NNS''/NN", nounTerm0.toString());
      assertNotNull(string0);
  }


  public void test2()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("", "");
      assertNotNull(nounTerm0);
      
      String string0 = nounTerm0.getPlural();
      assertEquals("Noun: ''/NNS''/NN", nounTerm0.toString());
      assertNotNull(string0);
  }


  public void test5()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("", "");
      assertNotNull(nounTerm0);
      
      LexicalEntry lexicalEntry0 = new LexicalEntry();
      int int0 = nounTerm0.compareTo(lexicalEntry0);
      assertEquals(0, int0);
      assertEquals("Noun: ''/NNS''/NN", nounTerm0.toString());
  }


  public void test4()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm(" _-", " _-");
      assertNotNull(nounTerm0);
      
      String string0 = nounTerm0.toString();
      assertEquals("Noun: ' _-'/NNS' _-'/NN", nounTerm0.toString());
      assertNotNull(string0);
      assertEquals("Noun: ' _-'/NNS' _-'/NN", string0);
  }


  public void test1()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("", "");
      assertNotNull(nounTerm0);
      
      int int0 = nounTerm0.compareTo(nounTerm0);
      assertEquals(0, int0);
      assertEquals("Noun: ''/NNS''/NN", nounTerm0.toString());
  }


  public void test0()  throws Throwable  {
      NounTerm nounTerm0 = new NounTerm("S _H!2 ", "S _H!2 ");
      assertNotNull(nounTerm0);
      
      NounTerm nounTerm1 = new NounTerm((String) null, (String) null);
      int int0 = nounTerm1.compareTo(nounTerm0);
      assertEquals("Noun: 'null'/NNS'null'/NN", nounTerm1.toString());
      assertEquals(0, int0);
  }


  public void test3()  throws Throwable  {
      PrepositionTerm prepositionTerm0 = new PrepositionTerm("");
      String string0 = prepositionTerm0.toString();
      assertEquals("Preposition: ''/PP", prepositionTerm0.toString());
      assertNotNull(string0);
      assertEquals("Preposition: ''/PP", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var4 = var3.getAvailablePOSTags();
    java.lang.String var5 = var3.toString();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 18);

  }


  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD'/ADV"+ "'", var2.equals("Adverb: 'Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD'/ADV"));

  }


  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }


  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var4 = var3.getAvailablePOSTags();
    java.lang.String var5 = var3.toString();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3);
    java.util.Set var7 = var3.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }


  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));

  }


  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Adjective: 'Adjective: ''/JJ'/JJ");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'Adjective: 'Adjective: ''/JJ'/JJ'/ADV"+ "'", var2.equals("Adverb: 'Adjective: 'Adjective: ''/JJ'/JJ'/ADV"));

  }


  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'hi!'/PP"+ "'", var2.equals("Preposition: 'hi!'/PP"));

  }


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("Preposition: 'Preposition: 'hi!'/PP'/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: 'Preposition: 'Preposition: 'hi!'/PP'/PP'/JJ"+ "'", var2.equals("Adjective: 'Preposition: 'Preposition: 'hi!'/PP'/PP'/JJ"));

  }


  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));

  }


  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }


  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));

  }


  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));

  }


  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));

  }


  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Adjective: ''/JJ"+ "'", var3.equals("Adjective: ''/JJ"));

  }


  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Adjective: ''/JJ"+ "'", var8.equals("Adjective: ''/JJ"));

  }


  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.getTerm();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.getTerm();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var6.equals("Adverb: 'hi!'/ADV"));

  }


  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Preposition: ''/PP"+ "'", var6.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Preposition: ''/PP"+ "'", var7.equals("Preposition: ''/PP"));

  }


  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var5 = var4.getTermsMap();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    java.util.HashMap var7 = var4.getTermsMap();
    java.lang.String var8 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Preposition: 'hi!'/PP"+ "'", var8.equals("Preposition: 'hi!'/PP"));

  }


  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }


  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adjective: ''/JJ"+ "'", var5.equals("Adjective: ''/JJ"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("Adjective: ''/JJ");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: 'Adjective: ''/JJ'/JJ"+ "'", var2.equals("Adjective: 'Adjective: ''/JJ'/JJ"));

  }


  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }


  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'Preposition: ''/PP'/PP"+ "'", var2.equals("Preposition: 'Preposition: ''/PP'/PP"));

  }


  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adjective: ''/JJ"+ "'", var5.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));

  }


  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var7 = var6.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var7);
    int var9 = var1.compareTo(var8);
    java.util.HashMap var10 = var8.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Preposition: ''/PP"+ "'", var6.equals("Preposition: ''/PP"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.util.HashMap var5 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));

  }


  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    java.util.HashMap var5 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }


  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));

  }


  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: 'hi!'/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'Preposition: 'hi!'/PP'/PP"+ "'", var2.equals("Preposition: 'Preposition: 'hi!'/PP'/PP"));

  }


  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));

  }


  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.getTerm();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.getTerm();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var5.equals("Adverb: 'hi!'/ADV"));

  }


  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }


  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var7 = var6.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var7);
    int var9 = var1.compareTo(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-3));

  }


  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));

  }


Approach: EIC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      AdjectiveTerm adjectiveTerm0 = new AdjectiveTerm("");
      String string0 = adjectiveTerm0.toString();
      assertEquals("Adjective: ''/JJ", adjectiveTerm0.toString());
      assertNotNull(string0);
      assertEquals("Adjective: ''/JJ", string0);
  }


  public void test1()  throws Throwable  {
      AdverbTerm adverbTerm0 = new AdverbTerm("");
      String string0 = adverbTerm0.toString();
      assertNotNull(string0);
      assertEquals("Adverb: ''/ADV", adverbTerm0.toString());
      assertEquals("Adverb: ''/ADV", string0);
  }


  public void test0()  throws Throwable  {
      PrepositionTerm prepositionTerm0 = new PrepositionTerm("");
      assertEquals("Preposition: ''/PP", prepositionTerm0.toString());
      
      int int0 = prepositionTerm0.compareTo(prepositionTerm0);
      assertEquals(0, int0);
  }


  public void test1()  throws Throwable  {
      PrepositionTerm prepositionTerm0 = new PrepositionTerm(" count = ");
      String string0 = prepositionTerm0.toString();
      assertNotNull(string0);
      assertEquals("Preposition: ' count = '/PP", prepositionTerm0.toString());
      assertEquals("Preposition: ' count = '/PP", string0);
  }


  public void test6()  throws Throwable  {
      VerbTerm verbTerm0 = new VerbTerm();
      String string0 = verbTerm0.toString();
      assertEquals("Verb: ", verbTerm0.toString());
      assertNotNull(string0);
      assertEquals("Verb: ", string0);
  }


Approach: EIC<randoop>

Failed Tests:


  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var4 = var3.getAvailablePOSTags();
    java.lang.String var5 = var3.toString();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 18);

  }


  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD'/ADV"+ "'", var2.equals("Adverb: 'Verb: 'Adjective: ''/JJ'/VBG''/VBP'Preposition: ''/PP'/VB''/VBN''/VBZ'Preposition: 'hi!'/PP'/VBD'/ADV"));

  }


  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }


  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.util.HashMap var3 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }


  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var3 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var4 = var3.getAvailablePOSTags();
    java.lang.String var5 = var3.toString();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var3);
    java.util.Set var7 = var3.getAvailablePOSTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }


  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));

  }


  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("Adjective: 'Adjective: ''/JJ'/JJ");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'Adjective: 'Adjective: ''/JJ'/JJ'/ADV"+ "'", var2.equals("Adverb: 'Adjective: 'Adjective: ''/JJ'/JJ'/ADV"));

  }


  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'hi!'/PP"+ "'", var2.equals("Preposition: 'hi!'/PP"));

  }


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("Preposition: 'Preposition: 'hi!'/PP'/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: 'Preposition: 'Preposition: 'hi!'/PP'/PP'/JJ"+ "'", var2.equals("Adjective: 'Preposition: 'Preposition: 'hi!'/PP'/PP'/JJ"));

  }


  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));

  }


  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }


  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Preposition: ''/PP"+ "'", var5.equals("Preposition: ''/PP"));

  }


  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));

  }


  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));

  }


  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Adjective: ''/JJ"+ "'", var3.equals("Adjective: ''/JJ"));

  }


  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Adjective: ''/JJ"+ "'", var8.equals("Adjective: ''/JJ"));

  }


  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.getTerm();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.getTerm();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var6.equals("Adverb: 'hi!'/ADV"));

  }


  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Preposition: ''/PP"+ "'", var6.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Preposition: ''/PP"+ "'", var7.equals("Preposition: ''/PP"));

  }


  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var4 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var5 = var4.getTermsMap();
    int var6 = var1.compareTo((com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry)var4);
    java.util.HashMap var7 = var4.getTermsMap();
    java.lang.String var8 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Preposition: 'hi!'/PP"+ "'", var8.equals("Preposition: 'hi!'/PP"));

  }


  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }


  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adjective: ''/JJ"+ "'", var5.equals("Adjective: ''/JJ"));

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: ''/JJ"+ "'", var2.equals("Adjective: ''/JJ"));

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("Adjective: ''/JJ");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adjective: 'Adjective: ''/JJ'/JJ"+ "'", var2.equals("Adjective: 'Adjective: ''/JJ'/JJ"));

  }


  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }


  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: ''/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'Preposition: ''/PP'/PP"+ "'", var2.equals("Preposition: 'Preposition: ''/PP'/PP"));

  }


  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adjective: ''/JJ"+ "'", var5.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));

  }


  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var7 = var6.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var7);
    int var9 = var1.compareTo(var8);
    java.util.HashMap var10 = var8.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }


  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)"Verb: 'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBG'Preposition: ''/PP'/VBP''/VB'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBN'Noun: ''/NNS'Preposition: ''/PP'/NN'/VBZ'hi!'/VBD");
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Preposition: ''/PP"+ "'", var6.equals("Preposition: ''/PP"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.util.HashMap var5 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));

  }


  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    java.util.HashMap var5 = var1.getTermsMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }


  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }


  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Adjective: ''/JJ"+ "'", var7.equals("Adjective: ''/JJ"));

  }


  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("Preposition: 'hi!'/PP");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Preposition: 'Preposition: 'hi!'/PP'/PP"+ "'", var2.equals("Preposition: 'Preposition: 'hi!'/PP'/PP"));

  }


  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdjectiveTerm("");
    java.lang.String var2 = var1.getTerm();
    java.lang.String var3 = var1.getTerm();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.getTerm();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Adjective: ''/JJ"+ "'", var4.equals("Adjective: ''/JJ"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Adjective: ''/JJ"+ "'", var6.equals("Adjective: ''/JJ"));

  }


  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.getTerm();
    java.util.Set var3 = var1.getAvailablePOSTags();
    java.lang.String var4 = var1.getTerm();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var5.equals("Adverb: 'hi!'/ADV"));

  }


  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.AdverbTerm("hi!");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Adverb: 'hi!'/ADV"+ "'", var2.equals("Adverb: 'hi!'/ADV"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }


  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    boolean var3 = var1.equals((java.lang.Object)0L);
    java.lang.String var4 = var1.toString();
    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var6 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("hi!");
    java.util.HashMap var7 = var6.getTermsMap();
    com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry var8 = new com.motorola.btc.research.cnlframework.vocabulary.terms.LexicalEntry(var7);
    int var9 = var1.compareTo(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Preposition: ''/PP"+ "'", var4.equals("Preposition: ''/PP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-3));

  }


  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.PrepositionTerm("");
    java.util.Set var2 = var1.getAvailablePOSTags();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Preposition: ''/PP"+ "'", var3.equals("Preposition: ''/PP"));

  }

------------------------------------------------------------------------------

16-08-2013   11:05:59

Pair ID: branch161.0

Impacted Classes:

[CNL Framework.src.java.com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test1()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm(" /");
      String string0 = determinerTerm0.toString();
      assertEquals("Determiner:  ///DT", determinerTerm0.toString());
      assertNotNull(string0);
      assertEquals("Determiner:  ///DT", string0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var3.equals("Determiner: Determiner: //DT//DT"));

  }


  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: Determiner: //DT//DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: Determiner: //DT//DT//DT"+ "'", var2.equals("Determiner: Determiner: Determiner: //DT//DT//DT"));

  }


  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: //DT"+ "'", var2.equals("Determiner: //DT"));

  }


  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm var1 = new com.motorola.btc.research.cnlframework.vocabulary.terms.DeterminerTerm("Determiner: //DT");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Determiner: Determiner: //DT//DT"+ "'", var2.equals("Determiner: Determiner: //DT//DT"));

  }


Approach: EIC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      DeterminerTerm determinerTerm0 = new DeterminerTerm("");
      String string0 = determinerTerm0.toString();
      assertNotNull(string0);
      assertEquals("Determiner: //DT", determinerTerm0.toString());
      assertEquals("Determiner: //DT", string0);
  }


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   09:57:44

Pair ID: branch213.0

Impacted Classes:

[TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.XMLEditorPage.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.actions.SaveAction.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.ucimported.FillInXMLEditorPage.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.ucimported.actions.OpenImportedUseCaseDelegate.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.postagger.POSUtil.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.XMLEditorUtil.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.ShowParsingErrorsDialog.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.grammar.CNLParser.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.save.GenerateXMLFile.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

19-08-2013   10:01:10

Pair ID: branch213.0

Impacted Classes:

[TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.XMLEditorPage.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.actions.SaveAction.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.ucimported.FillInXMLEditorPage.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalTermsSort.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.ucimported.actions.OpenImportedUseCaseDelegate.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.postagger.POSUtil.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.editor.XMLEditorUtil.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.ShowParsingErrorsDialog.java, CNL Framework.src.java.com.motorola.btc.research.cnlframework.grammar.CNLParser.java, TaRGeT XML Editor.src.com.motorola.btc.research.target.xmleditor.save.GenerateXMLFile.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

19-08-2013   10:13:37

Pair ID: branch213.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   10:24:49

Pair ID: branch213.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.EditRemoveLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   10:46:50

Pair ID: branch218.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   10:52:00

Pair ID: branch218.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   11:01:02

Pair ID: branch218.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   12:57:21

Pair ID: branch224.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Approach: IC<randoop>

Approach: EIC<evosuite>

Approach: EIC<randoop>
------------------------------------------------------------------------------

19-08-2013   13:03:05

Pair ID: branch224.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

19-08-2013   13:47:28

Pair ID: branch224.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

19-08-2013   13:54:02

Pair ID: branch239.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalFilter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   14:01:05

Pair ID: branch239.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.LexicalFilter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   14:21:17

Pair ID: branch108.0

Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.verify.UseCaseVerifier.java]

Extended Impacted Classes:

[TaRGeT Use Case Editor.src.br.ufpe.cin.target.uceditor.util.UseCaseEditorUtil.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

19-08-2013   14:43:47

Pair ID: branch218.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java, TaRGeT Test Central 3 Output Plug-in.src.java.com.motorola.btc.research.target.tc3output.excel.ExcelFileFormatter.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extensions.output.OutputDocumentExtension.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Approach: IC<randoop>

Approach: EIC<evosuite>

Approach: EIC<randoop>
------------------------------------------------------------------------------

19-08-2013   18:05:17

Pair ID: branch273.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   15:37:11

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   15:45:09

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   16:09:37

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      Event event0 = new Event();
      Object object0 = event0.data;
      boolean boolean0 = OnTheFlyEditorInput.isEquals((Object) null, (Object) null);
      assertEquals(false, boolean0);
  }


Approach: IC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      Event event0 = new Event();
      Object object0 = event0.data;
      boolean boolean0 = OnTheFlyEditorInput.isEquals((Object) null, (Object) null);
      assertEquals(false, boolean0);
  }


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   16:34:18

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   16:44:30

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   16:53:53

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   17:25:58

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   17:35:29

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   17:53:04

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   17:57:50

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

20-08-2013   18:03:02

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   08:40:24

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test1()  throws Throwable  {
      TestCase testCase0 = new TestCase((-1), (List) null);
      TestCase testCase1 = new TestCase(0, (List) null);
      int int0 = testCase0.compareTo(testCase1);
      assertEquals(1, int0);
      assertEquals(-1, testCase0.getId());
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   08:49:48

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   08:54:18

Pair ID: branch283.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   09:41:07

Pair ID: branch275.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

21-08-2013   10:05:34

Pair ID: branch276.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TextualTestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   10:22:40

Pair ID: branch277.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TextualTestCase.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

21-08-2013   10:29:00

Pair ID: branch277.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TextualTestCaseFactory.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   10:56:20

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   11:02:26

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   13:17:46

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   13:28:08

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test11()  throws Throwable  {
      int int0 = LTS.getNextTransitionId();
      assertEquals(0, int0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   13:41:15

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   13:46:56

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test3()  throws Throwable  {
      StepSimilarity stepSimilarity0 = new StepSimilarity((TextualStep) null, (TextualStep) null, 36, 36, "");
      stepSimilarity0.setOrderDistance(36);
      StepSimilarity stepSimilarity1 = new StepSimilarity((TextualStep) null, (TextualStep) null, 0, 36, "");
      boolean boolean0 = stepSimilarity1.hasLowerSimilarityThan(stepSimilarity0);
      assertEquals(36, stepSimilarity0.getOrderDistance());
      assertEquals(true, boolean0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   14:12:54

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   14:32:33

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   15:55:57

Pair ID: branch286.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.views.CNLView.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   16:24:27

Pair ID: branch286.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.views.CNLView.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

21-08-2013   16:41:42

Pair ID: branch288.0

Impacted Classes:

[TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

21-08-2013   16:43:54

Pair ID: branch288.0

Impacted Classes:

[TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

21-08-2013   16:57:31

Pair ID: branch288.0

Impacted Classes:

[TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

21-08-2013   17:00:42

Pair ID: branch288.0

Impacted Classes:

[TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   09:53:09

Pair ID: branch288.0

Impacted Classes:

[TaRGeT Generate Test Suite.src.com.motorola.btc.research.target.cnl.generatetestsuite.wizards.NewTCGWizard.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   10:03:26

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   10:13:16

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.parseID("%;a#{<");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.buildPhoneDocument()Lcom/motorola/btc/research/target/common/ucdoc/PhoneDocument;: root-Branch
   * 2 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.<init>(Ljava/io/File;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      BaseStorageHook baseStorageHook0 = new BaseStorageHook((BaseStorage) null);
      File file0 = new File("!*|z=URaR.");
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor(file0);
      try {
        phoneDocumentExtractor0.buildPhoneDocument();
        fail("Expecting exception: TargetException");
      } catch(TargetException e) {
      }
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I46 Branch 23 IFGT L223 - false
   * 2 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.<init>(Ljava/io/File;)V: root-Branch
   * 3 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I46 Branch 23 IFGT L223 - true
   * 4 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I24 Branch 22 IF_ICMPGT L219 - true
   * 5 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I19 Branch 21 IF_ICMPLT L219 - false
   * 6 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 20 IF_ICMPGE L217 - false
   * 7 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.parseID(Ljava/lang/String;)Ljava/lang/String;: I24 Branch 22 IF_ICMPGT L219 - false
   */
  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[1] = "M1V.(.'$p%zO";
      BaseAdaptor baseAdaptor0 = new BaseAdaptor(stringArray0);
      BaseData baseData0 = new BaseData(149L, baseAdaptor0);
      baseData0.getDataFile((String) null);
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      phoneDocumentExtractor0.parseID("M1V.(.'$p%zO");
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.getResponse(Ljava/lang/String;)Ljava/lang/String;: I9 Branch 7 IFEQ L124 - true
   * 2 com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.<init>(Ljava/io/File;)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.getResponse("lRN");
      assertEquals("", string0);
  }
}


  public void test3()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.getResponse("lRN");
      assertEquals("", string0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   10:28:28

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   11:29:40

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   11:37:05

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test14()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Feature feature0 = new Feature((String) null, (String) null, linkedList0);
      assertNotNull(feature0);
      
      Feature feature1 = feature0.mergeFeature((Feature) null);
      assertNull(feature1);
      
      // Undeclared exception!
      try {
        feature0.compareTo((Feature) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * A Feature object is expected.
         */
      }
  }


  public void test9()  throws Throwable  {
      Stack stack0 = new Stack();
      Feature feature0 = new Feature("pEO?zRK~'Oa;v", "pEO?zRK~'Oa;v", stack0);
      assertNotNull(feature0);
      
      Feature feature1 = feature0.mergeFeature((Feature) null);
      assertNull(feature1);
      assertEquals("pEO?zRK~'Oa;v - pEO?zRK~'Oa;v", feature0.toString());
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   14:09:17

Pair ID: branch291.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   14:14:56

Pair ID: branch291.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   14:28:18

Pair ID: branch291.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   14:36:16

Pair ID: branch291.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   14:51:46

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   15:00:29

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test2()  throws Throwable  {
      File file0 = new File("},<K<E'i%X)W&cdkK~D");


Approach: IC<randoop>
------------------------------------------------------------------------------

22-08-2013   15:15:09

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNull(cNLProperties0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   15:55:08

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

22-08-2013   16:31:24

Pair ID: branch294.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.xml.UseCaseDocumentXMLParser.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   10:32:35

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   11:14:03

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   11:23:19

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Approach: EIC<randoop>
------------------------------------------------------------------------------

26-08-2013   11:34:36

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyMultiPageEditor.java]

Approach: EIC<evosuite>
------------------------------------------------------------------------------

26-08-2013   13:17:15

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyGeneratedTestCasesPage.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.preferences.PreferencesDialog.java]

Approach: EIC<evosuite>
------------------------------------------------------------------------------

26-08-2013   13:25:54

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyGeneratedTestCasesPage.java, TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.editors.HTMLGenerator.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.preferences.PreferencesDialog.java]

Approach: EIC<evosuite>
------------------------------------------------------------------------------

26-08-2013   13:40:47

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyGeneratedTestCasesPage.java, TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.editors.HTMLGenerator.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyUtil.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.preferences.PreferencesDialog.java]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   14:14:16

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyGeneratedTestCasesPage.java, TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.editors.HTMLGenerator.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyUtil.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.preferences.PreferencesDialog.java]

Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:


Approach: IC<evosuite>
------------------------------------------------------------------------------

26-08-2013   14:52:45

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   15:04:49

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TextualTestCase.java]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   15:12:42

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   15:32:42

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.UserViewLTSGenerator.java]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   15:39:53

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.UserViewLTSGenerator.java]

Approach: IC<evosuite>

Failed Tests:


  public void test5()  throws Throwable  {
      int int0 = LTS.getNextTransitionId();
      assertEquals(0, int0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    int var0 = com.motorola.btc.research.target.common.lts.LTS.resetNextTransitionId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == 0);

  }


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   16:11:31

Pair ID: branch284.0

Impacted Classes:

[]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<evosuite>
------------------------------------------------------------------------------

26-08-2013   16:16:51

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   16:22:45

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   16:37:37

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      Vector vector0 = new Vector(1, (-1462));
      TestCase testCase0 = new TestCase((-1462), vector0);
      TestCase testCase1 = new TestCase(1, vector0);
      int int0 = testCase0.compareTo(testCase1);
      assertEquals(1, testCase1.getId());
      assertEquals(1, int0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   16:52:45

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics.java, TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Approach: IC<evosuite>

Failed Tests:


  public void test26()  throws Throwable  {
      StepId stepId0 = StepId.START;
      TextualStep textualStep0 = new TextualStep("4VUp_kH-r", "4VUp_kH-r", "4VUp_kH-r", stepId0);
      stepId0.getContextString("4VUp_kH-r", "4VUp_kH-r");
      StepSimilarity stepSimilarity0 = new StepSimilarity(textualStep0, textualStep0, (-951), (-951), "START");
      assertNotNull(stepSimilarity0);
      
      StepSimilarity stepSimilarity1 = new StepSimilarity(textualStep0, textualStep0, (-951), (-951), "4VUp_kH-r");
      stepSimilarity1.setOrderDistance(91);
      boolean boolean0 = stepSimilarity0.hasLowerSimilarityThan(stepSimilarity1);
      assertEquals(91, stepSimilarity1.getOrderDistance());
      assertEquals(true, boolean0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   17:25:29

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   17:43:35

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.getAction("@DS&=kpx{sV;");
      assertNotNull(string0);
      assertEquals(";", string0);
  }
}


  public void test3()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.parseID("End tag ");
      assertNotNull(string0);
      assertEquals("", string0);
  }


Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>
------------------------------------------------------------------------------

26-08-2013   18:17:05

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.controller.ProjectManagerController.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   21:49:57

Pair ID: branch282.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyEditorInput.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyGeneratedTestCasesPage.java, TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.editors.HTMLGenerator.java]

Extended Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.editors.OnTheFlyUtil.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.preferences.PreferencesDialog.java]

Approach: IC<randoop>

Approach: IC<evosuite>

Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   22:06:55

Pair ID: branch279.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.LTS.java]

Extended Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.lts.UserViewLTSGenerator.java]

Approach: IC<randoop>

Failed Tests:


  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    int var0 = com.motorola.btc.research.target.common.lts.LTS.resetNextTransitionId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == 0);

  }


Approach: IC<evosuite>

Failed Tests:


  public void test1()  throws Throwable  {
      int int0 = LTS.resetNextTransitionId();
      assertEquals(0, int0);
  }


Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   22:24:45

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics.java, TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>

Failed Tests:


  public void test18()  throws Throwable  {
      StepId stepId0 = StepId.START;
      TextualStep textualStep0 = new TextualStep("", "", "", stepId0);
      StepSimilarity stepSimilarity0 = new StepSimilarity(textualStep0, textualStep0, 0, 0, "");
      assertNotNull(stepSimilarity0);
      
      stepSimilarity0.setOrderDistance(523);
      StepSimilarity stepSimilarity1 = new StepSimilarity(textualStep0, textualStep0, 0, 523, "");
      boolean boolean0 = stepSimilarity1.hasLowerSimilarityThan(stepSimilarity0);
      assertEquals(523, stepSimilarity0.getOrderDistance());
      assertEquals(true, boolean0);
  }


Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   22:33:28

Pair ID: branch284.0

Impacted Classes:

[TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.extractor.TestCase.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.editor.TestComparisonPage.java]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

26-08-2013   22:53:36

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.getAction("}w;cG");


  public void test5()  throws Throwable  {
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor((File) null);
      String string0 = phoneDocumentExtractor0.parseID("a)(wOG)v<");
      assertEquals("", string0);
      assertNotNull(string0);
  }


Approach: EIC<randoop>

Failed Tests:


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   09:42:41

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.controller.ProjectManagerController.java]

Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   09:52:37

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.controller.ProjectManagerController.java]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      Vector vector0 = new Vector();
      Feature feature0 = new Feature("", "", vector0);
      assertNotNull(feature0);
      
      Feature feature1 = feature0.mergeFeature((Feature) null);
      assertNull(feature1);
      assertEquals(" - ", feature0.toString());
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   10:24:42

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java, TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

27-08-2013   10:30:53

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.ExcelExtractor.java, TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java, TaRGeT TC Generation GUI.src.java.com.motorola.btc.research.target.tcg.util.TraceabilityMatrixGenerator.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

27-08-2013   10:55:32

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   11:03:00

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   11:10:59

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<evosuite>

Failed Tests:


  public void test2()  throws Throwable  {
      File file0 = new File("C;jrd ?ro0");
      PhoneDocumentExtractor phoneDocumentExtractor0 = new PhoneDocumentExtractor(file0);
      String string0 = phoneDocumentExtractor0.getCondition("C;jrd ?ro0");
      assertNotNull(string0);
      assertEquals("C", string0);
  }


Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   15:11:53

Pair ID: branch291.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   15:18:27

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java, TaRGeT STD Output Plug-in.src.com.motorola.btc.research.target.stdoutput.excel.ExcelFileFormatter.java, TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.dialogs.AddLexicalTermDialog.java]

Extended Impacted Classes:

[]

Approach: IC<evosuite>
------------------------------------------------------------------------------

27-08-2013   15:24:58

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.logger.Logger.java]

Approach: IC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNull(cNLProperties0);
  }


Approach: IC<randoop>

Failed Tests:


  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var0);

  }


  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = new com.motorola.btc.research.target.cnl.controller.CNLProperties();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   16:13:53

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.logger.Logger.java]

Approach: EIC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      Logger logger0 = Logger.getInstance();
      assertNotNull(logger0);
      
      logger0.callCNLProperties();
  }


Approach: EIC<randoop>

Failed Tests:


  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }


  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }


  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }


  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }


  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }


  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }


  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }


  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }


  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }


  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }


  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }


  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }


  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }


  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var95 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var96 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var97 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var98 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var99 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }


  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var95 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var96 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var97 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var98 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }


  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }


  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }


  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }


  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }


  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }


  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }


  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }


  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }


  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }


  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }


  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }


  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }


  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }


  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }


  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }


  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }


  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }


  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }


  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }


  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }


  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }


  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }


  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }


  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }


  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }


  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }


  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }


  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }


  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }


  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }


  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }


  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }


  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }


  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }


  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }


  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }


  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }


  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }


  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }


  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }


  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }


  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }


  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }


  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }


  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }


  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }


  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }


  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }


  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }


  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }


  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }


  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }


  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }


  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }


  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var95 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }


  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }


  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var95 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var96 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }


  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }


  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var77 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var78 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var79 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var80 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var81 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var82 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var83 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var84 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var85 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var86 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var87 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var88 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var89 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var90 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var91 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var92 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var93 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var94 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var95 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var96 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var97 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }


  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }


  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }


  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }


  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }


  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }


  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }


  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = new com.motorola.btc.research.target.cnl.controller.CNLProperties();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }


  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }


  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }


  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }


  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }


  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }


  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }


  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }


  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }


  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var6 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var7 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var8 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var9 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var10 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var11 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var12 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var13 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var14 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var15 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var16 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var17 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var18 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var19 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var20 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var21 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var22 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var23 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var24 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var25 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var26 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var27 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var28 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var29 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var30 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var31 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var32 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var33 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var34 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var35 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var36 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var37 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var38 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var39 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var40 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var41 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var42 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var43 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var44 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var45 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var46 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var47 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var48 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var49 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var50 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var51 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var52 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var53 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var54 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var55 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var56 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var57 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var58 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var59 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var60 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var61 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var62 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var63 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var64 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var65 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var66 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var67 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var68 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var69 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var70 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var71 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var72 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var73 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var74 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var75 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var76 = var0.callCNLProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }


  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    com.motorola.btc.research.target.cnl.logger.Logger var0 = com.motorola.btc.research.target.cnl.logger.Logger.getInstance();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var1 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var2 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var3 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var4 = var0.callCNLProperties();
    com.motorola.btc.research.target.cnl.controller.CNLProperties var5 = var0.call------------------------------------------------------------------------------

27-08-2013   16:37:35

Pair ID: branch292.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: EIC<evosuite>

Failed Tests:


  public void test0()  throws Throwable  {
      CNLPluginController cNLPluginController0 = CNLPluginController.getInstance();
      assertNotNull(cNLPluginController0);
      
      // Undeclared exception!
      try {
        cNLPluginController0.startController();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   17:01:00

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   17:19:06

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   17:27:23

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   17:34:56

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   17:42:51

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:


  public void test4()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNotNull(cNLProperties0);
      
      // Undeclared exception!
      try {
        cNLProperties0.getLexiconFiles();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


  public void test3()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNotNull(cNLProperties0);
      
      // Undeclared exception!
      try {
        cNLProperties0.getFaultReportFile();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


  public void test2()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNotNull(cNLProperties0);
      
      // Undeclared exception!
      try {
        cNLProperties0.getResponseGrammarFiles();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


  public void test1()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNotNull(cNLProperties0);
      
      // Undeclared exception!
      try {
        cNLProperties0.getActionGrammarFiles();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


  public void test0()  throws Throwable  {
      CNLProperties cNLProperties0 = CNLProperties.getInstance();
      assertNotNull(cNLProperties0);
      
      // Undeclared exception!
      try {
        cNLProperties0.getConditionGrammarFiles();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }


Approach: IC<randoop>

Failed Tests:


  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    java.lang.String var24 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }


  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    java.lang.String var24 = var0.getProperty("hi!");
    java.lang.String var26 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }


  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }


  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }


  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }


  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }


  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


Approach: EIC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

27-08-2013   18:18:47

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   09:23:19

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   09:29:29

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   09:48:47

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>
------------------------------------------------------------------------------

28-08-2013   10:02:26

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>

Failed Tests:


  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    java.lang.String var24 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }


  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    java.lang.String var24 = var0.getProperty("hi!");
    java.lang.String var26 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }


  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }


  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    java.lang.String var22 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }


  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    java.lang.String var20 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }


  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }


  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }


  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }


  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("hi!");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }


  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }


  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("hi!");
    java.lang.String var16 = var0.getProperty("hi!");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }


  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    java.lang.String var8 = var0.getProperty("hi!");
    java.lang.String var10 = var0.getProperty("hi!");
    java.lang.String var12 = var0.getProperty("hi!");
    java.lang.String var14 = var0.getProperty("");
    java.lang.String var16 = var0.getProperty("");
    java.lang.String var18 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }


  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    java.lang.String var6 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }


  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }


  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    com.motorola.btc.research.target.cnl.controller.CNLProperties var0 = com.motorola.btc.research.target.cnl.controller.CNLProperties.getInstance();
    java.lang.String var2 = var0.getProperty("hi!");
    java.lang.String var4 = var0.getProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }


Approach: EIC<evosuite>

Failed Tests:


Approach: EIC<randoop>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   10:30:17

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   10:39:59

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>
------------------------------------------------------------------------------

28-08-2013   10:43:57

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>
------------------------------------------------------------------------------

28-08-2013   10:46:26

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>
------------------------------------------------------------------------------

28-08-2013   10:48:54

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:


Approach: IC<randoop>
------------------------------------------------------------------------------

28-08-2013   10:53:05

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   10:58:22

Pair ID: branch293.0

Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLProperties.java]

Extended Impacted Classes:

[TaRGeT CNL Plugin.src.java.com.motorola.btc.research.target.cnl.controller.CNLPluginController.java]

Approach: IC<evosuite>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   11:21:21

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics.java, TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   12:55:22

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics.java, TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   12:57:59

Pair ID: branch281.0

Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.logic.StepSimilarity.java]

Extended Impacted Classes:

[TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics.java, TaRGeT Consistency Manager.src.java.com.motorola.btc.research.target.cm.tcsimilarity.metrics.Metrics2.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   13:51:20

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<randoop>

Failed Tests:


Approach: IC<evosuite>
------------------------------------------------------------------------------

28-08-2013   14:01:52

Pair ID: branch288.0

Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.extractor.PhoneDocumentExtractor.java]

Extended Impacted Classes:

[TaRGeT XLS Input Plug-in.src.com.motorola.btc.research.target.xlsinput.controller.XLSDocumentExtensionImplementation.java]

Approach: IC<randoop>

Failed Tests:

------------------------------------------------------------------------------

28-08-2013   14:15:50

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.controller.ProjectManagerController.java]

Approach: IC<randoop>
------------------------------------------------------------------------------

28-08-2013   14:34:51

Pair ID: branch290.0

Impacted Classes:

[TaRGeT Common.src.java.com.motorola.btc.research.target.common.ucdoc.Feature.java]

Extended Impacted Classes:

[TaRGeT Project Manager.src.java.com.motorola.btc.research.target.pm.controller.ProjectManagerController.java]

Approach: IC<randoop>
