Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
org.bank.account.Account.<init>()
org.bank.account.Account.<init>(int,int,org.bank.client.Client,double)
org.bank.account.Account.<init>(int,int)
org.bank.facade.Facade.<init>()
org.bank.gui.GUI.<init>()
org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account)
org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account)
org.bank.account.Account.toString()
org.bank.account.Account.t()
org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account)
org.bank.account.Account.getBalance()
org.bank.account.Account.debito(double)
org.bank.account.Account.setBalance(double)
org.bank.account.Account.deposito(double)
org.bank.account.Account.loan(double)
org.bank.account.Account.sacar(double)
org.bank.account.Account.getAg()
org.bank.account.Account.setAg(int)
org.bank.account.Account.getCc()
org.bank.account.Account.setCc(int)
org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
org.bank.client.Client.setAccount(org.bank.account.Account)
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: org.bank.account.Account.toString()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: org.bank.account.Account.t()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: found no sequences matching class class org.bank.client.Client
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: org.bank.account.Account.setBalance(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 6
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: found no sequences matching class class org.bank.client.Client
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 7
Selected statement: org.bank.account.Account.debito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: org.bank.gui.GUI.<init>()
Successfully created new unique sequence:var0 =  cons : org.bank.gui.GUI.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.bank.gui.GUI
Sequence after execution: 
org.bank.gui.GUI var0 = new org.bank.gui.GUI();
// <NormalExecution object=object-of-type-org.bank.gui.GUI>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 10
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 11
Selected statement: org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: found no sequences matching class class org.bank.account.Account
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 12
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 13
randoop.util.Randomness: total calls to random: 14
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 15
randoop.util.Randomness: total calls to random: 16
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 17
Selected statement: org.bank.account.Account.debito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 18
randoop.util.Randomness: total calls to random: 19
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 20
randoop.util.Randomness: total calls to random: 21
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : double:-1.0 : 
var4 =  method : org.bank.account.Account.debito(double) : var2 var3 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var3 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var2.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 22
Selected statement: org.bank.facade.Facade.<init>()
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.bank.facade.Facade
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 23
Selected statement: org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account)
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 24
randoop.util.Randomness: total calls to random: 25
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 26
randoop.util.Randomness: total calls to random: 27
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 28
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 29
randoop.util.Randomness: total calls to random: 30
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 31
randoop.util.Randomness: total calls to random: 32
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 33
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 34
randoop.util.Randomness: total calls to random: 35
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 36
randoop.util.Randomness: total calls to random: 37
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : double:-1.0 : 
var4 =  method : org.bank.account.Account.debito(double) : var2 var3 
var5 =  prim : int:1 : 
var6 =  method : org.bank.account.Account.setCc(int) : var2 var5 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var3 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var2.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Integer var5 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var2.setCc(1);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 38
Selected statement: org.bank.account.Account.sacar(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 39
randoop.util.Randomness: total calls to random: 40
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 41
randoop.util.Randomness: total calls to random: 42
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : double:-1.0 : 
var4 =  method : org.bank.account.Account.sacar(double) : var2 var3 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var3 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var2.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 43
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 44
randoop.util.Randomness: total calls to random: 45
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 46
randoop.util.Randomness: total calls to random: 47
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:0 : 
var8 =  method : org.bank.account.Account.setAg(int) : var3 var7 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var3.setAg(0);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 48
Selected statement: org.bank.account.Account.getCc()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 49
randoop.util.Randomness: total calls to random: 50
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:0 : 
var8 =  method : org.bank.account.Account.setAg(int) : var3 var7 
var9 =  method : org.bank.account.Account.getCc() : var3 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var3.setAg(0);
// <NormalExecution object=null>;
int var9 = var3.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=-1 [var9]  : true

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 51
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 52
randoop.util.Randomness: total calls to random: 53
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 54
randoop.util.Randomness: total calls to random: 55
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 56
Selected statement: org.bank.account.Account.getCc()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 57
randoop.util.Randomness: total calls to random: 58
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:0 : 
var8 =  method : org.bank.account.Account.setAg(int) : var3 var7 
var9 =  method : org.bank.account.Account.getCc() : var3 
var10 =  method : org.bank.account.Account.getCc() : var3 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var3.setAg(0);
// <NormalExecution object=null>;
int var9 = var3.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var3.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=-1 [var9]  : true
<randoop.PrimValue, value=-1 [var10]  : true

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 59
Selected statement: org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account)
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 60
randoop.util.Randomness: total calls to random: 61
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 62
randoop.util.Randomness: total calls to random: 63
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 64
randoop.util.Randomness: total calls to random: 65
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:1 : 
var10 =  prim : int:-1 : 
var11 =  cons : org.bank.account.Account.<init>(int,int) : var9 var10 
var12 =  prim : double:-1.0 : 
var13 =  method : org.bank.account.Account.sacar(double) : var11 var12 
var14 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var8 var11 
var15 =  cons : org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account) : var0 var1 var11 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var10 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var11 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var12 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var11.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setAccount(var11);
// <NormalExecution object=null>;
org.bank.client.Client var15 = new org.bank.client.Client("", "", var11);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 66
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 67
randoop.util.Randomness: total calls to random: 68
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 69
randoop.util.Randomness: total calls to random: 70
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  prim : int:10 : 
var14 =  method : org.bank.account.Account.setCc(int) : var9 var13 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
java.lang.Integer var13 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var9.setCc(10);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 71
Selected statement: org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
Will query component set for objects of typeclass org.bank.facade.Facade
getActivesequencesThatYield: entering method, clazz=class org.bank.facade.Facade
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 72
randoop.util.Randomness: total calls to random: 73
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 74
randoop.util.Randomness: total calls to random: 75
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 76
randoop.util.Randomness: total calls to random: 77
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.facade.Facade
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 78
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 79
randoop.util.Randomness: total calls to random: 80
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 81
randoop.util.Randomness: total calls to random: 82
Successfully created new unique sequence:var0 =  prim : int:-1 : 
var1 =  prim : int:1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account((-1), 1);
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 83
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 84
randoop.util.Randomness: total calls to random: 85
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 86
randoop.util.Randomness: total calls to random: 87
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 88
Selected statement: org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account)
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 89
randoop.util.Randomness: total calls to random: 90
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 91
randoop.util.Randomness: total calls to random: 92
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 93
randoop.util.Randomness: total calls to random: 94
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:0 : 
var10 =  method : org.bank.account.Account.setAg(int) : var5 var9 
var11 =  cons : org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account) : var0 var1 var5 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var5.setAg(0);
// <NormalExecution object=null>;
org.bank.client.Client var11 = new org.bank.client.Client("", "hi!", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=18
-------------------------------------------
randoop.util.Randomness: total calls to random: 95
Selected statement: org.bank.account.Account.getCc()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 96
randoop.util.Randomness: total calls to random: 97
Successfully created new unique sequence:var0 =  prim : int:-1 : 
var1 =  prim : int:1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  method : org.bank.account.Account.getCc() : var2 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account((-1), 1);
// <NormalExecution object=object-of-type-org.bank.account.Account>;
int var3 = var2.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=1 [var3]  : true

allSequences.size()=19
-------------------------------------------
randoop.util.Randomness: total calls to random: 98
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 99
randoop.util.Randomness: total calls to random: 100
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 101
randoop.util.Randomness: total calls to random: 102
Successfully created new unique sequence:var0 =  prim : int:-1 : 
var1 =  prim : int:0 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account((-1), 0);
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=20
-------------------------------------------
randoop.util.Randomness: total calls to random: 103
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 104
randoop.util.Randomness: total calls to random: 105
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 106
randoop.util.Randomness: total calls to random: 107
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  cons : org.bank.facade.Facade.<init>() : 
var14 =  prim : java.lang.String:"" : 
var15 =  prim : int:10 : 
var16 =  prim : int:-1 : 
var17 =  cons : org.bank.account.Account.<init>(int,int) : var15 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var17 var18 
var20 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var14 var17 
var21 =  prim : int:1 : 
var22 =  prim : int:-1 : 
var23 =  cons : org.bank.account.Account.<init>(int,int) : var21 var22 
var24 =  prim : double:-1.0 : 
var25 =  method : org.bank.account.Account.sacar(double) : var23 var24 
var26 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var20 var23 
var27 =  prim : int:10 : 
var28 =  method : org.bank.account.Account.setCc(int) : var23 var27 
var29 =  prim : double:-1.0 : 
var30 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var13 var23 var29 
var31 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var23 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
org.bank.facade.Facade var13 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var15 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var16 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var17 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var17.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var20 = new org.bank.client.Client("", var17);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var21 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var22 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var23 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var24 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var23.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var20.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Integer var27 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var23.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var29 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var30 = var13.withdraw(var23, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var23);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var25]  : true
<randoop.PrimValue, value=true [var30]  : true

allSequences.size()=21
-------------------------------------------
randoop.util.Randomness: total calls to random: 108
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 109
randoop.util.Randomness: total calls to random: 110
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 111
randoop.util.Randomness: total calls to random: 112
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : int:-1 : 
var4 =  method : org.bank.account.Account.setCc(int) : var2 var3 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
var2.setCc((-1));
// <NormalExecution object=null>;

allSequences.size()=22
-------------------------------------------
randoop.util.Randomness: total calls to random: 113
Selected statement: org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
Will query component set for objects of typeclass org.bank.facade.Facade
getActivesequencesThatYield: entering method, clazz=class org.bank.facade.Facade
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 114
randoop.util.Randomness: total calls to random: 115
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 116
randoop.util.Randomness: total calls to random: 117
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 118
randoop.util.Randomness: total calls to random: 119
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : java.lang.String:"" : 
var19 =  prim : int:10 : 
var20 =  prim : int:-1 : 
var21 =  cons : org.bank.account.Account.<init>(int,int) : var19 var20 
var22 =  prim : double:-1.0 : 
var23 =  method : org.bank.account.Account.debito(double) : var21 var22 
var24 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var18 var21 
var25 =  prim : int:1 : 
var26 =  prim : int:-1 : 
var27 =  cons : org.bank.account.Account.<init>(int,int) : var25 var26 
var28 =  prim : double:-1.0 : 
var29 =  method : org.bank.account.Account.sacar(double) : var27 var28 
var30 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var24 var27 
var31 =  prim : double:0.0 : 
var32 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var27 var31 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 active.
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.facade.Facade
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var18 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var19 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var20 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var21 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var22 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var23 = var21.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var24 = new org.bank.client.Client("", var21);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var25 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var26 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var27 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var28 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var27.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var24.setAccount(var27);
// <NormalExecution object=null>;
java.lang.Double var31 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var0.withdraw(var27, (java.lang.Double)0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var23]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.PrimValue, value=true [var32]  : true

allSequences.size()=23
-------------------------------------------
randoop.util.Randomness: total calls to random: 120
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 121
randoop.util.Randomness: total calls to random: 122
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 123
randoop.util.Randomness: total calls to random: 124
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  prim : int:10 : 
var14 =  method : org.bank.account.Account.setCc(int) : var9 var13 
var15 =  prim : double:-1.0 : 
var16 =  method : org.bank.account.Account.deposito(double) : var9 var15 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
java.lang.Integer var13 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var9.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var15 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var16 = var9.deposito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var16]  : true

allSequences.size()=24
-------------------------------------------
randoop.util.Randomness: total calls to random: 125
Selected statement: org.bank.account.Account.t()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 126
randoop.util.Randomness: total calls to random: 127
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  method : org.bank.account.Account.t() : var9 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
boolean var13 = var9.t();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=false [var13]  : true

allSequences.size()=25
-------------------------------------------
randoop.util.Randomness: total calls to random: 128
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 129
randoop.util.Randomness: total calls to random: 130
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 131
randoop.util.Randomness: total calls to random: 132
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:10 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(1, 10);
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=26
-------------------------------------------
randoop.util.Randomness: total calls to random: 133
Selected statement: org.bank.account.Account.debito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 134
randoop.util.Randomness: total calls to random: 135
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 136
randoop.util.Randomness: total calls to random: 137
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true

allSequences.size()=27
-------------------------------------------
randoop.util.Randomness: total calls to random: 138
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 139
randoop.util.Randomness: total calls to random: 140
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 141
randoop.util.Randomness: total calls to random: 142
Successfully created new unique sequence:var0 =  prim : int:100 : 
var1 =  prim : int:1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(100);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(100, 1);
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=28
-------------------------------------------
randoop.util.Randomness: total calls to random: 143
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 144
randoop.util.Randomness: total calls to random: 145
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 146
randoop.util.Randomness: total calls to random: 147
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 
var20 =  prim : double:10.0 : 
var21 =  method : org.bank.account.Account.deposito(double) : var10 var20 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var20 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var10.deposito(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var21]  : true

allSequences.size()=29
-------------------------------------------
randoop.util.Randomness: total calls to random: 148
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 149
randoop.util.Randomness: total calls to random: 150
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 151
randoop.util.Randomness: total calls to random: 152
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  cons : org.bank.facade.Facade.<init>() : 
var14 =  prim : java.lang.String:"" : 
var15 =  prim : int:10 : 
var16 =  prim : int:-1 : 
var17 =  cons : org.bank.account.Account.<init>(int,int) : var15 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var17 var18 
var20 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var14 var17 
var21 =  prim : int:1 : 
var22 =  prim : int:-1 : 
var23 =  cons : org.bank.account.Account.<init>(int,int) : var21 var22 
var24 =  prim : double:-1.0 : 
var25 =  method : org.bank.account.Account.sacar(double) : var23 var24 
var26 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var20 var23 
var27 =  prim : int:10 : 
var28 =  method : org.bank.account.Account.setCc(int) : var23 var27 
var29 =  prim : double:-1.0 : 
var30 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var13 var23 var29 
var31 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var23 
var32 =  prim : double:0.0 : 
var33 =  method : org.bank.account.Account.deposito(double) : var23 var32 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
org.bank.facade.Facade var13 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var15 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var16 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var17 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var17.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var20 = new org.bank.client.Client("", var17);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var21 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var22 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var23 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var24 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var23.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var20.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Integer var27 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var23.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var29 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var30 = var13.withdraw(var23, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Double var32 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var33 = var23.deposito(0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var25]  : true
<randoop.PrimValue, value=true [var30]  : true
<randoop.PrimValue, value=true [var33]  : true

allSequences.size()=30
-------------------------------------------
randoop.util.Randomness: total calls to random: 153
Selected statement: org.bank.account.Account.sacar(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 154
randoop.util.Randomness: total calls to random: 155
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 156
randoop.util.Randomness: total calls to random: 157
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:0 : 
var10 =  method : org.bank.account.Account.setAg(int) : var5 var9 
var11 =  cons : org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account) : var0 var1 var5 
var12 =  prim : double:10.0 : 
var13 =  method : org.bank.account.Account.sacar(double) : var5 var12 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var5.setAg(0);
// <NormalExecution object=null>;
org.bank.client.Client var11 = new org.bank.client.Client("", "hi!", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Double var12 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.sacar(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=31
-------------------------------------------
randoop.util.Randomness: total calls to random: 158
Selected statement: org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
Will query component set for objects of typeclass org.bank.facade.Facade
getActivesequencesThatYield: entering method, clazz=class org.bank.facade.Facade
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 159
randoop.util.Randomness: total calls to random: 160
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 161
randoop.util.Randomness: total calls to random: 162
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 163
randoop.util.Randomness: total calls to random: 164
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : java.lang.String:"" : 
var19 =  prim : int:10 : 
var20 =  prim : int:-1 : 
var21 =  cons : org.bank.account.Account.<init>(int,int) : var19 var20 
var22 =  prim : double:-1.0 : 
var23 =  method : org.bank.account.Account.debito(double) : var21 var22 
var24 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var18 var21 
var25 =  prim : int:1 : 
var26 =  prim : int:-1 : 
var27 =  cons : org.bank.account.Account.<init>(int,int) : var25 var26 
var28 =  prim : double:-1.0 : 
var29 =  method : org.bank.account.Account.sacar(double) : var27 var28 
var30 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var24 var27 
var31 =  prim : double:0.0 : 
var32 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var27 var31 
var33 =  prim : java.lang.String:"" : 
var34 =  prim : int:10 : 
var35 =  prim : int:-1 : 
var36 =  cons : org.bank.account.Account.<init>(int,int) : var34 var35 
var37 =  prim : double:-1.0 : 
var38 =  method : org.bank.account.Account.debito(double) : var36 var37 
var39 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var33 var36 
var40 =  prim : int:1 : 
var41 =  prim : int:-1 : 
var42 =  cons : org.bank.account.Account.<init>(int,int) : var40 var41 
var43 =  prim : double:-1.0 : 
var44 =  method : org.bank.account.Account.sacar(double) : var42 var43 
var45 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var39 var42 
var46 =  prim : int:10 : 
var47 =  method : org.bank.account.Account.setCc(int) : var42 var46 
var48 =  prim : double:10.0 : 
var49 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var42 var48 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 active.
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is a primitive)
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 active.
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is a primitive)
Making index 42 active.
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is a primitive)
Making index 45 inactive (value is null)
Making index 46 inactive (value is a primitive)
Making index 47 inactive (value is null)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.facade.Facade
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var18 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var19 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var20 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var21 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var22 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var23 = var21.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var24 = new org.bank.client.Client("", var21);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var25 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var26 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var27 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var28 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var27.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var24.setAccount(var27);
// <NormalExecution object=null>;
java.lang.Double var31 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var0.withdraw(var27, (java.lang.Double)0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var33 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var34 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var35 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var36 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var37 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var38 = var36.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var39 = new org.bank.client.Client("", var36);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var40 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var41 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var42 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var43 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var44 = var42.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var39.setAccount(var42);
// <NormalExecution object=null>;
java.lang.Integer var46 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var42.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var48 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var49 = var0.withdraw(var42, (java.lang.Double)10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var23]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.PrimValue, value=true [var32]  : true
<randoop.PrimValue, value=true [var38]  : true
<randoop.PrimValue, value=true [var44]  : true
<randoop.PrimValue, value=true [var49]  : true

allSequences.size()=32
-------------------------------------------
randoop.util.Randomness: total calls to random: 165
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 166
randoop.util.Randomness: total calls to random: 167
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 168
randoop.util.Randomness: total calls to random: 169
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 
var20 =  prim : int:-1 : 
var21 =  method : org.bank.account.Account.setAg(int) : var10 var20 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Integer var20 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setAg((-1));
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true

allSequences.size()=33
-------------------------------------------
randoop.util.Randomness: total calls to random: 170
Selected statement: org.bank.account.Account.t()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 171
randoop.util.Randomness: total calls to random: 172
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : int:-1 : 
var4 =  method : org.bank.account.Account.setCc(int) : var2 var3 
var5 =  method : org.bank.account.Account.t() : var2 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
var2.setCc((-1));
// <NormalExecution object=null>;
boolean var5 = var2.t();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=34
-------------------------------------------
randoop.util.Randomness: total calls to random: 173
Selected statement: org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double)
Will query component set for objects of typeclass org.bank.facade.Facade
getActivesequencesThatYield: entering method, clazz=class org.bank.facade.Facade
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 174
randoop.util.Randomness: total calls to random: 175
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 176
randoop.util.Randomness: total calls to random: 177
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 178
randoop.util.Randomness: total calls to random: 179
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : java.lang.String:"" : 
var19 =  prim : int:10 : 
var20 =  prim : int:-1 : 
var21 =  cons : org.bank.account.Account.<init>(int,int) : var19 var20 
var22 =  prim : double:-1.0 : 
var23 =  method : org.bank.account.Account.debito(double) : var21 var22 
var24 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var18 var21 
var25 =  prim : int:1 : 
var26 =  prim : int:-1 : 
var27 =  cons : org.bank.account.Account.<init>(int,int) : var25 var26 
var28 =  prim : double:-1.0 : 
var29 =  method : org.bank.account.Account.sacar(double) : var27 var28 
var30 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var24 var27 
var31 =  prim : double:0.0 : 
var32 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var27 var31 
var33 =  prim : java.lang.String:"" : 
var34 =  prim : int:10 : 
var35 =  prim : int:-1 : 
var36 =  cons : org.bank.account.Account.<init>(int,int) : var34 var35 
var37 =  prim : double:-1.0 : 
var38 =  method : org.bank.account.Account.debito(double) : var36 var37 
var39 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var33 var36 
var40 =  prim : int:1 : 
var41 =  prim : int:-1 : 
var42 =  cons : org.bank.account.Account.<init>(int,int) : var40 var41 
var43 =  prim : double:-1.0 : 
var44 =  method : org.bank.account.Account.sacar(double) : var42 var43 
var45 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var39 var42 
var46 =  prim : int:10 : 
var47 =  method : org.bank.account.Account.setCc(int) : var42 var46 
var48 =  prim : double:10.0 : 
var49 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var42 var48 
var50 =  prim : java.lang.String:"" : 
var51 =  prim : int:10 : 
var52 =  prim : int:-1 : 
var53 =  cons : org.bank.account.Account.<init>(int,int) : var51 var52 
var54 =  prim : double:-1.0 : 
var55 =  method : org.bank.account.Account.debito(double) : var53 var54 
var56 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var50 var53 
var57 =  prim : double:0.0 : 
var58 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var53 var57 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 56
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 active.
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is a primitive)
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 active.
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is a primitive)
Making index 42 active.
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is a primitive)
Making index 45 inactive (value is null)
Making index 46 inactive (value is a primitive)
Making index 47 inactive (value is null)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is a primitive)
Making index 50 inactive (value is a primitive)
Making index 51 inactive (value is a primitive)
Making index 52 inactive (value is a primitive)
Making index 53 active.
Making index 54 inactive (value is a primitive)
Making index 55 inactive (value is a primitive)
Making index 56 active.
Making index 57 inactive (value is a primitive)
Making index 58 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.facade.Facade
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var18 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var19 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var20 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var21 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var22 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var23 = var21.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var24 = new org.bank.client.Client("", var21);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var25 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var26 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var27 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var28 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var27.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var24.setAccount(var27);
// <NormalExecution object=null>;
java.lang.Double var31 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var0.withdraw(var27, (java.lang.Double)0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var33 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var34 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var35 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var36 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var37 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var38 = var36.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var39 = new org.bank.client.Client("", var36);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var40 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var41 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var42 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var43 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var44 = var42.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var39.setAccount(var42);
// <NormalExecution object=null>;
java.lang.Integer var46 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var42.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var48 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var49 = var0.withdraw(var42, (java.lang.Double)10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var50 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var51 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var52 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var53 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var54 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var55 = var53.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var56 = new org.bank.client.Client("", var53);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Double var57 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var58 = var0.withdraw(var53, (java.lang.Double)0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var23]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.PrimValue, value=true [var32]  : true
<randoop.PrimValue, value=true [var38]  : true
<randoop.PrimValue, value=true [var44]  : true
<randoop.PrimValue, value=true [var49]  : true
<randoop.PrimValue, value=true [var55]  : true
<randoop.PrimValue, value=true [var58]  : true

allSequences.size()=35
-------------------------------------------
randoop.util.Randomness: total calls to random: 180
Selected statement: org.bank.account.Account.<init>(int,int,org.bank.client.Client,double)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 181
randoop.util.Randomness: total calls to random: 182
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 183
randoop.util.Randomness: total calls to random: 184
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 185
randoop.util.Randomness: total calls to random: 186
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 187
randoop.util.Randomness: total calls to random: 188
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:10 : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:1 : 
var10 =  prim : int:-1 : 
var11 =  cons : org.bank.account.Account.<init>(int,int) : var9 var10 
var12 =  prim : double:-1.0 : 
var13 =  method : org.bank.account.Account.sacar(double) : var11 var12 
var14 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var8 var11 
var15 =  cons : org.bank.facade.Facade.<init>() : 
var16 =  prim : java.lang.String:"" : 
var17 =  prim : int:10 : 
var18 =  prim : int:-1 : 
var19 =  cons : org.bank.account.Account.<init>(int,int) : var17 var18 
var20 =  prim : double:-1.0 : 
var21 =  method : org.bank.account.Account.debito(double) : var19 var20 
var22 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var16 var19 
var23 =  prim : int:1 : 
var24 =  prim : int:-1 : 
var25 =  cons : org.bank.account.Account.<init>(int,int) : var23 var24 
var26 =  prim : double:-1.0 : 
var27 =  method : org.bank.account.Account.sacar(double) : var25 var26 
var28 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var22 var25 
var29 =  prim : int:10 : 
var30 =  method : org.bank.account.Account.setCc(int) : var25 var29 
var31 =  prim : double:-1.0 : 
var32 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var15 var25 var31 
var33 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var8 var25 
var34 =  prim : double:100.0 : 
var35 =  cons : org.bank.account.Account.<init>(int,int,org.bank.client.Client,double) : var0 var1 var8 var34 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 active.
Adding sequence to active sequences of type class org.bank.account.Account
Adding sequence to active sequences of type class org.bank.client.Client
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var10 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var11 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var12 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var11.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setAccount(var11);
// <NormalExecution object=null>;
org.bank.facade.Facade var15 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var16 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var17 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var18 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var19 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var20 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var19.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var22 = new org.bank.client.Client("", var19);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var23 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var24 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var25 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var26 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var27 = var25.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var22.setAccount(var25);
// <NormalExecution object=null>;
java.lang.Integer var29 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var25.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var31 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var15.withdraw(var25, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setAccount(var25);
// <NormalExecution object=null>;
java.lang.Double var34 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.bank.account.Account var35 = new org.bank.account.Account(1, 10, var8, 100.0d);
// <NormalExecution object=object-of-type-org.bank.account.Account>;
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=true [var21]  : true
<randoop.PrimValue, value=true [var27]  : true
<randoop.PrimValue, value=true [var32]  : true

allSequences.size()=36
-------------------------------------------
randoop.util.Randomness: total calls to random: 189
Selected statement: org.bank.account.Account.<init>()
Successfully created new unique sequence:var0 =  cons : org.bank.account.Account.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.account.Account var0 = new org.bank.account.Account();
// <NormalExecution object=object-of-type-org.bank.account.Account>;

allSequences.size()=37
-------------------------------------------
randoop.util.Randomness: total calls to random: 190
Selected statement: org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account)
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 191
randoop.util.Randomness: total calls to random: 192
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 193
randoop.util.Randomness: total calls to random: 194
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:1 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.sacar(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=38
-------------------------------------------
randoop.util.Randomness: total calls to random: 195
Selected statement: org.bank.account.Account.toString()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 196
randoop.util.Randomness: total calls to random: 197
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  method : org.bank.account.Account.toString() : var3 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.String var7 = var3.toString();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=Conta [ag=10, cc=-1, balance=Infinity] [var7]  : true

allSequences.size()=39
-------------------------------------------
randoop.util.Randomness: total calls to random: 198
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 199
randoop.util.Randomness: total calls to random: 200
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 201
randoop.util.Randomness: total calls to random: 202
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:0 : 
var8 =  method : org.bank.account.Account.setAg(int) : var3 var7 
var9 =  prim : int:-1 : 
var10 =  method : org.bank.account.Account.setAg(int) : var3 var9 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var3.setAg(0);
// <NormalExecution object=null>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
var3.setAg((-1));
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=40
-------------------------------------------
randoop.util.Randomness: total calls to random: 203
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 204
randoop.util.Randomness: total calls to random: 205
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 206
randoop.util.Randomness: total calls to random: 207
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  prim : int:10 : 
var14 =  prim : int:-1 : 
var15 =  cons : org.bank.account.Account.<init>(int,int) : var13 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.account.Account.debito(double) : var15 var16 
var18 =  prim : int:1 : 
var19 =  method : org.bank.account.Account.setCc(int) : var15 var18 
var20 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var15 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
java.lang.Integer var13 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var14 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var15 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var15.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Integer var18 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var15.setCc(1);
// <NormalExecution object=null>;
var6.setAccount(var15);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var17]  : true

allSequences.size()=41
-------------------------------------------
randoop.util.Randomness: total calls to random: 208
Selected statement: org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 209
randoop.util.Randomness: total calls to random: 210
Will query component set for objects of typeclass java.lang.Double
getActivesequencesThatYield: entering method, clazz=class java.lang.Double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 211
randoop.util.Randomness: total calls to random: 212
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 213
randoop.util.Randomness: total calls to random: 214
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 
var20 =  prim : double:10.0 : 
var21 =  method : org.bank.account.Account.deposito(double) : var10 var20 
var22 =  prim : double:100.0 : 
var23 =  prim : java.lang.String:"" : 
var24 =  prim : int:10 : 
var25 =  prim : int:-1 : 
var26 =  cons : org.bank.account.Account.<init>(int,int) : var24 var25 
var27 =  prim : double:-1.0 : 
var28 =  method : org.bank.account.Account.debito(double) : var26 var27 
var29 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var23 var26 
var30 =  prim : int:1 : 
var31 =  prim : int:-1 : 
var32 =  cons : org.bank.account.Account.<init>(int,int) : var30 var31 
var33 =  prim : double:-1.0 : 
var34 =  method : org.bank.account.Account.sacar(double) : var32 var33 
var35 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var29 var32 
var36 =  cons : org.bank.facade.Facade.<init>() : 
var37 =  prim : java.lang.String:"" : 
var38 =  prim : int:10 : 
var39 =  prim : int:-1 : 
var40 =  cons : org.bank.account.Account.<init>(int,int) : var38 var39 
var41 =  prim : double:-1.0 : 
var42 =  method : org.bank.account.Account.debito(double) : var40 var41 
var43 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var37 var40 
var44 =  prim : int:1 : 
var45 =  prim : int:-1 : 
var46 =  cons : org.bank.account.Account.<init>(int,int) : var44 var45 
var47 =  prim : double:-1.0 : 
var48 =  method : org.bank.account.Account.sacar(double) : var46 var47 
var49 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var43 var46 
var50 =  prim : int:10 : 
var51 =  method : org.bank.account.Account.setCc(int) : var46 var50 
var52 =  prim : double:-1.0 : 
var53 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var36 var46 var52 
var54 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var29 var46 
var55 =  prim : double:0.0 : 
var56 =  method : org.bank.account.Account.deposito(double) : var46 var55 
var57 =  method : org.bank.account.Account.transferir(java.lang.Double,org.bank.account.Account) : var10 var22 var46 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 43
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 active.
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is a primitive)
Making index 32 active.
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is a primitive)
Making index 40 active.
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is a primitive)
Making index 43 active.
Making index 44 inactive (value is a primitive)
Making index 45 inactive (value is a primitive)
Making index 46 active.
Making index 47 inactive (value is a primitive)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is null)
Making index 50 inactive (value is a primitive)
Making index 51 inactive (value is null)
Making index 52 inactive (value is a primitive)
Making index 53 inactive (value is a primitive)
Making index 54 inactive (value is null)
Making index 55 inactive (value is a primitive)
Making index 56 inactive (value is a primitive)
Making index 57 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var20 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var10.deposito(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var22 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var23 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var24 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var25 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var26 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var27 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var28 = var26.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var29 = new org.bank.client.Client("", var26);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var30 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var31 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var32 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var33 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var34 = var32.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var29.setAccount(var32);
// <NormalExecution object=null>;
org.bank.facade.Facade var36 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var37 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var38 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var39 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var40 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var41 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var42 = var40.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var43 = new org.bank.client.Client("", var40);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var44 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var45 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var46 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var47 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var48 = var46.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var43.setAccount(var46);
// <NormalExecution object=null>;
java.lang.Integer var50 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var46.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var52 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var53 = var36.withdraw(var46, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var29.setAccount(var46);
// <NormalExecution object=null>;
java.lang.Double var55 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var56 = var46.deposito(0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var57 = var10.transferir((java.lang.Double)100.0d, var46);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var21]  : true
<randoop.PrimValue, value=true [var28]  : true
<randoop.PrimValue, value=true [var34]  : true
<randoop.PrimValue, value=true [var42]  : true
<randoop.PrimValue, value=true [var48]  : true
<randoop.PrimValue, value=true [var53]  : true
<randoop.PrimValue, value=true [var56]  : true
<randoop.PrimValue, value=true [var57]  : true

allSequences.size()=42
-------------------------------------------
randoop.util.Randomness: total calls to random: 215
Selected statement: org.bank.account.Account.<init>(int,int,org.bank.client.Client,double)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 216
randoop.util.Randomness: total calls to random: 217
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 218
randoop.util.Randomness: total calls to random: 219
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 220
randoop.util.Randomness: total calls to random: 221
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 222
randoop.util.Randomness: total calls to random: 223
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:100 : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : double:-1.0 : 
var10 =  cons : org.bank.account.Account.<init>(int,int,org.bank.client.Client,double) : var0 var1 var8 var9 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 active.
Adding sequence to active sequences of type class org.bank.account.Account
Adding sequence to active sequences of type class org.bank.client.Client
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(100);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Double var9 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
org.bank.account.Account var10 = new org.bank.account.Account(1, 100, var8, (-1.0d));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=43
-------------------------------------------
randoop.util.Randomness: total calls to random: 224
Selected statement: org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account)
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 225
randoop.util.Randomness: total calls to random: 226
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 227
randoop.util.Randomness: total calls to random: 228
Successfully created new unique sequence:var0 =  prim : java.lang.String:"Conta [ag=10, cc=-1, balance=Infinity]" : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:0 : 
var9 =  method : org.bank.account.Account.setAg(int) : var4 var8 
var10 =  method : org.bank.account.Account.getCc() : var4 
var11 =  method : org.bank.account.Account.getCc() : var4 
var12 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var4 

Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 active.
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "Conta [ag=10, cc=-1, balance=Infinity]";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var4.setAg(0);
// <NormalExecution object=null>;
int var10 = var4.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var4.getCc();
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.client.Client var12 = new org.bank.client.Client("Conta [ag=10, cc=-1, balance=Infinity]", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=-1 [var10]  : true
<randoop.PrimValue, value=-1 [var11]  : true

allSequences.size()=44
-------------------------------------------
randoop.util.Randomness: total calls to random: 229
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 230
randoop.util.Randomness: total calls to random: 231
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 232
randoop.util.Randomness: total calls to random: 233
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:10 : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:1 : 
var10 =  prim : int:-1 : 
var11 =  cons : org.bank.account.Account.<init>(int,int) : var9 var10 
var12 =  prim : double:-1.0 : 
var13 =  method : org.bank.account.Account.sacar(double) : var11 var12 
var14 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var8 var11 
var15 =  cons : org.bank.facade.Facade.<init>() : 
var16 =  prim : java.lang.String:"" : 
var17 =  prim : int:10 : 
var18 =  prim : int:-1 : 
var19 =  cons : org.bank.account.Account.<init>(int,int) : var17 var18 
var20 =  prim : double:-1.0 : 
var21 =  method : org.bank.account.Account.debito(double) : var19 var20 
var22 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var16 var19 
var23 =  prim : int:1 : 
var24 =  prim : int:-1 : 
var25 =  cons : org.bank.account.Account.<init>(int,int) : var23 var24 
var26 =  prim : double:-1.0 : 
var27 =  method : org.bank.account.Account.sacar(double) : var25 var26 
var28 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var22 var25 
var29 =  prim : int:10 : 
var30 =  method : org.bank.account.Account.setCc(int) : var25 var29 
var31 =  prim : double:-1.0 : 
var32 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var15 var25 var31 
var33 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var8 var25 
var34 =  prim : double:100.0 : 
var35 =  cons : org.bank.account.Account.<init>(int,int,org.bank.client.Client,double) : var0 var1 var8 var34 
var36 =  prim : int:0 : 
var37 =  method : org.bank.account.Account.setCc(int) : var35 var36 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 active.
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var10 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var11 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var12 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var11.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setAccount(var11);
// <NormalExecution object=null>;
org.bank.facade.Facade var15 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var16 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var17 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var18 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var19 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var20 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var19.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var22 = new org.bank.client.Client("", var19);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var23 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var24 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var25 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var26 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var27 = var25.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var22.setAccount(var25);
// <NormalExecution object=null>;
java.lang.Integer var29 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var25.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var31 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var15.withdraw(var25, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setAccount(var25);
// <NormalExecution object=null>;
java.lang.Double var34 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.bank.account.Account var35 = new org.bank.account.Account(1, 10, var8, 100.0d);
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Integer var36 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var35.setCc(0);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=true [var21]  : true
<randoop.PrimValue, value=true [var27]  : true
<randoop.PrimValue, value=true [var32]  : true

allSequences.size()=45
-------------------------------------------
randoop.util.Randomness: total calls to random: 234
Selected statement: org.bank.account.Account.loan(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 235
randoop.util.Randomness: total calls to random: 236
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 237
randoop.util.Randomness: total calls to random: 238
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.String:"" : 
var3 =  prim : int:10 : 
var4 =  prim : int:-1 : 
var5 =  cons : org.bank.account.Account.<init>(int,int) : var3 var4 
var6 =  prim : double:-1.0 : 
var7 =  method : org.bank.account.Account.debito(double) : var5 var6 
var8 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var2 var5 
var9 =  prim : int:0 : 
var10 =  method : org.bank.account.Account.setAg(int) : var5 var9 
var11 =  cons : org.bank.client.Client.<init>(java.lang.String,java.lang.String,org.bank.account.Account) : var0 var1 var5 
var12 =  prim : double:10.0 : 
var13 =  method : org.bank.account.Account.sacar(double) : var5 var12 
var14 =  prim : double:10.0 : 
var15 =  method : org.bank.account.Account.loan(double) : var5 var14 

Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var3 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var4 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var5 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var6 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var7 = var5.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var8 = new org.bank.client.Client("", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var9 = new java.lang.Integer(0);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var5.setAg(0);
// <NormalExecution object=null>;
org.bank.client.Client var11 = new org.bank.client.Client("", "hi!", var5);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Double var12 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.sacar(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var14 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var15 = var5.loan(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=true [var15]  : true

allSequences.size()=46
-------------------------------------------
randoop.util.Randomness: total calls to random: 239
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 240
randoop.util.Randomness: total calls to random: 241
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 242
randoop.util.Randomness: total calls to random: 243
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : int:1 : 
var19 =  method : org.bank.account.Account.setCc(int) : var10 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Integer var18 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(1);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true

allSequences.size()=47
-------------------------------------------
randoop.util.Randomness: total calls to random: 244
Selected statement: org.bank.account.Account.loan(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 245
randoop.util.Randomness: total calls to random: 246
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 247
randoop.util.Randomness: total calls to random: 248
Successfully created new unique sequence:var0 =  prim : int:100 : 
var1 =  prim : int:1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : double:1.0 : 
var4 =  method : org.bank.account.Account.loan(double) : var2 var3 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(100);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(100, 1);
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var3 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var2.loan(1.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=48
-------------------------------------------
randoop.util.Randomness: total calls to random: 249
Selected statement: org.bank.account.Account.<init>(int,int)
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 250
randoop.util.Randomness: total calls to random: 251
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 252
randoop.util.Randomness: total calls to random: 253
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 254
Selected statement: org.bank.account.Account.setCc(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 255
randoop.util.Randomness: total calls to random: 256
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 257
randoop.util.Randomness: total calls to random: 258
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  prim : int:10 : 
var14 =  method : org.bank.account.Account.setCc(int) : var9 var13 
var15 =  prim : int:10 : 
var16 =  method : org.bank.account.Account.setCc(int) : var9 var15 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
java.lang.Integer var13 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var9.setCc(10);
// <NormalExecution object=null>;
java.lang.Integer var15 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var9.setCc(10);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=49
-------------------------------------------
randoop.util.Randomness: total calls to random: 259
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 260
randoop.util.Randomness: total calls to random: 261
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 262
randoop.util.Randomness: total calls to random: 263
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  cons : org.bank.facade.Facade.<init>() : 
var14 =  prim : java.lang.String:"" : 
var15 =  prim : int:10 : 
var16 =  prim : int:-1 : 
var17 =  cons : org.bank.account.Account.<init>(int,int) : var15 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var17 var18 
var20 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var14 var17 
var21 =  prim : int:1 : 
var22 =  prim : int:-1 : 
var23 =  cons : org.bank.account.Account.<init>(int,int) : var21 var22 
var24 =  prim : double:-1.0 : 
var25 =  method : org.bank.account.Account.sacar(double) : var23 var24 
var26 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var20 var23 
var27 =  prim : int:10 : 
var28 =  method : org.bank.account.Account.setCc(int) : var23 var27 
var29 =  prim : double:-1.0 : 
var30 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var13 var23 var29 
var31 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var23 
var32 =  prim : double:0.0 : 
var33 =  method : org.bank.account.Account.deposito(double) : var23 var32 
var34 =  prim : double:100.0 : 
var35 =  method : org.bank.account.Account.deposito(double) : var23 var34 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
org.bank.facade.Facade var13 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var15 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var16 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var17 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var17.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var20 = new org.bank.client.Client("", var17);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var21 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var22 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var23 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var24 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var23.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var20.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Integer var27 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var23.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var29 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var30 = var13.withdraw(var23, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Double var32 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var33 = var23.deposito(0.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var34 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var35 = var23.deposito(100.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var25]  : true
<randoop.PrimValue, value=true [var30]  : true
<randoop.PrimValue, value=true [var33]  : true
<randoop.PrimValue, value=true [var35]  : true

allSequences.size()=50
-------------------------------------------
randoop.util.Randomness: total calls to random: 264
Selected statement: org.bank.account.Account.deposito(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 265
randoop.util.Randomness: total calls to random: 266
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 267
randoop.util.Randomness: total calls to random: 268
Successfully created new unique sequence:var0 =  prim : int:1 : 
var1 =  prim : int:-1 : 
var2 =  cons : org.bank.account.Account.<init>(int,int) : var0 var1 
var3 =  prim : double:10.0 : 
var4 =  method : org.bank.account.Account.deposito(double) : var2 var3 

Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var1 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var2 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var3 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var4 = var2.deposito(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=51
-------------------------------------------
randoop.util.Randomness: total calls to random: 269
Selected statement: org.bank.client.Client.setAccount(org.bank.account.Account)
Will query component set for objects of typeclass org.bank.client.Client
getActivesequencesThatYield: entering method, clazz=class org.bank.client.Client
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 270
randoop.util.Randomness: total calls to random: 271
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 272
randoop.util.Randomness: total calls to random: 273
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  cons : org.bank.facade.Facade.<init>() : 
var14 =  prim : java.lang.String:"" : 
var15 =  prim : int:10 : 
var16 =  prim : int:-1 : 
var17 =  cons : org.bank.account.Account.<init>(int,int) : var15 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var17 var18 
var20 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var14 var17 
var21 =  prim : int:1 : 
var22 =  prim : int:-1 : 
var23 =  cons : org.bank.account.Account.<init>(int,int) : var21 var22 
var24 =  prim : double:-1.0 : 
var25 =  method : org.bank.account.Account.sacar(double) : var23 var24 
var26 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var20 var23 
var27 =  prim : int:10 : 
var28 =  method : org.bank.account.Account.setCc(int) : var23 var27 
var29 =  prim : double:-1.0 : 
var30 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var13 var23 var29 
var31 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var23 
var32 =  prim : int:1 : 
var33 =  prim : int:-1 : 
var34 =  cons : org.bank.account.Account.<init>(int,int) : var32 var33 
var35 =  prim : double:10.0 : 
var36 =  method : org.bank.account.Account.deposito(double) : var34 var35 
var37 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var34 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 active.
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is null)
Adding sequence to active sequences of type class org.bank.client.Client
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
org.bank.facade.Facade var13 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var15 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var16 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var17 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var17.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var20 = new org.bank.client.Client("", var17);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var21 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var22 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var23 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var24 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var23.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var20.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Integer var27 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var23.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var29 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var30 = var13.withdraw(var23, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var23);
// <NormalExecution object=null>;
java.lang.Integer var32 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var33 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var34 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var35 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var36 = var34.deposito(10.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var34);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var25]  : true
<randoop.PrimValue, value=true [var30]  : true
<randoop.PrimValue, value=true [var36]  : true

allSequences.size()=52
-------------------------------------------
randoop.util.Randomness: total calls to random: 274
Selected statement: org.bank.account.Account.getBalance()
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 275
randoop.util.Randomness: total calls to random: 276
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  method : org.bank.account.Account.t() : var9 
var14 =  method : org.bank.account.Account.getBalance() : var9 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type double
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
boolean var13 = var9.t();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var9.getBalance();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=Infinity [var14]  : true

allSequences.size()=53
-------------------------------------------
randoop.util.Randomness: total calls to random: 277
Selected statement: org.bank.account.Account.loan(double)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 278
randoop.util.Randomness: total calls to random: 279
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 280
randoop.util.Randomness: total calls to random: 281
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 
var20 =  prim : double:100.0 : 
var21 =  method : org.bank.account.Account.loan(double) : var10 var20 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var20 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var10.loan(100.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var21]  : true

allSequences.size()=54
-------------------------------------------
randoop.util.Randomness: total calls to random: 282
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 283
randoop.util.Randomness: total calls to random: 284
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 285
randoop.util.Randomness: total calls to random: 286
Successfully created new unique sequence:var0 =  prim : java.lang.String:"" : 
var1 =  prim : int:10 : 
var2 =  prim : int:-1 : 
var3 =  cons : org.bank.account.Account.<init>(int,int) : var1 var2 
var4 =  prim : double:-1.0 : 
var5 =  method : org.bank.account.Account.debito(double) : var3 var4 
var6 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var0 var3 
var7 =  prim : int:1 : 
var8 =  prim : int:-1 : 
var9 =  cons : org.bank.account.Account.<init>(int,int) : var7 var8 
var10 =  prim : double:-1.0 : 
var11 =  method : org.bank.account.Account.sacar(double) : var9 var10 
var12 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var6 var9 
var13 =  prim : int:-1 : 
var14 =  method : org.bank.account.Account.setAg(int) : var9 var13 

Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
java.lang.String var0 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var1 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var2 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var3 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var5 = var3.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var6 = new org.bank.client.Client("", var3);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var7 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var8 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var9 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var10 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var9.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setAccount(var9);
// <NormalExecution object=null>;
java.lang.Integer var13 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
var9.setAg((-1));
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=55
-------------------------------------------
randoop.util.Randomness: total calls to random: 287
Selected statement: org.bank.account.Account.setAg(int)
Will query component set for objects of typeclass org.bank.account.Account
getActivesequencesThatYield: entering method, clazz=class org.bank.account.Account
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 288
randoop.util.Randomness: total calls to random: 289
Will query component set for objects of typeint
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 290
randoop.util.Randomness: total calls to random: 291
Successfully created new unique sequence:var0 =  cons : org.bank.facade.Facade.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  prim : int:10 : 
var3 =  prim : int:-1 : 
var4 =  cons : org.bank.account.Account.<init>(int,int) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : org.bank.account.Account.debito(double) : var4 var5 
var7 =  cons : org.bank.client.Client.<init>(java.lang.String,org.bank.account.Account) : var1 var4 
var8 =  prim : int:1 : 
var9 =  prim : int:-1 : 
var10 =  cons : org.bank.account.Account.<init>(int,int) : var8 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.bank.account.Account.sacar(double) : var10 var11 
var13 =  method : org.bank.client.Client.setAccount(org.bank.account.Account) : var7 var10 
var14 =  prim : int:10 : 
var15 =  method : org.bank.account.Account.setCc(int) : var10 var14 
var16 =  prim : double:-1.0 : 
var17 =  method : org.bank.facade.Facade.withdraw(org.bank.account.Account,java.lang.Double) : var0 var10 var16 
var18 =  prim : double:-1.0 : 
var19 =  method : org.bank.account.Account.debito(double) : var10 var18 
var20 =  prim : double:100.0 : 
var21 =  method : org.bank.account.Account.loan(double) : var10 var20 
var22 =  prim : int:10 : 
var23 =  method : org.bank.account.Account.setAg(int) : var10 var22 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Adding sequence to active sequences of type class org.bank.account.Account
Sequence after execution: 
org.bank.facade.Facade var0 = new org.bank.facade.Facade();
// <NormalExecution object=object-of-type-org.bank.facade.Facade>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Integer var2 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var3 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var4 = new org.bank.account.Account(10, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var6 = var4.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.bank.client.Client var7 = new org.bank.client.Client("", var4);
// <NormalExecution object=object-of-type-org.bank.client.Client>;
java.lang.Integer var8 = new java.lang.Integer(1);
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Integer var9 = new java.lang.Integer((-1));
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.bank.account.Account var10 = new org.bank.account.Account(1, (-1));
// <NormalExecution object=object-of-type-org.bank.account.Account>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var12 = var10.sacar((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setAccount(var10);
// <NormalExecution object=null>;
java.lang.Integer var14 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setCc(10);
// <NormalExecution object=null>;
java.lang.Double var16 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var0.withdraw(var10, (java.lang.Double)(-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var18 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var19 = var10.debito((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var20 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var21 = var10.loan(100.0d);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Integer var22 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
var10.setAg(10);
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=true [var21]  : true

allSequences.size()=56
