Will not use: public static void org.softlang.main.Main.main(java.lang.String[])
  reason: main method not applicable to unit testing.
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
org.softlang.util.SimpleLinkedList.<init>()
org.softlang.company.impl.pojo.EmployeeImpl.<init>()
org.softlang.company.impl.bean.EmployeeImpl.<init>()
org.softlang.util.RemoveFromList.<init>(java.lang.Object)
org.softlang.company.impl.bean.CompanyImpl.<init>()
org.softlang.company.factory.BeanFactory.<init>()
org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
org.softlang.company.impl.bean.DepartmentImpl.<init>()
org.softlang.company.impl.pojo.DepartmentImpl.<init>()
org.softlang.main.Main.<init>()
org.softlang.util.AddToList.<init>(java.lang.Object)
org.softlang.company.impl.pojo.CompanyImpl.<init>()
org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
org.softlang.company.impl.pojo.EmployeeImpl.getManager()
org.softlang.company.impl.pojo.EmployeeImpl.getCep()
org.softlang.company.impl.pojo.ComponentImpl.getName()
org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
org.softlang.company.impl.bean.EmployeeImpl.getAddress()
org.softlang.company.impl.bean.EmployeeImpl.getName()
org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
org.softlang.company.impl.bean.EmployeeImpl.getSalary()
org.softlang.company.impl.bean.EmployeeImpl.getManager()
org.softlang.company.impl.bean.EmployeeImpl.getCep()
org.softlang.company.impl.bean.ComponentImpl.getParent()
java.util.Observable.notifyObservers()
java.util.Observable.notifyObservers(java.lang.Object)
java.util.Observable.addObserver(java.util.Observer)
java.util.Observable.deleteObserver(java.util.Observer)
java.util.Observable.deleteObservers()
java.util.Observable.hasChanged()
java.util.Observable.countObservers()
org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
org.softlang.company.impl.bean.ContainerImpl.subunits()
org.softlang.company.impl.bean.ComponentImpl.getName()
org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
org.softlang.util.ObservableSimpleList.add(java.lang.Object)
org.softlang.util.ObservableSimpleList.iterator()
org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
org.softlang.util.ObservableSimpleList.deleteObservers()
org.softlang.company.impl.bean.DepartmentImpl.getManager()
org.softlang.company.impl.pojo.DepartmentImpl.getManager()
org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
org.softlang.company.impl.pojo.ContainerImpl.subunits()
org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
org.softlang.main.Main.getSampleCompany()
org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
org.softlang.main.Main.getEmp()
org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: org.softlang.util.SimpleLinkedList.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 6
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 7
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: found no sequences matching class class java.util.Observable
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 10
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 11
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 12
randoop.util.Randomness: total calls to random: 13
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 14
randoop.util.Randomness: total calls to random: 15
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 16
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 17
randoop.util.Randomness: total calls to random: 18
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 19
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 20
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 21
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 22
randoop.util.Randomness: total calls to random: 23
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 24
randoop.util.Randomness: total calls to random: 25
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var1 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.pojo.DepartmentImpl var1 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setName("hi!");
// <NormalExecution object=null>;
boolean var4 = var0.add((org.softlang.company.Subunit)var1);
// <ExceptionalExecution, exception type=java.lang.ClassCastException>;
// throws exception of type java.lang.ClassCastException
 : true

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 26
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 27
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 28
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 29
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 30
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 31
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 32
randoop.util.Randomness: total calls to random: 33
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 34
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 35
randoop.util.Randomness: total calls to random: 36
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 37
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 38
randoop.util.Randomness: total calls to random: 39
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 40
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: found no sequences matching class class org.softlang.main.Main
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 41
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 42
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 43
randoop.util.Randomness: total calls to random: 44
Successfully created new unique sequence:var0 =  prim : double:1.0 : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Sequence after execution: 
java.lang.Double var0 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)1.0d);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 45
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 46
randoop.util.Randomness: total calls to random: 47
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 48
randoop.util.Randomness: total calls to random: 49
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 50
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 51
randoop.util.Randomness: total calls to random: 52
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 53
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 54
randoop.util.Randomness: total calls to random: 55
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=hi! [var3]  : true

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 56
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 57
randoop.util.Randomness: total calls to random: 58
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var3]  : true

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 59
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 60
randoop.util.Randomness: total calls to random: 61
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 62
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: found no sequences matching class class org.softlang.main.Main
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 63
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 64
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 65
randoop.util.Randomness: total calls to random: 66
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 67
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 68
randoop.util.Randomness: total calls to random: 69
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 70
randoop.util.Randomness: total calls to random: 71
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 72
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 73
randoop.util.Randomness: total calls to random: 74
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=18
-------------------------------------------
randoop.util.Randomness: total calls to random: 75
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;

allSequences.size()=19
-------------------------------------------
randoop.util.Randomness: total calls to random: 76
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 77
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 78
randoop.util.Randomness: total calls to random: 79
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 80
randoop.util.Randomness: total calls to random: 81
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;

allSequences.size()=20
-------------------------------------------
randoop.util.Randomness: total calls to random: 82
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: found no sequences matching class class java.util.Observable
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 83
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 84
randoop.util.Randomness: total calls to random: 85
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 86
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 87
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 88
randoop.util.Randomness: total calls to random: 89
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=21
-------------------------------------------
randoop.util.Randomness: total calls to random: 90
Selected statement: org.softlang.company.factory.BeanFactory.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;

allSequences.size()=22
-------------------------------------------
randoop.util.Randomness: total calls to random: 91
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 92
randoop.util.Randomness: total calls to random: 93
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 94
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: found no sequences matching class class org.softlang.main.Main
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 95
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: found no sequences matching class class org.softlang.main.Main
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 96
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 97
randoop.util.Randomness: total calls to random: 98
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 99
randoop.util.Randomness: total calls to random: 100
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var1.remove((java.lang.Object)false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=23
-------------------------------------------
randoop.util.Randomness: total calls to random: 101
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: found no sequences matching class class org.softlang.main.Main
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 102
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 103
randoop.util.Randomness: total calls to random: 104
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 105
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 106
randoop.util.Randomness: total calls to random: 107
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 108
randoop.util.Randomness: total calls to random: 109
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=24
-------------------------------------------
randoop.util.Randomness: total calls to random: 110
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 111
randoop.util.Randomness: total calls to random: 112
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 113
randoop.util.Randomness: total calls to random: 114
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 
var4 =  prim : float:10.0 : 
var5 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var1.remove((java.lang.Object)false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Float var4 = new java.lang.Float(10.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var5 = var1.remove((java.lang.Object)10.0f);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=25
-------------------------------------------
randoop.util.Randomness: total calls to random: 115
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 116
randoop.util.Randomness: total calls to random: 117
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=26
-------------------------------------------
randoop.util.Randomness: total calls to random: 118
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 119
randoop.util.Randomness: total calls to random: 120
Successfully created new unique sequence:var0 =  prim : double:100.0 : 
var1 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
java.lang.Double var0 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.util.RemoveFromList var1 = new org.softlang.util.RemoveFromList((java.lang.Object)100.0d);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;

allSequences.size()=27
-------------------------------------------
randoop.util.Randomness: total calls to random: 121
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 122
randoop.util.Randomness: total calls to random: 123
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var8]  : true

allSequences.size()=28
-------------------------------------------
randoop.util.Randomness: total calls to random: 124
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 125
randoop.util.Randomness: total calls to random: 126
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true

allSequences.size()=29
-------------------------------------------
randoop.util.Randomness: total calls to random: 127
Selected statement: org.softlang.main.Main.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;

allSequences.size()=30
-------------------------------------------
randoop.util.Randomness: total calls to random: 128
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 129
randoop.util.Randomness: total calls to random: 130
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 131
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;

allSequences.size()=31
-------------------------------------------
randoop.util.Randomness: total calls to random: 132
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 133
randoop.util.Randomness: total calls to random: 134
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 135
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 136
randoop.util.Randomness: total calls to random: 137
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 138
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 139
randoop.util.Randomness: total calls to random: 140
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: found no sequences matching class interface org.softlang.company.Company
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 141
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 142
randoop.util.Randomness: total calls to random: 143
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true

allSequences.size()=32
-------------------------------------------
randoop.util.Randomness: total calls to random: 144
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 145
randoop.util.Randomness: total calls to random: 146
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=33
-------------------------------------------
randoop.util.Randomness: total calls to random: 147
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 148
randoop.util.Randomness: total calls to random: 149
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=34
-------------------------------------------
randoop.util.Randomness: total calls to random: 150
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 151
randoop.util.Randomness: total calls to random: 152
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 

Making all indices inactive (sequence has non-executed statements, so judging it inadequate for further extension).
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
<not_executed>

allSequences.size()=35
-------------------------------------------
randoop.util.Randomness: total calls to random: 153
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 154
randoop.util.Randomness: total calls to random: 155
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 156
randoop.util.Randomness: total calls to random: 157
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var3.notifyObservers((java.lang.Object)var8);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=36
-------------------------------------------
randoop.util.Randomness: total calls to random: 158
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 159
randoop.util.Randomness: total calls to random: 160
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 161
randoop.util.Randomness: total calls to random: 162
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;

allSequences.size()=37
-------------------------------------------
randoop.util.Randomness: total calls to random: 163
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 164
randoop.util.Randomness: total calls to random: 165
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 166
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 167
randoop.util.Randomness: total calls to random: 168
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=38
-------------------------------------------
randoop.util.Randomness: total calls to random: 169
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 170
randoop.util.Randomness: total calls to random: 171
Successfully created new unique sequence:var0 =  prim : double:100.0 : 
var1 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Making index 2 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
java.lang.Double var0 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.util.RemoveFromList var1 = new org.softlang.util.RemoveFromList((java.lang.Object)100.0d);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;

allSequences.size()=39
-------------------------------------------
randoop.util.Randomness: total calls to random: 172
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 173
randoop.util.Randomness: total calls to random: 174
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=40
-------------------------------------------
randoop.util.Randomness: total calls to random: 175
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 176
randoop.util.Randomness: total calls to random: 177
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getAddress();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=41
-------------------------------------------
randoop.util.Randomness: total calls to random: 178
Selected statement: org.softlang.company.impl.bean.CompanyImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.bean.CompanyImpl var0 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;

allSequences.size()=42
-------------------------------------------
randoop.util.Randomness: total calls to random: 179
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 180
randoop.util.Randomness: total calls to random: 181
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=cep [var2]  : true

allSequences.size()=43
-------------------------------------------
randoop.util.Randomness: total calls to random: 182
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 183
randoop.util.Randomness: total calls to random: 184
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 185
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 186
randoop.util.Randomness: total calls to random: 187
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 188
randoop.util.Randomness: total calls to random: 189
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true

allSequences.size()=44
-------------------------------------------
randoop.util.Randomness: total calls to random: 190
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 191
randoop.util.Randomness: total calls to random: 192
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 193
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 194
randoop.util.Randomness: total calls to random: 195
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 196
randoop.util.Randomness: total calls to random: 197
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=45
-------------------------------------------
randoop.util.Randomness: total calls to random: 198
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 199
randoop.util.Randomness: total calls to random: 200
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=46
-------------------------------------------
randoop.util.Randomness: total calls to random: 201
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 202
randoop.util.Randomness: total calls to random: 203
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=47
-------------------------------------------
randoop.util.Randomness: total calls to random: 204
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 205
randoop.util.Randomness: total calls to random: 206
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 207
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 208
randoop.util.Randomness: total calls to random: 209
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var1]  : true

allSequences.size()=48
-------------------------------------------
randoop.util.Randomness: total calls to random: 210
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 211
randoop.util.Randomness: total calls to random: 212
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true

allSequences.size()=49
-------------------------------------------
randoop.util.Randomness: total calls to random: 213
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 214
randoop.util.Randomness: total calls to random: 215
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 216
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 217
randoop.util.Randomness: total calls to random: 218
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;

allSequences.size()=50
-------------------------------------------
randoop.util.Randomness: total calls to random: 219
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 220
randoop.util.Randomness: total calls to random: 221
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 222
randoop.util.Randomness: total calls to random: 223
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=51
-------------------------------------------
randoop.util.Randomness: total calls to random: 224
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 225
randoop.util.Randomness: total calls to random: 226
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=52
-------------------------------------------
randoop.util.Randomness: total calls to random: 227
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 228
randoop.util.Randomness: total calls to random: 229
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 230
randoop.util.Randomness: total calls to random: 231
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=53
-------------------------------------------
randoop.util.Randomness: total calls to random: 232
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 233
randoop.util.Randomness: total calls to random: 234
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=54
-------------------------------------------
randoop.util.Randomness: total calls to random: 235
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 236
randoop.util.Randomness: total calls to random: 237
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true

allSequences.size()=55
-------------------------------------------
randoop.util.Randomness: total calls to random: 238
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 239
randoop.util.Randomness: total calls to random: 240
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 241
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 242
randoop.util.Randomness: total calls to random: 243
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 244
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 245
randoop.util.Randomness: total calls to random: 246
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=56
-------------------------------------------
randoop.util.Randomness: total calls to random: 247
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 248
randoop.util.Randomness: total calls to random: 249
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 250
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 251
randoop.util.Randomness: total calls to random: 252
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 253
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 254
randoop.util.Randomness: total calls to random: 255
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 256
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 257
randoop.util.Randomness: total calls to random: 258
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 259
randoop.util.Randomness: total calls to random: 260
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;

allSequences.size()=57
-------------------------------------------
randoop.util.Randomness: total calls to random: 261
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 262
randoop.util.Randomness: total calls to random: 263
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 264
randoop.util.Randomness: total calls to random: 265
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=58
-------------------------------------------
randoop.util.Randomness: total calls to random: 266
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 267
randoop.util.Randomness: total calls to random: 268
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=59
-------------------------------------------
randoop.util.Randomness: total calls to random: 269
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 270
randoop.util.Randomness: total calls to random: 271
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 272
randoop.util.Randomness: total calls to random: 273
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=60
-------------------------------------------
randoop.util.Randomness: total calls to random: 274
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 275
randoop.util.Randomness: total calls to random: 276
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 277
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 278
randoop.util.Randomness: total calls to random: 279
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 280
randoop.util.Randomness: total calls to random: 281
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;

allSequences.size()=61
-------------------------------------------
randoop.util.Randomness: total calls to random: 282
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 283
randoop.util.Randomness: total calls to random: 284
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 285
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 286
randoop.util.Randomness: total calls to random: 287
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
boolean var4 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=62
-------------------------------------------
randoop.util.Randomness: total calls to random: 288
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 289
randoop.util.Randomness: total calls to random: 290
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true

allSequences.size()=63
-------------------------------------------
randoop.util.Randomness: total calls to random: 291
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 292
randoop.util.Randomness: total calls to random: 293
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 294
randoop.util.Randomness: total calls to random: 295
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 296
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 297
randoop.util.Randomness: total calls to random: 298
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
var0.notifyObservers();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=64
-------------------------------------------
randoop.util.Randomness: total calls to random: 299
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 300
randoop.util.Randomness: total calls to random: 301
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 302
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 303
randoop.util.Randomness: total calls to random: 304
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=65
-------------------------------------------
randoop.util.Randomness: total calls to random: 305
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 306
randoop.util.Randomness: total calls to random: 307
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var9 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var9]  : true

allSequences.size()=66
-------------------------------------------
randoop.util.Randomness: total calls to random: 308
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 309
randoop.util.Randomness: total calls to random: 310
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 311
randoop.util.Randomness: total calls to random: 312
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=67
-------------------------------------------
randoop.util.Randomness: total calls to random: 313
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 314
randoop.util.Randomness: total calls to random: 315
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=68
-------------------------------------------
randoop.util.Randomness: total calls to random: 316
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 317
randoop.util.Randomness: total calls to random: 318
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 319
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 320
randoop.util.Randomness: total calls to random: 321
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=69
-------------------------------------------
randoop.util.Randomness: total calls to random: 322
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 323
randoop.util.Randomness: total calls to random: 324
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=70
-------------------------------------------
randoop.util.Randomness: total calls to random: 325
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 326
randoop.util.Randomness: total calls to random: 327
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=71
-------------------------------------------
randoop.util.Randomness: total calls to random: 328
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 329
randoop.util.Randomness: total calls to random: 330
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true

allSequences.size()=72
-------------------------------------------
randoop.util.Randomness: total calls to random: 331
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 332
randoop.util.Randomness: total calls to random: 333
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 334
randoop.util.Randomness: total calls to random: 335
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  prim : float:-1.0 : 
var4 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var3 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var4 = var1.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=73
-------------------------------------------
randoop.util.Randomness: total calls to random: 336
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 337
randoop.util.Randomness: total calls to random: 338
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 339
randoop.util.Randomness: total calls to random: 340
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;

allSequences.size()=74
-------------------------------------------
randoop.util.Randomness: total calls to random: 341
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 342
randoop.util.Randomness: total calls to random: 343
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var6]  : true

allSequences.size()=75
-------------------------------------------
randoop.util.Randomness: total calls to random: 344
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 345
randoop.util.Randomness: total calls to random: 346
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=76
-------------------------------------------
randoop.util.Randomness: total calls to random: 347
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 348
randoop.util.Randomness: total calls to random: 349
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=77
-------------------------------------------
randoop.util.Randomness: total calls to random: 350
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 351
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 352
randoop.util.Randomness: total calls to random: 353
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 354
randoop.util.Randomness: total calls to random: 355
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=78
-------------------------------------------
randoop.util.Randomness: total calls to random: 356
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 357
randoop.util.Randomness: total calls to random: 358
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=79
-------------------------------------------
randoop.util.Randomness: total calls to random: 359
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 360
randoop.util.Randomness: total calls to random: 361
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 362
randoop.util.Randomness: total calls to random: 363
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=80
-------------------------------------------
randoop.util.Randomness: total calls to random: 364
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 365
randoop.util.Randomness: total calls to random: 366
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 367
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 368
randoop.util.Randomness: total calls to random: 369
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 370
randoop.util.Randomness: total calls to random: 371
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  method : java.util.Observable.hasChanged() : var0 
var5 =  prim : java.lang.String:"cep" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=81
-------------------------------------------
randoop.util.Randomness: total calls to random: 372
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 373
randoop.util.Randomness: total calls to random: 374
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=82
-------------------------------------------
randoop.util.Randomness: total calls to random: 375
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 376
randoop.util.Randomness: total calls to random: 377
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 378
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 379
randoop.util.Randomness: total calls to random: 380
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 381
randoop.util.Randomness: total calls to random: 382
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 383
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 384
randoop.util.Randomness: total calls to random: 385
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 386
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 387
randoop.util.Randomness: total calls to random: 388
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 389
randoop.util.Randomness: total calls to random: 390
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;

allSequences.size()=83
-------------------------------------------
randoop.util.Randomness: total calls to random: 391
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 392
randoop.util.Randomness: total calls to random: 393
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 394
randoop.util.Randomness: total calls to random: 395
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var1 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setName("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=84
-------------------------------------------
randoop.util.Randomness: total calls to random: 396
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 397
randoop.util.Randomness: total calls to random: 398
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 142 sequences.
components: 142
randoop.util.Randomness: total calls to random: 399
randoop.util.Randomness: total calls to random: 400
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var5 =  prim : int:100 : 
var6 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Integer var5 = new java.lang.Integer(100);
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.add((java.lang.Object)100);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=true [var6]  : true

allSequences.size()=85
-------------------------------------------
randoop.util.Randomness: total calls to random: 401
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 402
randoop.util.Randomness: total calls to random: 403
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getAddress();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=86
-------------------------------------------
randoop.util.Randomness: total calls to random: 404
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 405
randoop.util.Randomness: total calls to random: 406
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 407
randoop.util.Randomness: total calls to random: 408
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=87
-------------------------------------------
randoop.util.Randomness: total calls to random: 409
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 410
randoop.util.Randomness: total calls to random: 411
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 412
randoop.util.Randomness: total calls to random: 413
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true

allSequences.size()=88
-------------------------------------------
randoop.util.Randomness: total calls to random: 414
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 415
randoop.util.Randomness: total calls to random: 416
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=89
-------------------------------------------
randoop.util.Randomness: total calls to random: 417
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 418
randoop.util.Randomness: total calls to random: 419
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 420
randoop.util.Randomness: total calls to random: 421
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true

allSequences.size()=90
-------------------------------------------
randoop.util.Randomness: total calls to random: 422
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 423
randoop.util.Randomness: total calls to random: 424
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNotNull@1f [var1]  : true

allSequences.size()=91
-------------------------------------------
randoop.util.Randomness: total calls to random: 425
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 426
randoop.util.Randomness: total calls to random: 427
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var9 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true

allSequences.size()=92
-------------------------------------------
randoop.util.Randomness: total calls to random: 428
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 429
randoop.util.Randomness: total calls to random: 430
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 431
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 432
randoop.util.Randomness: total calls to random: 433
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=93
-------------------------------------------
randoop.util.Randomness: total calls to random: 434
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 435
randoop.util.Randomness: total calls to random: 436
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = var0.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var17]  : true

allSequences.size()=94
-------------------------------------------
randoop.util.Randomness: total calls to random: 437
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 438
randoop.util.Randomness: total calls to random: 439
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 440
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 441
randoop.util.Randomness: total calls to random: 442
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 443
randoop.util.Randomness: total calls to random: 444
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true

allSequences.size()=95
-------------------------------------------
randoop.util.Randomness: total calls to random: 445
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 446
randoop.util.Randomness: total calls to random: 447
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  prim : float:-1.0 : 
var4 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var3 
var5 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var3 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var4 = var1.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var5 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=96
-------------------------------------------
randoop.util.Randomness: total calls to random: 448
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 449
randoop.util.Randomness: total calls to random: 450
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 451
randoop.util.Randomness: total calls to random: 452
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=97
-------------------------------------------
randoop.util.Randomness: total calls to random: 453
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 454
randoop.util.Randomness: total calls to random: 455
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 456
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 457
randoop.util.Randomness: total calls to random: 458
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 459
randoop.util.Randomness: total calls to random: 460
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var3.notifyObservers((java.lang.Object)var8);
// <NormalExecution object=null>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("cep");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=98
-------------------------------------------
randoop.util.Randomness: total calls to random: 461
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 462
randoop.util.Randomness: total calls to random: 463
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
org.softlang.util.AddToList var34 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true

allSequences.size()=99
-------------------------------------------
randoop.util.Randomness: total calls to random: 464
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 465
randoop.util.Randomness: total calls to random: 466
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=100
-------------------------------------------
randoop.util.Randomness: total calls to random: 467
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 468
randoop.util.Randomness: total calls to random: 469
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true

allSequences.size()=101
-------------------------------------------
randoop.util.Randomness: total calls to random: 470
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 471
randoop.util.Randomness: total calls to random: 472
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 473
randoop.util.Randomness: total calls to random: 474
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  prim : double:1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var5 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=102
-------------------------------------------
randoop.util.Randomness: total calls to random: 475
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 476
randoop.util.Randomness: total calls to random: 477
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
var0.notifyObservers();
// <NormalExecution object=null>;

allSequences.size()=103
-------------------------------------------
randoop.util.Randomness: total calls to random: 478
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 479
randoop.util.Randomness: total calls to random: 480
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=104
-------------------------------------------
randoop.util.Randomness: total calls to random: 481
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 482
randoop.util.Randomness: total calls to random: 483
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 484
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;

allSequences.size()=105
-------------------------------------------
randoop.util.Randomness: total calls to random: 485
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 486
randoop.util.Randomness: total calls to random: 487
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 488
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 489
randoop.util.Randomness: total calls to random: 490
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 491
randoop.util.Randomness: total calls to random: 492
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var7 var8 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var11 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var7 var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var7 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var7 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var13 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var14 = var7.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var15 = var7.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var1.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var14]  : true
<randoop.IsNotNull@1f [var15]  : true

allSequences.size()=106
-------------------------------------------
randoop.util.Randomness: total calls to random: 493
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 494
randoop.util.Randomness: total calls to random: 495
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 496
randoop.util.Randomness: total calls to random: 497
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.main.Main.<init>() : 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var10 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var10 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var8 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var10 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var8.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
var7.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true

allSequences.size()=107
-------------------------------------------
randoop.util.Randomness: total calls to random: 498
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 499
randoop.util.Randomness: total calls to random: 500
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getAddress();
// <NormalExecution object=null>;
java.lang.String var5 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=cep [var5]  : true

allSequences.size()=108
-------------------------------------------
randoop.util.Randomness: total calls to random: 501
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 502
randoop.util.Randomness: total calls to random: 503
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 504
randoop.util.Randomness: total calls to random: 505
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : java.util.Observable.hasChanged() : var4 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
boolean var8 = var4.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var9 = var0.add((org.softlang.company.Subunit)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=true [var9]  : true

allSequences.size()=109
-------------------------------------------
randoop.util.Randomness: total calls to random: 506
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 507
randoop.util.Randomness: total calls to random: 508
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=110
-------------------------------------------
randoop.util.Randomness: total calls to random: 509
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 510
randoop.util.Randomness: total calls to random: 511
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 512
randoop.util.Randomness: total calls to random: 513
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var0.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var16]  : true

allSequences.size()=111
-------------------------------------------
randoop.util.Randomness: total calls to random: 514
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 515
randoop.util.Randomness: total calls to random: 516
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 182 sequences.
components: 182
randoop.util.Randomness: total calls to random: 517
randoop.util.Randomness: total calls to random: 518
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=112
-------------------------------------------
randoop.util.Randomness: total calls to random: 519
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 520
randoop.util.Randomness: total calls to random: 521
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 522
randoop.util.Randomness: total calls to random: 523
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true

allSequences.size()=113
-------------------------------------------
randoop.util.Randomness: total calls to random: 524
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 525
randoop.util.Randomness: total calls to random: 526
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 527
randoop.util.Randomness: total calls to random: 528
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true

allSequences.size()=114
-------------------------------------------
randoop.util.Randomness: total calls to random: 529
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 530
randoop.util.Randomness: total calls to random: 531
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=115
-------------------------------------------
randoop.util.Randomness: total calls to random: 532
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 533
randoop.util.Randomness: total calls to random: 534
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 535
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 536
randoop.util.Randomness: total calls to random: 537
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 538
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 539
randoop.util.Randomness: total calls to random: 540
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=116
-------------------------------------------
randoop.util.Randomness: total calls to random: 541
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 542
randoop.util.Randomness: total calls to random: 543
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 544
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 545
randoop.util.Randomness: total calls to random: 546
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 547
randoop.util.Randomness: total calls to random: 548
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
boolean var6 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=true [var6]  : true

allSequences.size()=117
-------------------------------------------
randoop.util.Randomness: total calls to random: 549
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 550
randoop.util.Randomness: total calls to random: 551
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 552
randoop.util.Randomness: total calls to random: 553
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  cons : org.softlang.main.Main.<init>() : 
var4 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var3 
var5 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var6 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var3 var5 
var7 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var8 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var3 var7 
var9 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.main.Main var3 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var4 = new org.softlang.util.AddToList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var5 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var3.setSampleCompany((org.softlang.company.Company)var5);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var7 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var3.createSampleCompany((org.softlang.company.factory.Factory)var7);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var7);
// <NormalExecution object=null>;

allSequences.size()=118
-------------------------------------------
randoop.util.Randomness: total calls to random: 554
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 555
randoop.util.Randomness: total calls to random: 556
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : java.util.Observable.hasChanged() : var4 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var4 
var10 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
boolean var8 = var4.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var9 = var0.add((org.softlang.company.Subunit)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
int var10 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=true [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=119
-------------------------------------------
randoop.util.Randomness: total calls to random: 557
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 558
randoop.util.Randomness: total calls to random: 559
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=120
-------------------------------------------
randoop.util.Randomness: total calls to random: 560
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 561
randoop.util.Randomness: total calls to random: 562
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 563
randoop.util.Randomness: total calls to random: 564
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var7 =  prim : double:-1.0 : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var7 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary((-1.0d));
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=121
-------------------------------------------
randoop.util.Randomness: total calls to random: 565
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 566
randoop.util.Randomness: total calls to random: 567
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=cep [var1]  : true

allSequences.size()=122
-------------------------------------------
randoop.util.Randomness: total calls to random: 568
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 569
randoop.util.Randomness: total calls to random: 570
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 
var7 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getAddress();
// <NormalExecution object=null>;
java.lang.String var7 = var2.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=123
-------------------------------------------
randoop.util.Randomness: total calls to random: 571
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 572
randoop.util.Randomness: total calls to random: 573
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 574
randoop.util.Randomness: total calls to random: 575
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var4 =  prim : double:0.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=124
-------------------------------------------
randoop.util.Randomness: total calls to random: 576
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 577
randoop.util.Randomness: total calls to random: 578
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
java.lang.String var34 = var8.getName();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var34]  : true

allSequences.size()=125
-------------------------------------------
randoop.util.Randomness: total calls to random: 579
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 580
randoop.util.Randomness: total calls to random: 581
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var7 = var0.getParent();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=126
-------------------------------------------
randoop.util.Randomness: total calls to random: 582
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 583
randoop.util.Randomness: total calls to random: 584
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 585
randoop.util.Randomness: total calls to random: 586
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var2 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("");
// <NormalExecution object=null>;

allSequences.size()=127
-------------------------------------------
randoop.util.Randomness: total calls to random: 587
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 588
randoop.util.Randomness: total calls to random: 589
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 590
randoop.util.Randomness: total calls to random: 591
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var28 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var25 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 inactive (value is null)
Making index 28 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var26 = var25.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var27 = var25.getParent();
// <NormalExecution object=null>;
boolean var28 = var0.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.IsNull@25 [var27]  : true
<randoop.PrimValue, value=true [var28]  : true

allSequences.size()=128
-------------------------------------------
randoop.util.Randomness: total calls to random: 592
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 593
randoop.util.Randomness: total calls to random: 594
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 595
randoop.util.Randomness: total calls to random: 596
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=129
-------------------------------------------
randoop.util.Randomness: total calls to random: 597
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 598
randoop.util.Randomness: total calls to random: 599
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  method : java.util.Observable.hasChanged() : var0 
var5 =  prim : java.lang.String:"cep" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
java.lang.String var7 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=130
-------------------------------------------
randoop.util.Randomness: total calls to random: 600
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 601
randoop.util.Randomness: total calls to random: 602
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 603
randoop.util.Randomness: total calls to random: 604
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var10 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var13 =  method : org.softlang.util.ObservableSimpleList.iterator() : var11 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var11 
var15 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var9 var14 
var16 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var14 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var10 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var10);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var13 = var11.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var11);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var9.add((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var1.remove((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var16]  : true

allSequences.size()=131
-------------------------------------------
randoop.util.Randomness: total calls to random: 605
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 606
randoop.util.Randomness: total calls to random: 607
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 608
randoop.util.Randomness: total calls to random: 609
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=132
-------------------------------------------
randoop.util.Randomness: total calls to random: 610
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 611
randoop.util.Randomness: total calls to random: 612
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 613
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 614
randoop.util.Randomness: total calls to random: 615
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  prim : double:1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var5 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=133
-------------------------------------------
randoop.util.Randomness: total calls to random: 616
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 617
randoop.util.Randomness: total calls to random: 618
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true

allSequences.size()=134
-------------------------------------------
randoop.util.Randomness: total calls to random: 619
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 620
randoop.util.Randomness: total calls to random: 621
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 622
randoop.util.Randomness: total calls to random: 623
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var10 
var12 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var13 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var10 var12 
var14 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var12 
var15 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var12 
var16 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var12 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var9 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = var10.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var12 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var10.notifyObservers((java.lang.Object)var12);
// <NormalExecution object=null>;
java.lang.String var14 = var12.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var15 = var12.getName();
// <NormalExecution object=null>;
boolean var16 = var3.remove((org.softlang.company.Subunit)var12);
// <ExceptionalExecution, exception type=java.lang.ClassCastException>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var9]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var14]  : true
<randoop.IsNull@25 [var15]  : true
// throws exception of type java.lang.ClassCastException
 : true

allSequences.size()=135
-------------------------------------------
randoop.util.Randomness: total calls to random: 624
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 625
randoop.util.Randomness: total calls to random: 626
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
java.lang.Iterable var4 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=136
-------------------------------------------
randoop.util.Randomness: total calls to random: 627
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 628
randoop.util.Randomness: total calls to random: 629
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=137
-------------------------------------------
randoop.util.Randomness: total calls to random: 630
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 631
randoop.util.Randomness: total calls to random: 632
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 633
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 217 sequences.
components: 217
randoop.util.Randomness: total calls to random: 634
randoop.util.Randomness: total calls to random: 635
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var4 = new org.softlang.util.RemoveFromList((java.lang.Object)false);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=138
-------------------------------------------
randoop.util.Randomness: total calls to random: 636
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 637
randoop.util.Randomness: total calls to random: 638
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : java.util.Observable.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=139
-------------------------------------------
randoop.util.Randomness: total calls to random: 639
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 640
randoop.util.Randomness: total calls to random: 641
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 642
randoop.util.Randomness: total calls to random: 643
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true

allSequences.size()=140
-------------------------------------------
randoop.util.Randomness: total calls to random: 644
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 645
randoop.util.Randomness: total calls to random: 646
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 647
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 648
randoop.util.Randomness: total calls to random: 649
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
double var5 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0.0 [var5]  : true

allSequences.size()=141
-------------------------------------------
randoop.util.Randomness: total calls to random: 650
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 651
randoop.util.Randomness: total calls to random: 652
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 221 sequences.
components: 221
randoop.util.Randomness: total calls to random: 653
randoop.util.Randomness: total calls to random: 654
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=142
-------------------------------------------
randoop.util.Randomness: total calls to random: 655
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 656
randoop.util.Randomness: total calls to random: 657
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true

allSequences.size()=143
-------------------------------------------
randoop.util.Randomness: total calls to random: 658
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 659
randoop.util.Randomness: total calls to random: 660
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
java.lang.String var17 = var9.getAddress();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNull@25 [var17]  : true

allSequences.size()=144
-------------------------------------------
randoop.util.Randomness: total calls to random: 661
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 662
randoop.util.Randomness: total calls to random: 663
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 664
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 665
randoop.util.Randomness: total calls to random: 666
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var2 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var2]  : true

allSequences.size()=145
-------------------------------------------
randoop.util.Randomness: total calls to random: 667
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 668
randoop.util.Randomness: total calls to random: 669
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 670
randoop.util.Randomness: total calls to random: 671
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;

allSequences.size()=146
-------------------------------------------
randoop.util.Randomness: total calls to random: 672
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 673
randoop.util.Randomness: total calls to random: 674
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 675
randoop.util.Randomness: total calls to random: 676
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;

allSequences.size()=147
-------------------------------------------
randoop.util.Randomness: total calls to random: 677
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 678
randoop.util.Randomness: total calls to random: 679
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 680
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 681
randoop.util.Randomness: total calls to random: 682
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 116 sequences.
components: 116
randoop.util.Randomness: total calls to random: 683
randoop.util.Randomness: total calls to random: 684
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var1 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.pojo.EmployeeImpl var1 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
boolean var2 = var0.add((org.softlang.company.Subunit)var1);
// <ExceptionalExecution, exception type=java.lang.ClassCastException>;
// throws exception of type java.lang.ClassCastException
 : true

allSequences.size()=148
-------------------------------------------
randoop.util.Randomness: total calls to random: 685
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 686
randoop.util.Randomness: total calls to random: 687
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 688
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 689
randoop.util.Randomness: total calls to random: 690
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
org.softlang.company.Employee var1 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=149
-------------------------------------------
randoop.util.Randomness: total calls to random: 691
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 692
randoop.util.Randomness: total calls to random: 693
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 694
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 695
randoop.util.Randomness: total calls to random: 696
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 
var4 =  prim : float:10.0 : 
var5 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var4 
var6 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var1.remove((java.lang.Object)false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Float var4 = new java.lang.Float(10.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var5 = var1.remove((java.lang.Object)10.0f);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.util.Iterator var6 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.IsNotNull@1f [var6]  : true

allSequences.size()=150
-------------------------------------------
randoop.util.Randomness: total calls to random: 697
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 698
randoop.util.Randomness: total calls to random: 699
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getAddress();
// <NormalExecution object=null>;
java.lang.String var5 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var6 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=cep [var5]  : true
<randoop.PrimValue, value=0.0 [var6]  : true

allSequences.size()=151
-------------------------------------------
randoop.util.Randomness: total calls to random: 700
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 701
randoop.util.Randomness: total calls to random: 702
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 703
randoop.util.Randomness: total calls to random: 704
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var6 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=152
-------------------------------------------
randoop.util.Randomness: total calls to random: 705
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 706
randoop.util.Randomness: total calls to random: 707
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=153
-------------------------------------------
randoop.util.Randomness: total calls to random: 708
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 709
randoop.util.Randomness: total calls to random: 710
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 711
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 712
randoop.util.Randomness: total calls to random: 713
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 714
randoop.util.Randomness: total calls to random: 715
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var4 var7 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var7 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var4.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;

allSequences.size()=154
-------------------------------------------
randoop.util.Randomness: total calls to random: 716
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 717
randoop.util.Randomness: total calls to random: 718
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=155
-------------------------------------------
randoop.util.Randomness: total calls to random: 719
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 720
randoop.util.Randomness: total calls to random: 721
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var6 = var1.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=156
-------------------------------------------
randoop.util.Randomness: total calls to random: 722
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 723
randoop.util.Randomness: total calls to random: 724
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 725
randoop.util.Randomness: total calls to random: 726
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 727
randoop.util.Randomness: total calls to random: 728
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var6 var12 
var17 =  prim : double:-1.0 : 
var18 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var12 var17 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
double var16 = var6.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var17 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var12, (-1.0d));
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var16]  : true

allSequences.size()=157
-------------------------------------------
randoop.util.Randomness: total calls to random: 729
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 730
randoop.util.Randomness: total calls to random: 731
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 732
randoop.util.Randomness: total calls to random: 733
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 734
randoop.util.Randomness: total calls to random: 735
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true

allSequences.size()=158
-------------------------------------------
randoop.util.Randomness: total calls to random: 736
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 737
randoop.util.Randomness: total calls to random: 738
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 245 sequences.
components: 245
randoop.util.Randomness: total calls to random: 739
randoop.util.Randomness: total calls to random: 740
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  prim : float:-1.0 : 
var4 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var3 
var5 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var6 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var7 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var5 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var3 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var4 = var1.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var5 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var6 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var7 = var5.add((java.lang.Object)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=159
-------------------------------------------
randoop.util.Randomness: total calls to random: 741
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 94 sequences.
components: 94
randoop.util.Randomness: total calls to random: 742
randoop.util.Randomness: total calls to random: 743
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var4 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=160
-------------------------------------------
randoop.util.Randomness: total calls to random: 744
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 745
randoop.util.Randomness: total calls to random: 746
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  prim : double:1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var5 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=1.0 [var8]  : true

allSequences.size()=161
-------------------------------------------
randoop.util.Randomness: total calls to random: 747
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 748
randoop.util.Randomness: total calls to random: 749
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 750
randoop.util.Randomness: total calls to random: 751
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=162
-------------------------------------------
randoop.util.Randomness: total calls to random: 752
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 753
randoop.util.Randomness: total calls to random: 754
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 755
randoop.util.Randomness: total calls to random: 756
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  cons : org.softlang.main.Main.<init>() : 
var18 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var19 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var17 var18 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var21 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type interface org.softlang.company.Company
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.main.Main var17 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var18 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var17.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
org.softlang.company.Company var20 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var21 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany(var21);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var21]  : true

allSequences.size()=163
-------------------------------------------
randoop.util.Randomness: total calls to random: 757
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 758
randoop.util.Randomness: total calls to random: 759
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var4 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=164
-------------------------------------------
randoop.util.Randomness: total calls to random: 760
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 761
randoop.util.Randomness: total calls to random: 762
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var5]  : true

allSequences.size()=165
-------------------------------------------
randoop.util.Randomness: total calls to random: 763
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 764
randoop.util.Randomness: total calls to random: 765
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 766
randoop.util.Randomness: total calls to random: 767
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=166
-------------------------------------------
randoop.util.Randomness: total calls to random: 768
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 769
randoop.util.Randomness: total calls to random: 770
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 771
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 772
randoop.util.Randomness: total calls to random: 773
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=cep [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=167
-------------------------------------------
randoop.util.Randomness: total calls to random: 774
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 775
randoop.util.Randomness: total calls to random: 776
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 777
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 257 sequences.
components: 257
randoop.util.Randomness: total calls to random: 778
randoop.util.Randomness: total calls to random: 779
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
org.softlang.util.AddToList var4 = new org.softlang.util.AddToList((java.lang.Object)var2);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=168
-------------------------------------------
randoop.util.Randomness: total calls to random: 780
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 259 sequences.
components: 259
randoop.util.Randomness: total calls to random: 781
randoop.util.Randomness: total calls to random: 782
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=169
-------------------------------------------
randoop.util.Randomness: total calls to random: 783
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 784
randoop.util.Randomness: total calls to random: 785
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 786
randoop.util.Randomness: total calls to random: 787
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 788
randoop.util.Randomness: total calls to random: 789
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  method : org.softlang.main.Main.getEmp() : var0 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var18 
var22 =  prim : boolean:false : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var18 var22 
var24 =  prim : double:0.0 : 
var25 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var18 var24 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = var0.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
java.lang.String var21 = var18.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var22 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var18.setManager(false);
// <NormalExecution object=null>;
java.lang.Double var24 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var18, 0.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=cep [var21]  : true

allSequences.size()=170
-------------------------------------------
randoop.util.Randomness: total calls to random: 790
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 791
randoop.util.Randomness: total calls to random: 792
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 793
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 794
randoop.util.Randomness: total calls to random: 795
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var3.notifyObservers((java.lang.Object)var8);
// <NormalExecution object=null>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("cep");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var12]  : true

allSequences.size()=171
-------------------------------------------
randoop.util.Randomness: total calls to random: 796
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 797
randoop.util.Randomness: total calls to random: 798
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 799
randoop.util.Randomness: total calls to random: 800
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var8 =  prim : java.lang.String:"cep" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("cep");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=172
-------------------------------------------
randoop.util.Randomness: total calls to random: 801
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 802
randoop.util.Randomness: total calls to random: 803
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=173
-------------------------------------------
randoop.util.Randomness: total calls to random: 804
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 805
randoop.util.Randomness: total calls to random: 806
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  method : java.util.Observable.notifyObservers() : var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
var6.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true

allSequences.size()=174
-------------------------------------------
randoop.util.Randomness: total calls to random: 807
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 808
randoop.util.Randomness: total calls to random: 809
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 810
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 811
randoop.util.Randomness: total calls to random: 812
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 813
randoop.util.Randomness: total calls to random: 814
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=175
-------------------------------------------
randoop.util.Randomness: total calls to random: 815
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 816
randoop.util.Randomness: total calls to random: 817
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var10 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var13 =  method : org.softlang.util.ObservableSimpleList.iterator() : var11 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var11 
var15 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var9 var14 
var16 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var14 
var17 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var10 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var10);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var13 = var11.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var11);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var9.add((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var1.remove((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var16]  : true

allSequences.size()=176
-------------------------------------------
randoop.util.Randomness: total calls to random: 818
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 819
randoop.util.Randomness: total calls to random: 820
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=177
-------------------------------------------
randoop.util.Randomness: total calls to random: 821
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 822
randoop.util.Randomness: total calls to random: 823
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 824
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 825
randoop.util.Randomness: total calls to random: 826
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var2 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var2.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var6]  : true

allSequences.size()=178
-------------------------------------------
randoop.util.Randomness: total calls to random: 827
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 828
randoop.util.Randomness: total calls to random: 829
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var2 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=179
-------------------------------------------
randoop.util.Randomness: total calls to random: 830
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 831
randoop.util.Randomness: total calls to random: 832
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=180
-------------------------------------------
randoop.util.Randomness: total calls to random: 833
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 834
randoop.util.Randomness: total calls to random: 835
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : java.util.Observable.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=181
-------------------------------------------
randoop.util.Randomness: total calls to random: 836
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 837
randoop.util.Randomness: total calls to random: 838
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var10 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var10]  : true

allSequences.size()=182
-------------------------------------------
randoop.util.Randomness: total calls to random: 839
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 840
randoop.util.Randomness: total calls to random: 841
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 842
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 843
randoop.util.Randomness: total calls to random: 844
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 845
randoop.util.Randomness: total calls to random: 846
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"hi!" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=183
-------------------------------------------
randoop.util.Randomness: total calls to random: 847
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 848
randoop.util.Randomness: total calls to random: 849
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 850
randoop.util.Randomness: total calls to random: 851
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=184
-------------------------------------------
randoop.util.Randomness: total calls to random: 852
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 853
randoop.util.Randomness: total calls to random: 854
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 855
randoop.util.Randomness: total calls to random: 856
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=185
-------------------------------------------
randoop.util.Randomness: total calls to random: 857
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 858
randoop.util.Randomness: total calls to random: 859
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 860
randoop.util.Randomness: total calls to random: 861
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  prim : java.lang.String:"cep" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var5 var7 
var9 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var4 var5 
var10 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var10 
var12 =  prim : double:10.0 : 
var13 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var4 var10 var12 
var14 =  method : java.util.Observable.notifyObservers() : var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setAddress("cep");
// <NormalExecution object=null>;
var4.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var10 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var11 = var10.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var12 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var4.setSalary(var10, 10.0d);
// <NormalExecution object=null>;
var10.notifyObservers();
// <NormalExecution object=null>;
boolean var15 = var0.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=hi! [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=0.0 [var11]  : true
<randoop.PrimValue, value=true [var15]  : true

allSequences.size()=186
-------------------------------------------
randoop.util.Randomness: total calls to random: 862
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 863
randoop.util.Randomness: total calls to random: 864
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 865
randoop.util.Randomness: total calls to random: 866
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  method : org.softlang.main.Main.getEmp() : var0 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var18 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var18 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var18 
var24 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = var0.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
java.lang.String var21 = var18.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var22 = var18.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var23 = var18.getName();
// <NormalExecution object=null>;
double var24 = var0.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=cep [var21]  : true
<randoop.PrimValue, value=0.0 [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true

allSequences.size()=187
-------------------------------------------
randoop.util.Randomness: total calls to random: 867
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 868
randoop.util.Randomness: total calls to random: 869
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 870
randoop.util.Randomness: total calls to random: 871
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var5]  : true

allSequences.size()=188
-------------------------------------------
randoop.util.Randomness: total calls to random: 872
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 873
randoop.util.Randomness: total calls to random: 874
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var6 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var6]  : true

allSequences.size()=189
-------------------------------------------
randoop.util.Randomness: total calls to random: 875
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 876
randoop.util.Randomness: total calls to random: 877
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 878
randoop.util.Randomness: total calls to random: 879
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;

allSequences.size()=190
-------------------------------------------
randoop.util.Randomness: total calls to random: 880
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 881
randoop.util.Randomness: total calls to random: 882
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=191
-------------------------------------------
randoop.util.Randomness: total calls to random: 883
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 884
randoop.util.Randomness: total calls to random: 885
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
java.lang.String var34 = var8.getName();
// <NormalExecution object=null>;
boolean var35 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var34]  : true
<randoop.PrimValue, value=false [var35]  : true

allSequences.size()=192
-------------------------------------------
randoop.util.Randomness: total calls to random: 886
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 887
randoop.util.Randomness: total calls to random: 888
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 889
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 890
randoop.util.Randomness: total calls to random: 891
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  method : java.util.Observable.hasChanged() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var21 = var3.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.PrimValue, value=false [var21]  : true

allSequences.size()=193
-------------------------------------------
randoop.util.Randomness: total calls to random: 892
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 893
randoop.util.Randomness: total calls to random: 894
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 294 sequences.
components: 294
randoop.util.Randomness: total calls to random: 895
randoop.util.Randomness: total calls to random: 896
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var10 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var5 var9 
var11 =  method : org.softlang.main.Main.getSampleCompany() : var5 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.main.Main.<init>() : 
var14 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var13 
var15 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var16 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var13 var15 
var17 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var12 var15 
var18 =  prim : java.lang.String:"hi!" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var15 var18 
var20 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var15 
var21 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var9 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var5.createSampleCompany((org.softlang.company.factory.Factory)var9);
// <NormalExecution object=null>;
org.softlang.company.Company var11 = var5.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var13 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var14 = new org.softlang.util.AddToList((java.lang.Object)var13);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var15 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var13.setSampleCompany((org.softlang.company.Company)var15);
// <NormalExecution object=null>;
var12.setSampleCompany((org.softlang.company.Company)var15);
// <NormalExecution object=null>;
java.lang.String var18 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var15.setName("hi!");
// <NormalExecution object=null>;
var5.setSampleCompany((org.softlang.company.Company)var15);
// <NormalExecution object=null>;
boolean var21 = var1.add((java.lang.Object)var15);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var11]  : true
<randoop.PrimValue, value=true [var21]  : true

allSequences.size()=194
-------------------------------------------
randoop.util.Randomness: total calls to random: 897
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 898
randoop.util.Randomness: total calls to random: 899
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 900
randoop.util.Randomness: total calls to random: 901
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
double var8 = var0.getSalary(var4);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=0.0 [var8]  : true

allSequences.size()=195
-------------------------------------------
randoop.util.Randomness: total calls to random: 902
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 903
randoop.util.Randomness: total calls to random: 904
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 905
randoop.util.Randomness: total calls to random: 906
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : java.util.Observable.notifyObservers() : var0 
var5 =  prim : boolean:true : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true

allSequences.size()=196
-------------------------------------------
randoop.util.Randomness: total calls to random: 907
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 908
randoop.util.Randomness: total calls to random: 909
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var8 =  prim : java.lang.String:"cep" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("cep");
// <NormalExecution object=null>;
boolean var10 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=false [var10]  : true

allSequences.size()=197
-------------------------------------------
randoop.util.Randomness: total calls to random: 910
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 911
randoop.util.Randomness: total calls to random: 912
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=198
-------------------------------------------
randoop.util.Randomness: total calls to random: 913
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 914
randoop.util.Randomness: total calls to random: 915
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var7 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNotNull@1f [var8]  : true

allSequences.size()=199
-------------------------------------------
randoop.util.Randomness: total calls to random: 916
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 917
randoop.util.Randomness: total calls to random: 918
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 919
randoop.util.Randomness: total calls to random: 920
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 921
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 303 sequences.
components: 303
randoop.util.Randomness: total calls to random: 922
randoop.util.Randomness: total calls to random: 923
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var4 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var2);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=200
-------------------------------------------
randoop.util.Randomness: total calls to random: 924
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 925
randoop.util.Randomness: total calls to random: 926
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 927
randoop.util.Randomness: total calls to random: 928
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var2 
var4 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var2 
var5 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var4 

Making all indices inactive (sequence has non-executed statements, so judging it inadequate for further extension).
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var3 = var2.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var2.getManager();
// <NormalExecution object=null>;
boolean var5 = var0.remove((org.softlang.company.Subunit)var4);
<not_executed>

allSequences.size()=201
-------------------------------------------
randoop.util.Randomness: total calls to random: 929
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 930
randoop.util.Randomness: total calls to random: 931
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var7 =  prim : double:-1.0 : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var7 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var7 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var9 = var2.getAddress();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.IsNull@25 [var9]  : true

allSequences.size()=202
-------------------------------------------
randoop.util.Randomness: total calls to random: 932
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 118 sequences.
components: 118
randoop.util.Randomness: total calls to random: 933
randoop.util.Randomness: total calls to random: 934
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  method : java.util.Observable.hasChanged() : var0 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=203
-------------------------------------------
randoop.util.Randomness: total calls to random: 935
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 936
randoop.util.Randomness: total calls to random: 937
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var13 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
var11.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=204
-------------------------------------------
randoop.util.Randomness: total calls to random: 938
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 939
randoop.util.Randomness: total calls to random: 940
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : java.util.Observable.deleteObservers() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var5 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=cep [var5]  : true

allSequences.size()=205
-------------------------------------------
randoop.util.Randomness: total calls to random: 941
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 942
randoop.util.Randomness: total calls to random: 943
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var2 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=206
-------------------------------------------
randoop.util.Randomness: total calls to random: 944
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 945
randoop.util.Randomness: total calls to random: 946
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=207
-------------------------------------------
randoop.util.Randomness: total calls to random: 947
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 948
randoop.util.Randomness: total calls to random: 949
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=208
-------------------------------------------
randoop.util.Randomness: total calls to random: 950
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 951
randoop.util.Randomness: total calls to random: 952
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=209
-------------------------------------------
randoop.util.Randomness: total calls to random: 953
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 954
randoop.util.Randomness: total calls to random: 955
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 956
randoop.util.Randomness: total calls to random: 957
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true

allSequences.size()=210
-------------------------------------------
randoop.util.Randomness: total calls to random: 958
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 959
randoop.util.Randomness: total calls to random: 960
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 961
randoop.util.Randomness: total calls to random: 962
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  prim : java.lang.String:"cep" : 
var6 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;

allSequences.size()=211
-------------------------------------------
randoop.util.Randomness: total calls to random: 963
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 964
randoop.util.Randomness: total calls to random: 965
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 966
randoop.util.Randomness: total calls to random: 967
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : java.util.Observable.deleteObservers() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var5 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=cep [var5]  : true

allSequences.size()=212
-------------------------------------------
randoop.util.Randomness: total calls to random: 968
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 969
randoop.util.Randomness: total calls to random: 970
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var21 = var3.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.PrimValue, value=hi! [var21]  : true

allSequences.size()=213
-------------------------------------------
randoop.util.Randomness: total calls to random: 971
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 972
randoop.util.Randomness: total calls to random: 973
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=214
-------------------------------------------
randoop.util.Randomness: total calls to random: 974
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 975
randoop.util.Randomness: total calls to random: 976
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 977
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 978
randoop.util.Randomness: total calls to random: 979
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var7 =  prim : double:-1.0 : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var7 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var7 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var9 = var2.getAddress();
// <NormalExecution object=null>;
double var10 = var2.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=-1.0 [var10]  : true

allSequences.size()=215
-------------------------------------------
randoop.util.Randomness: total calls to random: 980
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 981
randoop.util.Randomness: total calls to random: 982
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var2 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=216
-------------------------------------------
randoop.util.Randomness: total calls to random: 983
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 984
randoop.util.Randomness: total calls to random: 985
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 986
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 987
randoop.util.Randomness: total calls to random: 988
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 989
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 990
randoop.util.Randomness: total calls to random: 991
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 992
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 993
randoop.util.Randomness: total calls to random: 994
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 995
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 996
randoop.util.Randomness: total calls to random: 997
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 998
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 999
randoop.util.Randomness: total calls to random: 1000
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1001
randoop.util.Randomness: total calls to random: 1002
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=217
-------------------------------------------
randoop.util.Randomness: total calls to random: 1003
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 159 sequences.
components: 159
randoop.util.Randomness: total calls to random: 1004
randoop.util.Randomness: total calls to random: 1005
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var6 var12 
var17 =  prim : double:-1.0 : 
var18 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var12 var17 
var19 =  method : java.util.Observable.countObservers() : var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
double var16 = var6.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var17 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var12, (-1.0d));
// <NormalExecution object=null>;
int var19 = var12.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=218
-------------------------------------------
randoop.util.Randomness: total calls to random: 1006
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 1007
randoop.util.Randomness: total calls to random: 1008
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 1009
randoop.util.Randomness: total calls to random: 1010
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1011
randoop.util.Randomness: total calls to random: 1012
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  prim : java.lang.String:"cep" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var5 var7 
var9 =  method : java.util.Observable.hasChanged() : var5 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var5 var10 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var5 
var13 =  prim : double:-1.0 : 
var14 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var5 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setAddress("cep");
// <NormalExecution object=null>;
boolean var9 = var5.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setName("cep");
// <NormalExecution object=null>;
java.lang.String var12 = var5.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var13 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var5, (-1.0d));
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=cep [var12]  : true

allSequences.size()=219
-------------------------------------------
randoop.util.Randomness: total calls to random: 1013
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 1014
randoop.util.Randomness: total calls to random: 1015
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1016
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 1017
randoop.util.Randomness: total calls to random: 1018
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var8 =  prim : java.lang.String:"cep" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("cep");
// <NormalExecution object=null>;
java.lang.String var10 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=cep [var10]  : true

allSequences.size()=220
-------------------------------------------
randoop.util.Randomness: total calls to random: 1019
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 1020
randoop.util.Randomness: total calls to random: 1021
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=221
-------------------------------------------
randoop.util.Randomness: total calls to random: 1022
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 1023
randoop.util.Randomness: total calls to random: 1024
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 1025
randoop.util.Randomness: total calls to random: 1026
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1027
randoop.util.Randomness: total calls to random: 1028
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true

allSequences.size()=222
-------------------------------------------
randoop.util.Randomness: total calls to random: 1029
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 1030
randoop.util.Randomness: total calls to random: 1031
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1032
randoop.util.Randomness: total calls to random: 1033
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=223
-------------------------------------------
randoop.util.Randomness: total calls to random: 1034
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 1035
randoop.util.Randomness: total calls to random: 1036
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1037
randoop.util.Randomness: total calls to random: 1038
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var5]  : true

allSequences.size()=224
-------------------------------------------
randoop.util.Randomness: total calls to random: 1039
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 1040
randoop.util.Randomness: total calls to random: 1041
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1042
randoop.util.Randomness: total calls to random: 1043
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=0.0 [var1]  : true

allSequences.size()=225
-------------------------------------------
randoop.util.Randomness: total calls to random: 1044
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 1045
randoop.util.Randomness: total calls to random: 1046
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 178 sequences.
components: 178
randoop.util.Randomness: total calls to random: 1047
randoop.util.Randomness: total calls to random: 1048
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var2 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=226
-------------------------------------------
randoop.util.Randomness: total calls to random: 1049
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 1050
randoop.util.Randomness: total calls to random: 1051
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var9 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var7 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.Employee var9 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNull@25 [var9]  : true

allSequences.size()=227
-------------------------------------------
randoop.util.Randomness: total calls to random: 1052
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 1053
randoop.util.Randomness: total calls to random: 1054
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
int var2 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true

allSequences.size()=228
-------------------------------------------
randoop.util.Randomness: total calls to random: 1055
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 1056
randoop.util.Randomness: total calls to random: 1057
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=229
-------------------------------------------
randoop.util.Randomness: total calls to random: 1058
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1059
randoop.util.Randomness: total calls to random: 1060
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1061
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 1062
randoop.util.Randomness: total calls to random: 1063
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var4 var7 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var7 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var7 
var13 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var4.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
org.softlang.company.Company var13 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var13]  : true

allSequences.size()=230
-------------------------------------------
randoop.util.Randomness: total calls to random: 1064
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 1065
randoop.util.Randomness: total calls to random: 1066
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  prim : java.lang.String:"cep" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var5 var7 
var9 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var4 var5 
var10 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var10 
var12 =  prim : double:10.0 : 
var13 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var4 var10 var12 
var14 =  method : java.util.Observable.notifyObservers() : var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var10 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setAddress("cep");
// <NormalExecution object=null>;
var4.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var10 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var11 = var10.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var12 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var4.setSalary(var10, 10.0d);
// <NormalExecution object=null>;
var10.notifyObservers();
// <NormalExecution object=null>;
boolean var15 = var0.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var16 = var10.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=hi! [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=0.0 [var11]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.IsNull@25 [var16]  : true

allSequences.size()=231
-------------------------------------------
randoop.util.Randomness: total calls to random: 1067
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 1068
randoop.util.Randomness: total calls to random: 1069
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
java.lang.Iterable var2 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var2]  : true

allSequences.size()=232
-------------------------------------------
randoop.util.Randomness: total calls to random: 1070
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 1071
randoop.util.Randomness: total calls to random: 1072
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1073
randoop.util.Randomness: total calls to random: 1074
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var5 =  prim : boolean:true : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=233
-------------------------------------------
randoop.util.Randomness: total calls to random: 1075
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 1076
randoop.util.Randomness: total calls to random: 1077
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1078
randoop.util.Randomness: total calls to random: 1079
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var9 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var13 =  prim : char:61 : 
var14 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var9 var13 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var9.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var13 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var9.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
boolean var15 = var0.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true

allSequences.size()=234
-------------------------------------------
randoop.util.Randomness: total calls to random: 1080
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 1081
randoop.util.Randomness: total calls to random: 1082
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1083
randoop.util.Randomness: total calls to random: 1084
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var4 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var7 =  prim : java.lang.String:"" : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var6 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var7 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=235
-------------------------------------------
randoop.util.Randomness: total calls to random: 1085
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 1086
randoop.util.Randomness: total calls to random: 1087
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  method : java.util.Observable.notifyObservers() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var3.notifyObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true

allSequences.size()=236
-------------------------------------------
randoop.util.Randomness: total calls to random: 1088
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 1089
randoop.util.Randomness: total calls to random: 1090
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 1091
randoop.util.Randomness: total calls to random: 1092
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  prim : float:-1.0 : 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var7 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var9 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var10 = var7.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var7);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var13 = var11.add((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=237
-------------------------------------------
randoop.util.Randomness: total calls to random: 1093
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 138 sequences.
components: 138
randoop.util.Randomness: total calls to random: 1094
randoop.util.Randomness: total calls to random: 1095
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 

Making all indices inactive (sequence has non-executed statements, so judging it inadequate for further extension).
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var9 = var8.getParent();
<not_executed>

allSequences.size()=238
-------------------------------------------
randoop.util.Randomness: total calls to random: 1096
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1097
randoop.util.Randomness: total calls to random: 1098
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1099
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 77 sequences.
components: 77
randoop.util.Randomness: total calls to random: 1100
randoop.util.Randomness: total calls to random: 1101
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  prim : double:1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var5 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var8 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=239
-------------------------------------------
randoop.util.Randomness: total calls to random: 1102
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 1103
randoop.util.Randomness: total calls to random: 1104
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1105
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 1106
randoop.util.Randomness: total calls to random: 1107
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1108
randoop.util.Randomness: total calls to random: 1109
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 
var8 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var10 var13 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var16 
var18 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var13 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var8 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var6.setSampleCompany((org.softlang.company.Company)var8);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var10.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;

allSequences.size()=240
-------------------------------------------
randoop.util.Randomness: total calls to random: 1110
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 1111
randoop.util.Randomness: total calls to random: 1112
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var7 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Iterable var9 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var9]  : true

allSequences.size()=241
-------------------------------------------
randoop.util.Randomness: total calls to random: 1113
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 1114
randoop.util.Randomness: total calls to random: 1115
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 1116
randoop.util.Randomness: total calls to random: 1117
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  prim : float:-1.0 : 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var7 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var12 
var15 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var15 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var15 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var15 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var20 =  prim : double:1.0 : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var15 var20 
var22 =  method : java.util.Observable.countObservers() : var15 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var24 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var9 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var10 = var7.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var7);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var13 = var11.add((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var15 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var16 = var15.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var17 = var15.getParent();
// <NormalExecution object=null>;
java.lang.String var18 = var15.getAddress();
// <NormalExecution object=null>;
double var19 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var20 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(1.0d);
// <NormalExecution object=null>;
int var22 = var15.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
double var23 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var15);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=1.0 [var23]  : true

allSequences.size()=242
-------------------------------------------
randoop.util.Randomness: total calls to random: 1118
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 1119
randoop.util.Randomness: total calls to random: 1120
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1121
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 1122
randoop.util.Randomness: total calls to random: 1123
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 1124
randoop.util.Randomness: total calls to random: 1125
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var10 
var12 =  method : java.util.Observable.hasChanged() : var8 
var13 =  prim : java.lang.String:"cep" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var8 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("cep");
// <NormalExecution object=null>;
boolean var12 = var8.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("cep");
// <NormalExecution object=null>;
java.lang.String var15 = var8.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setEmp(var8);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var15]  : true

allSequences.size()=243
-------------------------------------------
randoop.util.Randomness: total calls to random: 1126
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 1127
randoop.util.Randomness: total calls to random: 1128
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1129
randoop.util.Randomness: total calls to random: 1130
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var9 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var10 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var11 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var10 
var12 =  method : org.softlang.util.ObservableSimpleList.iterator() : var10 
var13 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var10 
var14 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var15 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var13 var14 
var16 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var14 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
org.softlang.util.SimpleLinkedList var9 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var10 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var10.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var12 = var10.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var13 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var10);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var14 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var15 = var13.remove((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var0.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.PrimValue, value=false [var16]  : true

allSequences.size()=244
-------------------------------------------
randoop.util.Randomness: total calls to random: 1131
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 1132
randoop.util.Randomness: total calls to random: 1133
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var4.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=245
-------------------------------------------
randoop.util.Randomness: total calls to random: 1134
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 1135
randoop.util.Randomness: total calls to random: 1136
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1137
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 1138
randoop.util.Randomness: total calls to random: 1139
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var10 
var12 =  method : java.util.Observable.hasChanged() : var8 
var13 =  prim : java.lang.String:"cep" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var8 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("cep");
// <NormalExecution object=null>;
boolean var12 = var8.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("cep");
// <NormalExecution object=null>;
java.lang.String var15 = var8.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setEmp(var8);
// <NormalExecution object=null>;
java.lang.String var17 = var8.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var15]  : true
<randoop.PrimValue, value=cep [var17]  : true

allSequences.size()=246
-------------------------------------------
randoop.util.Randomness: total calls to random: 1140
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 1141
randoop.util.Randomness: total calls to random: 1142
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1143
randoop.util.Randomness: total calls to random: 1144
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var7 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setManager(false);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=247
-------------------------------------------
randoop.util.Randomness: total calls to random: 1145
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 1146
randoop.util.Randomness: total calls to random: 1147
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 1148
randoop.util.Randomness: total calls to random: 1149
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1150
randoop.util.Randomness: total calls to random: 1151
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var4 var7 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var7 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var7 
var13 =  cons : org.softlang.main.Main.<init>() : 
var14 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var15 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var13 var14 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var13 
var17 =  method : org.softlang.main.Main.getSampleCompany() : var13 
var18 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var21 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var21 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var18 var21 
var27 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var13 var21 
var28 =  cons : org.softlang.main.Main.<init>() : 
var29 =  cons : org.softlang.main.Main.<init>() : 
var30 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var31 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var29 var30 
var32 =  method : org.softlang.main.Main.getSampleCompany() : var29 
var33 =  method : org.softlang.main.Main.getSampleCompany() : var29 
var34 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var35 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var34 
var36 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var34 
var37 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var38 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var37 
var39 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var37 
var40 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var37 
var41 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var37 
var42 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var34 var37 
var43 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var29 var37 
var44 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var28 var37 
var45 =  method : org.softlang.main.Main.getEmp() : var28 
var46 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var21 var28 
var47 =  prim : double:10.0 : 
var48 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var21 var47 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 45
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is null)
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is a primitive)
Making index 28 active.
Making index 29 active.
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 active.
Making index 34 active.
Making index 35 active.
Making index 36 inactive (value is null)
Making index 37 active.
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is null)
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is a primitive)
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is null)
Making index 45 active.
Making index 46 inactive (value is null)
Making index 47 inactive (value is a primitive)
Making index 48 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var4.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
org.softlang.main.Main var13 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var14 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var13.createSampleCompany((org.softlang.company.factory.Factory)var14);
// <NormalExecution object=null>;
org.softlang.company.Company var16 = var13.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var17 = var13.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var18 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var19 = var18.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var21 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var22 = var21.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
java.lang.String var24 = var21.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var25 = var21.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var26 = var18.remove((org.softlang.company.Subunit)var21);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var27 = var13.getSalary(var21);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var28 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var29 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var30 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var29.createSampleCompany((org.softlang.company.factory.Factory)var30);
// <NormalExecution object=null>;
org.softlang.company.Company var32 = var29.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var33 = var29.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var34 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var35 = var34.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var36 = var34.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var37 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var38 = var37.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var39 = var37.getParent();
// <NormalExecution object=null>;
java.lang.String var40 = var37.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var41 = var37.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var42 = var34.remove((org.softlang.company.Subunit)var37);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var43 = var29.getSalary(var37);
// <NormalExecution object=object-of-type-java.lang.Double>;
var28.setEmp(var37);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var45 = var28.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var21.notifyObservers((java.lang.Object)var28);
// <NormalExecution object=null>;
java.lang.Double var47 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var21, 10.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=false [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=cep [var24]  : true
<randoop.PrimValue, value=0.0 [var25]  : true
<randoop.PrimValue, value=false [var26]  : true
<randoop.PrimValue, value=0.0 [var27]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNotNull@1f [var33]  : true
<randoop.IsNotNull@1f [var35]  : true
<randoop.IsNull@25 [var36]  : true
<randoop.PrimValue, value=false [var38]  : true
<randoop.IsNull@25 [var39]  : true
<randoop.PrimValue, value=cep [var40]  : true
<randoop.PrimValue, value=0.0 [var41]  : true
<randoop.PrimValue, value=false [var42]  : true
<randoop.PrimValue, value=0.0 [var43]  : true
<randoop.IsNotNull@1f [var45]  : true

allSequences.size()=248
-------------------------------------------
randoop.util.Randomness: total calls to random: 1152
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 1153
randoop.util.Randomness: total calls to random: 1154
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=249
-------------------------------------------
randoop.util.Randomness: total calls to random: 1155
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 1156
randoop.util.Randomness: total calls to random: 1157
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  prim : float:-1.0 : 
var4 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var3 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var3 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var4 = var1.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=250
-------------------------------------------
randoop.util.Randomness: total calls to random: 1158
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 1159
randoop.util.Randomness: total calls to random: 1160
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var5 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
java.lang.Iterable var4 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
org.softlang.company.Employee var5 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=251
-------------------------------------------
randoop.util.Randomness: total calls to random: 1161
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1162
randoop.util.Randomness: total calls to random: 1163
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1164
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1165
randoop.util.Randomness: total calls to random: 1166
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1167
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1168
randoop.util.Randomness: total calls to random: 1169
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
double var2 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=0.0 [var2]  : true

allSequences.size()=252
-------------------------------------------
randoop.util.Randomness: total calls to random: 1170
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1171
randoop.util.Randomness: total calls to random: 1172
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 84 sequences.
components: 84
randoop.util.Randomness: total calls to random: 1173
randoop.util.Randomness: total calls to random: 1174
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.main.Main.<init>() : 
var3 =  cons : org.softlang.main.Main.<init>() : 
var4 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var3 
var5 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var6 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var3 var5 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var2 var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : boolean:false : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var8 var10 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var2 var8 
var13 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.main.Main var2 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var3 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var4 = new org.softlang.util.AddToList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var5 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var3.setSampleCompany((org.softlang.company.Company)var5);
// <NormalExecution object=null>;
var2.setSampleCompany((org.softlang.company.Company)var5);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var10 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setManager(false);
// <NormalExecution object=null>;
double var12 = var2.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var8);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=253
-------------------------------------------
randoop.util.Randomness: total calls to random: 1175
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 1176
randoop.util.Randomness: total calls to random: 1177
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1178
randoop.util.Randomness: total calls to random: 1179
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var7 var13 
var15 =  prim : double:0.0 : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setManager(false);
// <NormalExecution object=null>;
java.lang.Double var15 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=254
-------------------------------------------
randoop.util.Randomness: total calls to random: 1180
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 149 sequences.
components: 149
randoop.util.Randomness: total calls to random: 1181
randoop.util.Randomness: total calls to random: 1182
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1183
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1184
randoop.util.Randomness: total calls to random: 1185
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1186
randoop.util.Randomness: total calls to random: 1187
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=255
-------------------------------------------
randoop.util.Randomness: total calls to random: 1188
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 1189
randoop.util.Randomness: total calls to random: 1190
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=256
-------------------------------------------
randoop.util.Randomness: total calls to random: 1191
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 1192
randoop.util.Randomness: total calls to random: 1193
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 1194
randoop.util.Randomness: total calls to random: 1195
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  method : org.softlang.main.Main.getEmp() : var0 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var20 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var18 var19 
var21 =  method : org.softlang.main.Main.getSampleCompany() : var18 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type interface org.softlang.company.Company
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = var0.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var19 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var18.createSampleCompany((org.softlang.company.factory.Factory)var19);
// <NormalExecution object=null>;
org.softlang.company.Company var21 = var18.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany(var21);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.IsNotNull@1f [var21]  : true

allSequences.size()=257
-------------------------------------------
randoop.util.Randomness: total calls to random: 1196
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 1197
randoop.util.Randomness: total calls to random: 1198
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=258
-------------------------------------------
randoop.util.Randomness: total calls to random: 1199
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 1200
randoop.util.Randomness: total calls to random: 1201
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getAddress();
// <NormalExecution object=null>;
java.lang.String var7 = var2.getAddress();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=259
-------------------------------------------
randoop.util.Randomness: total calls to random: 1202
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 1203
randoop.util.Randomness: total calls to random: 1204
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true

allSequences.size()=260
-------------------------------------------
randoop.util.Randomness: total calls to random: 1205
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 1206
randoop.util.Randomness: total calls to random: 1207
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 382 sequences.
components: 382
randoop.util.Randomness: total calls to random: 1208
randoop.util.Randomness: total calls to random: 1209
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var13 
var15 =  prim : boolean:false : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var13 var15 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var13 
var18 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var14 = var13.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var15 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var13.setManager(false);
// <NormalExecution object=null>;
java.lang.String var17 = var13.getAddress();
// <NormalExecution object=null>;
boolean var18 = var12.remove((java.lang.Object)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var18]  : true

allSequences.size()=261
-------------------------------------------
randoop.util.Randomness: total calls to random: 1210
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 1211
randoop.util.Randomness: total calls to random: 1212
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1213
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 1214
randoop.util.Randomness: total calls to random: 1215
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1216
randoop.util.Randomness: total calls to random: 1217
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var28 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var25 
var29 =  prim : java.lang.String:"" : 
var30 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var29 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 inactive (value is null)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var26 = var25.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var27 = var25.getParent();
// <NormalExecution object=null>;
boolean var28 = var0.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var29 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.IsNull@25 [var27]  : true
<randoop.PrimValue, value=true [var28]  : true

allSequences.size()=262
-------------------------------------------
randoop.util.Randomness: total calls to random: 1218
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 1219
randoop.util.Randomness: total calls to random: 1220
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=263
-------------------------------------------
randoop.util.Randomness: total calls to random: 1221
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1222
randoop.util.Randomness: total calls to random: 1223
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 386 sequences.
components: 386
randoop.util.Randomness: total calls to random: 1224
randoop.util.Randomness: total calls to random: 1225
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var21 
var26 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var21 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is null)
Making index 26 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var22 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var24 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var25 = var21.getName();
// <NormalExecution object=null>;
var3.notifyObservers((java.lang.Object)var21);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.IsNotNull@1f [var24]  : true
<randoop.IsNull@25 [var25]  : true

allSequences.size()=264
-------------------------------------------
randoop.util.Randomness: total calls to random: 1226
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 1227
randoop.util.Randomness: total calls to random: 1228
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1229
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 1230
randoop.util.Randomness: total calls to random: 1231
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 212 sequences.
components: 212
randoop.util.Randomness: total calls to random: 1232
randoop.util.Randomness: total calls to random: 1233
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var6 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var6 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var4 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
java.lang.String var9 = var6.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var10 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var3.remove((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var12 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=cep [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.PrimValue, value=false [var11]  : true
<randoop.PrimValue, value=true [var12]  : true

allSequences.size()=265
-------------------------------------------
randoop.util.Randomness: total calls to random: 1234
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 1235
randoop.util.Randomness: total calls to random: 1236
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 1237
randoop.util.Randomness: total calls to random: 1238
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var4 var7 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var7 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var7 
var13 =  cons : org.softlang.main.Main.<init>() : 
var14 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var15 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var13 var14 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var13 
var17 =  method : org.softlang.main.Main.getSampleCompany() : var13 
var18 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var21 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var21 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var18 var21 
var27 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var13 var21 
var28 =  cons : org.softlang.main.Main.<init>() : 
var29 =  cons : org.softlang.main.Main.<init>() : 
var30 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var31 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var29 var30 
var32 =  method : org.softlang.main.Main.getSampleCompany() : var29 
var33 =  method : org.softlang.main.Main.getSampleCompany() : var29 
var34 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var35 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var34 
var36 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var34 
var37 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var38 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var37 
var39 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var37 
var40 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var37 
var41 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var37 
var42 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var34 var37 
var43 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var29 var37 
var44 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var28 var37 
var45 =  method : org.softlang.main.Main.getEmp() : var28 
var46 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var21 var28 
var47 =  prim : double:10.0 : 
var48 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var21 var47 
var49 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var50 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var49 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 45
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is null)
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is a primitive)
Making index 28 active.
Making index 29 active.
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 active.
Making index 34 active.
Making index 35 active.
Making index 36 inactive (value is null)
Making index 37 active.
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is null)
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is a primitive)
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is null)
Making index 45 active.
Making index 46 inactive (value is null)
Making index 47 inactive (value is a primitive)
Making index 48 inactive (value is null)
Making index 49 active.
Making index 50 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var4.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
org.softlang.main.Main var13 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var14 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var13.createSampleCompany((org.softlang.company.factory.Factory)var14);
// <NormalExecution object=null>;
org.softlang.company.Company var16 = var13.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var17 = var13.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var18 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var19 = var18.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var21 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var22 = var21.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
java.lang.String var24 = var21.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var25 = var21.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var26 = var18.remove((org.softlang.company.Subunit)var21);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var27 = var13.getSalary(var21);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var28 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var29 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var30 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var29.createSampleCompany((org.softlang.company.factory.Factory)var30);
// <NormalExecution object=null>;
org.softlang.company.Company var32 = var29.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var33 = var29.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var34 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var35 = var34.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var36 = var34.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var37 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var38 = var37.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var39 = var37.getParent();
// <NormalExecution object=null>;
java.lang.String var40 = var37.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var41 = var37.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var42 = var34.remove((org.softlang.company.Subunit)var37);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var43 = var29.getSalary(var37);
// <NormalExecution object=object-of-type-java.lang.Double>;
var28.setEmp(var37);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var45 = var28.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var21.notifyObservers((java.lang.Object)var28);
// <NormalExecution object=null>;
java.lang.Double var47 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var21, 10.0d);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var49 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var49);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=false [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=cep [var24]  : true
<randoop.PrimValue, value=0.0 [var25]  : true
<randoop.PrimValue, value=false [var26]  : true
<randoop.PrimValue, value=0.0 [var27]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNotNull@1f [var33]  : true
<randoop.IsNotNull@1f [var35]  : true
<randoop.IsNull@25 [var36]  : true
<randoop.PrimValue, value=false [var38]  : true
<randoop.IsNull@25 [var39]  : true
<randoop.PrimValue, value=cep [var40]  : true
<randoop.PrimValue, value=0.0 [var41]  : true
<randoop.PrimValue, value=false [var42]  : true
<randoop.PrimValue, value=0.0 [var43]  : true
<randoop.IsNotNull@1f [var45]  : true

allSequences.size()=266
-------------------------------------------
randoop.util.Randomness: total calls to random: 1239
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 159 sequences.
components: 159
randoop.util.Randomness: total calls to random: 1240
randoop.util.Randomness: total calls to random: 1241
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var14 = var7.getParent();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.IsNull@25 [var14]  : true

allSequences.size()=267
-------------------------------------------
randoop.util.Randomness: total calls to random: 1242
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 1243
randoop.util.Randomness: total calls to random: 1244
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1245
randoop.util.Randomness: total calls to random: 1246
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
java.lang.String var5 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;

allSequences.size()=268
-------------------------------------------
randoop.util.Randomness: total calls to random: 1247
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 198 sequences.
components: 198
randoop.util.Randomness: total calls to random: 1248
randoop.util.Randomness: total calls to random: 1249
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var2 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var2 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=269
-------------------------------------------
randoop.util.Randomness: total calls to random: 1250
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1251
randoop.util.Randomness: total calls to random: 1252
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 1253
randoop.util.Randomness: total calls to random: 1254
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.main.Main.<init>() : 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var10 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var10 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var8 var12 
var14 =  cons : org.softlang.main.Main.<init>() : 
var15 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var14 
var16 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var17 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var14 var16 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var19 
var21 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var19 var21 
var23 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var18 var21 
var24 =  prim : java.lang.String:"hi!" : 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var21 var24 
var26 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var14 var21 
var27 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var21 
var28 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is null)
Making index 27 inactive (value is null)
Making index 28 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.main.Main var8 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var10 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var8.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var8.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.main.Main var14 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var15 = new org.softlang.util.AddToList((java.lang.Object)var14);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var16 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var14.setSampleCompany((org.softlang.company.Company)var16);
// <NormalExecution object=null>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var20 = new org.softlang.util.AddToList((java.lang.Object)var19);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var21 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var19.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var18.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
java.lang.String var24 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var21.setName("hi!");
// <NormalExecution object=null>;
var14.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var8.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;

allSequences.size()=270
-------------------------------------------
randoop.util.Randomness: total calls to random: 1255
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 1256
randoop.util.Randomness: total calls to random: 1257
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 397 sequences.
components: 397
randoop.util.Randomness: total calls to random: 1258
randoop.util.Randomness: total calls to random: 1259
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var13 
var15 =  prim : boolean:false : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var13 var15 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var13 
var18 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var13 
var19 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var19 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var19 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var25 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var12 var24 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var14 = var13.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var15 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var13.setManager(false);
// <NormalExecution object=null>;
java.lang.String var17 = var13.getAddress();
// <NormalExecution object=null>;
boolean var18 = var12.remove((java.lang.Object)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var19 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var20 = var19.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var21 = var19.getParent();
// <NormalExecution object=null>;
java.lang.String var22 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var23 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
double var24 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var12.add((java.lang.Object)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=cep [var22]  : true
<randoop.PrimValue, value=0.0 [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=true [var25]  : true

allSequences.size()=271
-------------------------------------------
randoop.util.Randomness: total calls to random: 1260
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 1261
randoop.util.Randomness: total calls to random: 1262
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1263
randoop.util.Randomness: total calls to random: 1264
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : java.lang.String:"cep" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=272
-------------------------------------------
randoop.util.Randomness: total calls to random: 1265
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1266
randoop.util.Randomness: total calls to random: 1267
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 218 sequences.
components: 218
randoop.util.Randomness: total calls to random: 1268
randoop.util.Randomness: total calls to random: 1269
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var3 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <ExceptionalExecution, exception type=java.lang.IllegalArgumentException>;
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
// throws exception of type java.lang.IllegalArgumentException
 : true

allSequences.size()=273
-------------------------------------------
randoop.util.Randomness: total calls to random: 1270
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1271
randoop.util.Randomness: total calls to random: 1272
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1273
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 399 sequences.
components: 399
randoop.util.Randomness: total calls to random: 1274
randoop.util.Randomness: total calls to random: 1275
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.RemoveFromList var13 = new org.softlang.util.RemoveFromList((java.lang.Object)var12);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=274
-------------------------------------------
randoop.util.Randomness: total calls to random: 1276
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 1277
randoop.util.Randomness: total calls to random: 1278
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 218 sequences.
components: 218
randoop.util.Randomness: total calls to random: 1279
randoop.util.Randomness: total calls to random: 1280
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var11 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var11 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var11 
var15 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var3 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var10 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var12 = var11.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = var11.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var14 = var11.getName();
// <NormalExecution object=null>;
boolean var15 = var3.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.PrimValue, value=true [var15]  : true

allSequences.size()=275
-------------------------------------------
randoop.util.Randomness: total calls to random: 1281
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 1282
randoop.util.Randomness: total calls to random: 1283
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1284
randoop.util.Randomness: total calls to random: 1285
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  prim : java.lang.String:"cep" : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
java.lang.String var4 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true

allSequences.size()=276
-------------------------------------------
randoop.util.Randomness: total calls to random: 1286
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1287
randoop.util.Randomness: total calls to random: 1288
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 221 sequences.
components: 221
randoop.util.Randomness: total calls to random: 1289
randoop.util.Randomness: total calls to random: 1290
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var3 
var5 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var5 
var7 =  prim : boolean:false : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var5 var7 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var5 
var10 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var5 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = var3.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var5 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var3.notifyObservers((java.lang.Object)var5);
// <NormalExecution object=null>;
java.lang.Boolean var7 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var5.setManager(false);
// <NormalExecution object=null>;
java.lang.String var9 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <ExceptionalExecution, exception type=java.lang.IllegalArgumentException>;
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=cep [var9]  : true
// throws exception of type java.lang.IllegalArgumentException
 : true

allSequences.size()=277
-------------------------------------------
randoop.util.Randomness: total calls to random: 1291
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 206 sequences.
components: 206
randoop.util.Randomness: total calls to random: 1292
randoop.util.Randomness: total calls to random: 1293
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 404 sequences.
components: 404
randoop.util.Randomness: total calls to random: 1294
randoop.util.Randomness: total calls to random: 1295
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  prim : boolean:false : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var3 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=278
-------------------------------------------
randoop.util.Randomness: total calls to random: 1296
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 1297
randoop.util.Randomness: total calls to random: 1298
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var2 = var0.getManager();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=279
-------------------------------------------
randoop.util.Randomness: total calls to random: 1299
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1300
randoop.util.Randomness: total calls to random: 1301
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var7 var8 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var11 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var7 var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var7 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var7 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var7 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var13 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var14 = var7.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var15 = var7.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var1.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var14]  : true
<randoop.IsNotNull@1f [var15]  : true

allSequences.size()=280
-------------------------------------------
randoop.util.Randomness: total calls to random: 1302
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 1303
randoop.util.Randomness: total calls to random: 1304
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value= [var3]  : true

allSequences.size()=281
-------------------------------------------
randoop.util.Randomness: total calls to random: 1305
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 1306
randoop.util.Randomness: total calls to random: 1307
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 223 sequences.
components: 223
randoop.util.Randomness: total calls to random: 1308
randoop.util.Randomness: total calls to random: 1309
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var8 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var17 
var19 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var17 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var21 =  prim : java.lang.String:"" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var17 var21 
var23 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var17 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var0.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var18 = var17.getName();
// <NormalExecution object=null>;
var17.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var20 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var21 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var17.setName("");
// <NormalExecution object=null>;
boolean var23 = var8.add((org.softlang.company.Subunit)var17);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.PrimValue, value=true [var23]  : true

allSequences.size()=282
-------------------------------------------
randoop.util.Randomness: total calls to random: 1310
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 1311
randoop.util.Randomness: total calls to random: 1312
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var9 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var13 =  prim : char:61 : 
var14 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var9 var13 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var9 
var16 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var9.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var13 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var9.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
boolean var15 = var0.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var16 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.IsNull@25 [var16]  : true

allSequences.size()=283
-------------------------------------------
randoop.util.Randomness: total calls to random: 1313
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 1314
randoop.util.Randomness: total calls to random: 1315
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1316
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1317
randoop.util.Randomness: total calls to random: 1318
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1319
randoop.util.Randomness: total calls to random: 1320
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  prim : boolean:true : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.Boolean var8 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var5]  : true

allSequences.size()=284
-------------------------------------------
randoop.util.Randomness: total calls to random: 1321
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 1322
randoop.util.Randomness: total calls to random: 1323
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var4 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true

allSequences.size()=285
-------------------------------------------
randoop.util.Randomness: total calls to random: 1324
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 1325
randoop.util.Randomness: total calls to random: 1326
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1327
randoop.util.Randomness: total calls to random: 1328
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var35 =  prim : java.lang.String:"" : 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var35 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
java.lang.String var34 = var8.getName();
// <NormalExecution object=null>;
java.lang.String var35 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var34]  : true

allSequences.size()=286
-------------------------------------------
randoop.util.Randomness: total calls to random: 1329
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 92 sequences.
components: 92
randoop.util.Randomness: total calls to random: 1330
randoop.util.Randomness: total calls to random: 1331
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1332
randoop.util.Randomness: total calls to random: 1333
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var6 var11 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var6 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=287
-------------------------------------------
randoop.util.Randomness: total calls to random: 1334
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1335
randoop.util.Randomness: total calls to random: 1336
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1337
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1338
randoop.util.Randomness: total calls to random: 1339
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 417 sequences.
components: 417
randoop.util.Randomness: total calls to random: 1340
randoop.util.Randomness: total calls to random: 1341
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var13 
var15 =  prim : boolean:false : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var13 var15 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var13 
var18 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var13 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var21 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var19 var20 
var22 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var23 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var24 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var23 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 active.
Making index 21 inactive (value is null)
Making index 22 active.
Making index 23 active.
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type interface org.softlang.company.Company
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var14 = var13.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var15 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var13.setManager(false);
// <NormalExecution object=null>;
java.lang.String var17 = var13.getAddress();
// <NormalExecution object=null>;
boolean var18 = var12.remove((java.lang.Object)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var20 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var19.createSampleCompany((org.softlang.company.factory.Factory)var20);
// <NormalExecution object=null>;
org.softlang.company.Company var22 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var23 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
boolean var24 = var12.remove((java.lang.Object)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.PrimValue, value=false [var24]  : true

allSequences.size()=288
-------------------------------------------
randoop.util.Randomness: total calls to random: 1342
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 93 sequences.
components: 93
randoop.util.Randomness: total calls to random: 1343
randoop.util.Randomness: total calls to random: 1344
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true

allSequences.size()=289
-------------------------------------------
randoop.util.Randomness: total calls to random: 1345
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 1346
randoop.util.Randomness: total calls to random: 1347
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=290
-------------------------------------------
randoop.util.Randomness: total calls to random: 1348
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 1349
randoop.util.Randomness: total calls to random: 1350
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1351
randoop.util.Randomness: total calls to random: 1352
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 
var10 =  prim : double:0.0 : 
var11 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var10 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=291
-------------------------------------------
randoop.util.Randomness: total calls to random: 1353
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 1354
randoop.util.Randomness: total calls to random: 1355
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1356
randoop.util.Randomness: total calls to random: 1357
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
org.softlang.company.Employee var4 = var3.getManager();
// <NormalExecution object=null>;
boolean var5 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=292
-------------------------------------------
randoop.util.Randomness: total calls to random: 1358
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 216 sequences.
components: 216
randoop.util.Randomness: total calls to random: 1359
randoop.util.Randomness: total calls to random: 1360
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 424 sequences.
components: 424
randoop.util.Randomness: total calls to random: 1361
randoop.util.Randomness: total calls to random: 1362
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var4 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  method : org.softlang.util.ObservableSimpleList.iterator() : var7 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  method : java.util.Observable.countObservers() : var10 
var12 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var11 
var13 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var13 var14 
var16 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var17 =  prim : java.lang.String:"hi!" : 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var16 var17 
var19 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var16 
var20 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var13 var16 
var21 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var13 
var22 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var7 var13 
var23 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 active.
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var9 = var7.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var11 = var10.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var12 = var7.remove((java.lang.Object)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var13 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var14 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var16 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var17 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var16.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var19 = var16.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var20 = var13.add((org.softlang.company.Subunit)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var21 = var13.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var7.notifyObservers((java.lang.Object)var13);
// <NormalExecution object=null>;
var0.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.PrimValue, value=true [var20]  : true
<randoop.IsNotNull@1f [var21]  : true

allSequences.size()=293
-------------------------------------------
randoop.util.Randomness: total calls to random: 1363
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 1364
randoop.util.Randomness: total calls to random: 1365
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1366
randoop.util.Randomness: total calls to random: 1367
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 
var8 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var10 var13 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var16 
var18 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var13 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var13 
var20 =  prim : java.lang.String:"hi!" : 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var20 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var8 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var6.setSampleCompany((org.softlang.company.Company)var8);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var10.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var20 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=294
-------------------------------------------
randoop.util.Randomness: total calls to random: 1368
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 1369
randoop.util.Randomness: total calls to random: 1370
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 427 sequences.
components: 427
randoop.util.Randomness: total calls to random: 1371
randoop.util.Randomness: total calls to random: 1372
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var5 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var5 var6 
var8 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var8 
var12 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var5 var8 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var1.deleteObservers();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var5 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var8 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var11 = var8.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var12 = var5.add((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var13 = var1.add((java.lang.Object)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var3]  : true
<randoop.IsNotNull@1f [var11]  : true
<randoop.PrimValue, value=true [var12]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=295
-------------------------------------------
randoop.util.Randomness: total calls to random: 1373
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 95 sequences.
components: 95
randoop.util.Randomness: total calls to random: 1374
randoop.util.Randomness: total calls to random: 1375
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  method : java.util.Observable.notifyObservers() : var6 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
var6.notifyObservers();
// <NormalExecution object=null>;
double var11 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=10.0 [var11]  : true

allSequences.size()=296
-------------------------------------------
randoop.util.Randomness: total calls to random: 1376
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 96 sequences.
components: 96
randoop.util.Randomness: total calls to random: 1377
randoop.util.Randomness: total calls to random: 1378
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1379
randoop.util.Randomness: total calls to random: 1380
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var5 =  prim : boolean:true : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 
var7 =  prim : java.lang.String:"cep" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
java.lang.String var7 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=297
-------------------------------------------
randoop.util.Randomness: total calls to random: 1381
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 1382
randoop.util.Randomness: total calls to random: 1383
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=298
-------------------------------------------
randoop.util.Randomness: total calls to random: 1384
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 1385
randoop.util.Randomness: total calls to random: 1386
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1387
randoop.util.Randomness: total calls to random: 1388
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("hi!");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=299
-------------------------------------------
randoop.util.Randomness: total calls to random: 1389
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 1390
randoop.util.Randomness: total calls to random: 1391
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 239 sequences.
components: 239
randoop.util.Randomness: total calls to random: 1392
randoop.util.Randomness: total calls to random: 1393
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var6 
var8 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var8 
var10 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var11 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var10 
var12 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var10 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var10 var13 
var15 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var10 
var16 =  prim : java.lang.String:"" : 
var17 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var10 var16 
var18 =  prim : double:0.0 : 
var19 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var10 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var10 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var8 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var9 = var8.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var10 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var10);
// <NormalExecution object=null>;
java.lang.String var12 = var10.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var10.setManager(false);
// <NormalExecution object=null>;
java.lang.String var15 = var10.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var16 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var18 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var10.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var10);
// <ExceptionalExecution, exception type=java.lang.ClassCastException>;
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=cep [var15]  : true
// throws exception of type java.lang.ClassCastException
 : true

allSequences.size()=300
-------------------------------------------
randoop.util.Randomness: total calls to random: 1394
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 1395
randoop.util.Randomness: total calls to random: 1396
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = var0.getEmp();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=301
-------------------------------------------
randoop.util.Randomness: total calls to random: 1397
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 1398
randoop.util.Randomness: total calls to random: 1399
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1400
randoop.util.Randomness: total calls to random: 1401
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  prim : double:100.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var6 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var11 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var6.setSalary(100.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=302
-------------------------------------------
randoop.util.Randomness: total calls to random: 1402
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 1403
randoop.util.Randomness: total calls to random: 1404
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 1405
randoop.util.Randomness: total calls to random: 1406
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var12 
var14 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var12 var14 
var16 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var14 
var17 =  prim : java.lang.String:"hi!" : 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var17 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var14 
var20 =  cons : org.softlang.main.Main.<init>() : 
var21 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var22 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var20 var21 
var23 =  method : org.softlang.main.Main.getSampleCompany() : var20 
var24 =  method : org.softlang.main.Main.getSampleCompany() : var20 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var28 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var29 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var28 
var30 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var28 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var28 
var32 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var28 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var25 var28 
var34 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var20 var28 
var35 =  cons : org.softlang.main.Main.<init>() : 
var36 =  cons : org.softlang.main.Main.<init>() : 
var37 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var38 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var36 var37 
var39 =  method : org.softlang.main.Main.getSampleCompany() : var36 
var40 =  method : org.softlang.main.Main.getSampleCompany() : var36 
var41 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var42 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var41 
var43 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var41 
var44 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var45 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var44 
var46 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var44 
var47 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var44 
var48 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var44 
var49 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var41 var44 
var50 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var36 var44 
var51 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var35 var44 
var52 =  method : org.softlang.main.Main.getEmp() : var35 
var53 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var28 var35 
var54 =  prim : double:10.0 : 
var55 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var7 var28 var54 
var56 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var57 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var56 
var58 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var56 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 52
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 active.
Making index 25 active.
Making index 26 active.
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 active.
Making index 36 active.
Making index 37 active.
Making index 38 inactive (value is null)
Making index 39 active.
Making index 40 active.
Making index 41 active.
Making index 42 active.
Making index 43 inactive (value is null)
Making index 44 active.
Making index 45 inactive (value is a primitive)
Making index 46 inactive (value is null)
Making index 47 inactive (value is a primitive)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is a primitive)
Making index 50 inactive (value is a primitive)
Making index 51 inactive (value is null)
Making index 52 active.
Making index 53 inactive (value is null)
Making index 54 inactive (value is a primitive)
Making index 55 inactive (value is null)
Making index 56 active.
Making index 57 inactive (value is null)
Making index 58 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var13 = new org.softlang.util.AddToList((java.lang.Object)var12);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var14 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var12.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
var11.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
java.lang.String var17 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
var7.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
org.softlang.main.Main var20 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var21 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var20.createSampleCompany((org.softlang.company.factory.Factory)var21);
// <NormalExecution object=null>;
org.softlang.company.Company var23 = var20.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var24 = var20.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var26 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var27 = var25.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var29 = var28.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var30 = var28.getParent();
// <NormalExecution object=null>;
java.lang.String var31 = var28.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var32 = var28.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var33 = var25.remove((org.softlang.company.Subunit)var28);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var34 = var20.getSalary(var28);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var35 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var36 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var37 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var36.createSampleCompany((org.softlang.company.factory.Factory)var37);
// <NormalExecution object=null>;
org.softlang.company.Company var39 = var36.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var40 = var36.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var41 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var42 = var41.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var43 = var41.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var44 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var45 = var44.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var46 = var44.getParent();
// <NormalExecution object=null>;
java.lang.String var47 = var44.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var48 = var44.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var49 = var41.remove((org.softlang.company.Subunit)var44);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var50 = var36.getSalary(var44);
// <NormalExecution object=object-of-type-java.lang.Double>;
var35.setEmp(var44);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var52 = var35.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var28.notifyObservers((java.lang.Object)var35);
// <NormalExecution object=null>;
java.lang.Double var54 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(var28, 10.0d);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var56 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var56);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var56);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.IsNotNull@1f [var24]  : true
<randoop.IsNotNull@1f [var26]  : true
<randoop.IsNull@25 [var27]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.IsNull@25 [var30]  : true
<randoop.PrimValue, value=cep [var31]  : true
<randoop.PrimValue, value=0.0 [var32]  : true
<randoop.PrimValue, value=false [var33]  : true
<randoop.PrimValue, value=0.0 [var34]  : true
<randoop.IsNotNull@1f [var39]  : true
<randoop.IsNotNull@1f [var40]  : true
<randoop.IsNotNull@1f [var42]  : true
<randoop.IsNull@25 [var43]  : true
<randoop.PrimValue, value=false [var45]  : true
<randoop.IsNull@25 [var46]  : true
<randoop.PrimValue, value=cep [var47]  : true
<randoop.PrimValue, value=0.0 [var48]  : true
<randoop.PrimValue, value=false [var49]  : true
<randoop.PrimValue, value=0.0 [var50]  : true
<randoop.IsNotNull@1f [var52]  : true

allSequences.size()=303
-------------------------------------------
randoop.util.Randomness: total calls to random: 1407
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 1408
randoop.util.Randomness: total calls to random: 1409
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
java.lang.String var7 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.PrimValue, value=hi! [var7]  : true

allSequences.size()=304
-------------------------------------------
randoop.util.Randomness: total calls to random: 1410
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 1411
randoop.util.Randomness: total calls to random: 1412
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1413
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 1414
randoop.util.Randomness: total calls to random: 1415
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1416
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 1417
randoop.util.Randomness: total calls to random: 1418
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 438 sequences.
components: 438
randoop.util.Randomness: total calls to random: 1419
randoop.util.Randomness: total calls to random: 1420
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var13 =  prim : char:23 : 
var14 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var11 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
java.lang.Character var13 = new java.lang.Character('#');
// <NormalExecution object=object-of-type-java.lang.Character>;
boolean var14 = var11.remove((java.lang.Object)'#');
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=false [var14]  : true

allSequences.size()=305
-------------------------------------------
randoop.util.Randomness: total calls to random: 1421
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 1422
randoop.util.Randomness: total calls to random: 1423
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 439 sequences.
components: 439
randoop.util.Randomness: total calls to random: 1424
randoop.util.Randomness: total calls to random: 1425
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var15 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var16 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var15 
var17 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 
var19 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.countObservers() : var19 
var21 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var16 var20 
var22 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var23 =  prim : java.lang.String:"hi!" : 
var24 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var22 var23 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  prim : java.lang.String:"hi!" : 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var25 var26 
var28 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var29 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var22 var25 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var22 
var31 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var16 var22 
var32 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var14 var16 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var15 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var16 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var15);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var16.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var18 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var19 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var20 = var19.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var21 = var16.remove((java.lang.Object)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var22 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var23 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var22.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var26 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var25.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var28 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var29 = var22.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var30 = var22.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var16.notifyObservers((java.lang.Object)var22);
// <NormalExecution object=null>;
boolean var32 = var14.add((java.lang.Object)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.PrimValue, value=true [var32]  : true

allSequences.size()=306
-------------------------------------------
randoop.util.Randomness: total calls to random: 1426
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 1427
randoop.util.Randomness: total calls to random: 1428
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 241 sequences.
components: 241
randoop.util.Randomness: total calls to random: 1429
randoop.util.Randomness: total calls to random: 1430
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.main.Main.<init>() : 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  prim : java.lang.String:"cep" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var3 var5 
var7 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var2 var3 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.main.Main var2 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setAddress("cep");
// <NormalExecution object=null>;
var2.setEmp(var3);
// <NormalExecution object=null>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=307
-------------------------------------------
randoop.util.Randomness: total calls to random: 1431
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 229 sequences.
components: 229
randoop.util.Randomness: total calls to random: 1432
randoop.util.Randomness: total calls to random: 1433
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var9 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=false [var9]  : true

allSequences.size()=308
-------------------------------------------
randoop.util.Randomness: total calls to random: 1434
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 1435
randoop.util.Randomness: total calls to random: 1436
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1437
randoop.util.Randomness: total calls to random: 1438
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true

allSequences.size()=309
-------------------------------------------
randoop.util.Randomness: total calls to random: 1439
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 1440
randoop.util.Randomness: total calls to random: 1441
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 99 sequences.
components: 99
randoop.util.Randomness: total calls to random: 1442
randoop.util.Randomness: total calls to random: 1443
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getEmp() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var9 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var8 
var10 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var11 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var12 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var12 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var12 
var17 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var7 var12 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var21 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var19 var20 
var22 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var23 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var24 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var27 
var29 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var27 
var30 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var27 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var27 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var24 var27 
var33 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var19 var27 
var34 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var18 var27 
var35 =  method : org.softlang.main.Main.getEmp() : var18 
var36 =  prim : double:100.0 : 
var37 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var7 var35 var36 
var38 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var35 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 active.
Making index 21 inactive (value is null)
Making index 22 active.
Making index 23 active.
Making index 24 active.
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is null)
Making index 38 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var8 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var8);
// <NormalExecution object=null>;
org.softlang.company.Company var10 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var11 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var14 = var12.getParent();
// <NormalExecution object=null>;
java.lang.String var15 = var12.getAddress();
// <NormalExecution object=null>;
double var16 = var12.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setEmp(var12);
// <NormalExecution object=null>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var20 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var19.createSampleCompany((org.softlang.company.factory.Factory)var20);
// <NormalExecution object=null>;
org.softlang.company.Company var22 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var23 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var24 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var25 = var24.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var27 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var28 = var27.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var29 = var27.getParent();
// <NormalExecution object=null>;
java.lang.String var30 = var27.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var31 = var27.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var24.remove((org.softlang.company.Subunit)var27);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var33 = var19.getSalary(var27);
// <NormalExecution object=object-of-type-java.lang.Double>;
var18.setEmp(var27);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var35 = var18.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var36 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(var35, 100.0d);
// <NormalExecution object=null>;
var0.setEmp(var35);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.IsNotNull@1f [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.IsNull@25 [var15]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.IsNotNull@1f [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=false [var28]  : true
<randoop.IsNull@25 [var29]  : true
<randoop.PrimValue, value=cep [var30]  : true
<randoop.PrimValue, value=0.0 [var31]  : true
<randoop.PrimValue, value=false [var32]  : true
<randoop.PrimValue, value=0.0 [var33]  : true
<randoop.IsNotNull@1f [var35]  : true

allSequences.size()=310
-------------------------------------------
randoop.util.Randomness: total calls to random: 1444
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1445
randoop.util.Randomness: total calls to random: 1446
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 246 sequences.
components: 246
randoop.util.Randomness: total calls to random: 1447
randoop.util.Randomness: total calls to random: 1448
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var3 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var10 
var12 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var7 var8 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var13 
var15 =  prim : double:10.0 : 
var16 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var7 var13 var15 
var17 =  method : java.util.Observable.notifyObservers() : var13 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var13 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var13 
var20 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var13 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var1 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var6 = var3.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("cep");
// <NormalExecution object=null>;
var7.setEmp(var8);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var14 = var13.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var15 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(var13, 10.0d);
// <NormalExecution object=null>;
var13.notifyObservers();
// <NormalExecution object=null>;
boolean var18 = var3.add((org.softlang.company.Subunit)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var19 = var13.getAddress();
// <NormalExecution object=null>;
boolean var20 = var0.add((org.softlang.company.Subunit)var13);
// <ExceptionalExecution, exception type=java.lang.IllegalArgumentException>;
<randoop.PrimValue, value=hi! [var6]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.IsNull@25 [var19]  : true
// throws exception of type java.lang.IllegalArgumentException
 : true

allSequences.size()=311
-------------------------------------------
randoop.util.Randomness: total calls to random: 1449
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 1450
randoop.util.Randomness: total calls to random: 1451
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1452
randoop.util.Randomness: total calls to random: 1453
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var2.getAddress();
// <NormalExecution object=null>;
java.lang.String var7 = var2.getAddress();
// <NormalExecution object=null>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=312
-------------------------------------------
randoop.util.Randomness: total calls to random: 1454
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 1455
randoop.util.Randomness: total calls to random: 1456
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var3 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var2 = var0.getManager();
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=313
-------------------------------------------
randoop.util.Randomness: total calls to random: 1457
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 1458
randoop.util.Randomness: total calls to random: 1459
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1460
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1461
randoop.util.Randomness: total calls to random: 1462
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var35 =  prim : java.lang.String:"" : 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var35 
var37 =  method : java.util.Observable.notifyObservers() : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Making index 37 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
java.lang.String var34 = var8.getName();
// <NormalExecution object=null>;
java.lang.String var35 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("");
// <NormalExecution object=null>;
var8.notifyObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var34]  : true

allSequences.size()=314
-------------------------------------------
randoop.util.Randomness: total calls to random: 1463
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 233 sequences.
components: 233
randoop.util.Randomness: total calls to random: 1464
randoop.util.Randomness: total calls to random: 1465
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  prim : float:-1.0 : 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var7 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var12 
var15 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var15 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var15 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var15 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var20 =  prim : double:1.0 : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var15 var20 
var22 =  method : java.util.Observable.countObservers() : var15 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var24 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var15 
var25 =  method : java.util.Observable.notifyObservers() : var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var9 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var10 = var7.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var7);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var13 = var11.add((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var15 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var16 = var15.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var17 = var15.getParent();
// <NormalExecution object=null>;
java.lang.String var18 = var15.getAddress();
// <NormalExecution object=null>;
double var19 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var20 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(1.0d);
// <NormalExecution object=null>;
int var22 = var15.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
double var23 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var15);
// <NormalExecution object=null>;
var15.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=1.0 [var23]  : true

allSequences.size()=315
-------------------------------------------
randoop.util.Randomness: total calls to random: 1466
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1467
randoop.util.Randomness: total calls to random: 1468
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var4 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=316
-------------------------------------------
randoop.util.Randomness: total calls to random: 1469
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 1470
randoop.util.Randomness: total calls to random: 1471
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 251 sequences.
components: 251
randoop.util.Randomness: total calls to random: 1472
randoop.util.Randomness: total calls to random: 1473
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var9 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var13 =  prim : char:61 : 
var14 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var9 var13 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var9 
var16 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var17 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var17 
var19 =  prim : boolean:false : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var17 var19 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var17 
var22 =  prim : boolean:true : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var17 var22 
var24 =  prim : java.lang.String:"cep" : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var17 var24 
var26 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var17 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var9.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var13 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var9.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
boolean var15 = var0.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var16 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var18 = var17.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var19 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var17.setManager(false);
// <NormalExecution object=null>;
java.lang.String var21 = var17.getName();
// <NormalExecution object=null>;
java.lang.Boolean var22 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var17.setManager(true);
// <NormalExecution object=null>;
java.lang.String var24 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var17.setName("cep");
// <NormalExecution object=null>;
boolean var26 = var0.remove((org.softlang.company.Subunit)var17);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.IsNull@25 [var16]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=false [var26]  : true

allSequences.size()=317
-------------------------------------------
randoop.util.Randomness: total calls to random: 1474
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 103 sequences.
components: 103
randoop.util.Randomness: total calls to random: 1475
randoop.util.Randomness: total calls to random: 1476
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
double var15 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=0.0 [var15]  : true

allSequences.size()=318
-------------------------------------------
randoop.util.Randomness: total calls to random: 1477
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 84 sequences.
components: 84
randoop.util.Randomness: total calls to random: 1478
randoop.util.Randomness: total calls to random: 1479
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1480
randoop.util.Randomness: total calls to random: 1481
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 
var8 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var10 var13 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var16 
var18 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var13 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var13 
var20 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var21 =  prim : java.lang.String:"hi!" : 
var22 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var20 var21 
var23 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var24 =  prim : java.lang.String:"hi!" : 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var24 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var27 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var20 var23 
var28 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var29 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var23 var28 
var30 =  prim : java.lang.String:"cep" : 
var31 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var30 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var13 var23 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 active.
Making index 29 inactive (value is null)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var8 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var6.setSampleCompany((org.softlang.company.Company)var8);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var10.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var20 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var21 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var20.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var23 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var24 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var26 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var27 = var20.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var28 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var23.notifyObservers((java.lang.Object)var28);
// <NormalExecution object=null>;
java.lang.String var30 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("cep");
// <NormalExecution object=null>;
java.lang.Iterable var32 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var33 = var13.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var26]  : true
<randoop.PrimValue, value=true [var27]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.PrimValue, value=true [var33]  : true

allSequences.size()=319
-------------------------------------------
randoop.util.Randomness: total calls to random: 1482
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 1483
randoop.util.Randomness: total calls to random: 1484
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=hi! [var8]  : true

allSequences.size()=320
-------------------------------------------
randoop.util.Randomness: total calls to random: 1485
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 1486
randoop.util.Randomness: total calls to random: 1487
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 1488
randoop.util.Randomness: total calls to random: 1489
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var13 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var12 
var14 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var13 
var15 =  prim : float:-1.0 : 
var16 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var13 var15 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var13 
var18 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var19 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var17 var18 
var20 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var6 var18 
var21 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var12 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var13 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var12);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var13.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var15 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var16 = var13.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var13);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var18 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var19 = var17.add((java.lang.Object)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var16]  : true
<randoop.PrimValue, value=true [var19]  : true

allSequences.size()=321
-------------------------------------------
randoop.util.Randomness: total calls to random: 1490
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 1491
randoop.util.Randomness: total calls to random: 1492
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var8]  : true

allSequences.size()=322
-------------------------------------------
randoop.util.Randomness: total calls to random: 1493
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 1494
randoop.util.Randomness: total calls to random: 1495
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var6 var12 
var17 =  prim : double:-1.0 : 
var18 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var12 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
double var16 = var6.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var17 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var12, (-1.0d));
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.IsNotNull@1f [var19]  : true

allSequences.size()=323
-------------------------------------------
randoop.util.Randomness: total calls to random: 1496
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 104 sequences.
components: 104
randoop.util.Randomness: total calls to random: 1497
randoop.util.Randomness: total calls to random: 1498
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1499
randoop.util.Randomness: total calls to random: 1500
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  method : java.util.Observable.notifyObservers() : var6 
var11 =  prim : boolean:true : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
var6.notifyObservers();
// <NormalExecution object=null>;
java.lang.Boolean var11 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(true);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true

allSequences.size()=324
-------------------------------------------
randoop.util.Randomness: total calls to random: 1501
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 1502
randoop.util.Randomness: total calls to random: 1503
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 
var25 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var25 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.IsNull@25 [var25]  : true

allSequences.size()=325
-------------------------------------------
randoop.util.Randomness: total calls to random: 1504
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 1505
randoop.util.Randomness: total calls to random: 1506
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1507
randoop.util.Randomness: total calls to random: 1508
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;

allSequences.size()=326
-------------------------------------------
randoop.util.Randomness: total calls to random: 1509
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 1510
randoop.util.Randomness: total calls to random: 1511
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1512
randoop.util.Randomness: total calls to random: 1513
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var10 
var12 =  method : java.util.Observable.hasChanged() : var8 
var13 =  prim : java.lang.String:"cep" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var8 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var8 
var18 =  prim : boolean:true : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var8 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("cep");
// <NormalExecution object=null>;
boolean var12 = var8.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("cep");
// <NormalExecution object=null>;
java.lang.String var15 = var8.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setEmp(var8);
// <NormalExecution object=null>;
java.lang.String var17 = var8.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var18 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var8.setManager(true);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var15]  : true
<randoop.PrimValue, value=cep [var17]  : true

allSequences.size()=327
-------------------------------------------
randoop.util.Randomness: total calls to random: 1514
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 1515
randoop.util.Randomness: total calls to random: 1516
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var7 var8 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var11 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var7 var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var7 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var7 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var18 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var7 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var13 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var14 = var7.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var15 = var7.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var1.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var14]  : true
<randoop.IsNotNull@1f [var15]  : true

allSequences.size()=328
-------------------------------------------
randoop.util.Randomness: total calls to random: 1517
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 1518
randoop.util.Randomness: total calls to random: 1519
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 1520
randoop.util.Randomness: total calls to random: 1521
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 
var31 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var32 =  prim : java.lang.String:"" : 
var33 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var31 var32 
var34 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 active.
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var31 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var32 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true

allSequences.size()=329
-------------------------------------------
randoop.util.Randomness: total calls to random: 1522
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 1523
randoop.util.Randomness: total calls to random: 1524
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 471 sequences.
components: 471
randoop.util.Randomness: total calls to random: 1525
randoop.util.Randomness: total calls to random: 1526
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var15 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var16 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var15 
var17 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 
var19 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.countObservers() : var19 
var21 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var16 var20 
var22 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var23 =  prim : java.lang.String:"hi!" : 
var24 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var22 var23 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  prim : java.lang.String:"hi!" : 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var25 var26 
var28 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var29 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var22 var25 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var22 
var31 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var16 var22 
var32 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var14 var16 
var33 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var34 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var33 
var35 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var34 
var36 =  method : org.softlang.util.ObservableSimpleList.iterator() : var34 
var37 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var34 
var38 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var39 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var38 
var40 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var39 
var41 =  method : org.softlang.util.ObservableSimpleList.iterator() : var39 
var42 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var39 
var43 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var37 var42 
var44 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var42 
var45 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var44 
var46 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var14 var44 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 active.
Making index 34 active.
Making index 35 inactive (value is null)
Making index 36 active.
Making index 37 active.
Making index 38 active.
Making index 39 active.
Making index 40 inactive (value is null)
Making index 41 active.
Making index 42 active.
Making index 43 inactive (value is a primitive)
Making index 44 active.
Making index 45 inactive (value is null)
Making index 46 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var15 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var16 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var15);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var16.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var18 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var19 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var20 = var19.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var21 = var16.remove((java.lang.Object)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var22 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var23 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var22.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var26 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var25.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var28 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var29 = var22.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var30 = var22.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var16.notifyObservers((java.lang.Object)var22);
// <NormalExecution object=null>;
boolean var32 = var14.add((java.lang.Object)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.SimpleLinkedList var33 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var34 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var33);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var34.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var36 = var34.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var37 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var34);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var38 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var39 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var38);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var39.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var41 = var39.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var42 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var39);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var43 = var37.add((java.lang.Object)var42);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var44 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var42);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var44.deleteObservers();
// <NormalExecution object=null>;
boolean var46 = var14.remove((java.lang.Object)var44);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.PrimValue, value=true [var32]  : true
<randoop.IsNotNull@1f [var36]  : true
<randoop.IsNotNull@1f [var41]  : true
<randoop.PrimValue, value=true [var43]  : true
<randoop.PrimValue, value=false [var46]  : true

allSequences.size()=330
-------------------------------------------
randoop.util.Randomness: total calls to random: 1527
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 1528
randoop.util.Randomness: total calls to random: 1529
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=331
-------------------------------------------
randoop.util.Randomness: total calls to random: 1530
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 1531
randoop.util.Randomness: total calls to random: 1532
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 106 sequences.
components: 106
randoop.util.Randomness: total calls to random: 1533
randoop.util.Randomness: total calls to random: 1534
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var4 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var12 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var12 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var12 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var9 var12 
var18 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
double var8 = var0.getSalary(var4);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var10 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var14 = var12.getParent();
// <NormalExecution object=null>;
java.lang.String var15 = var12.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var16 = var12.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var9.remove((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var18 = var0.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=0.0 [var8]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.PrimValue, value=cep [var15]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.PrimValue, value=false [var17]  : true
<randoop.PrimValue, value=0.0 [var18]  : true

allSequences.size()=332
-------------------------------------------
randoop.util.Randomness: total calls to random: 1535
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 1536
randoop.util.Randomness: total calls to random: 1537
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1538
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 1539
randoop.util.Randomness: total calls to random: 1540
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var4 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=333
-------------------------------------------
randoop.util.Randomness: total calls to random: 1541
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 1542
randoop.util.Randomness: total calls to random: 1543
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1544
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 1545
randoop.util.Randomness: total calls to random: 1546
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1547
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1548
randoop.util.Randomness: total calls to random: 1549
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var9 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var10 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var11 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var10 
var12 =  method : org.softlang.util.ObservableSimpleList.iterator() : var10 
var13 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var10 
var14 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var15 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var13 var14 
var16 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var14 
var17 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
org.softlang.util.SimpleLinkedList var9 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var10 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var10.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var12 = var10.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var13 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var10);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var14 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var15 = var13.remove((java.lang.Object)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var16 = var0.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var17 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNotNull@1f [var17]  : true

allSequences.size()=334
-------------------------------------------
randoop.util.Randomness: total calls to random: 1550
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 1551
randoop.util.Randomness: total calls to random: 1552
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1553
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 1554
randoop.util.Randomness: total calls to random: 1555
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var6 var11 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
double var13 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.PrimValue, value=0.0 [var13]  : true

allSequences.size()=335
-------------------------------------------
randoop.util.Randomness: total calls to random: 1556
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 1557
randoop.util.Randomness: total calls to random: 1558
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1559
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 1560
randoop.util.Randomness: total calls to random: 1561
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true

allSequences.size()=336
-------------------------------------------
randoop.util.Randomness: total calls to random: 1562
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 1563
randoop.util.Randomness: total calls to random: 1564
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 265 sequences.
components: 265
randoop.util.Randomness: total calls to random: 1565
randoop.util.Randomness: total calls to random: 1566
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  prim : boolean:false : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var3 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var7 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var3 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var6 = var5.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var7 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var5.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
java.lang.String var9 = var5.getName();
// <NormalExecution object=null>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=337
-------------------------------------------
randoop.util.Randomness: total calls to random: 1567
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 1568
randoop.util.Randomness: total calls to random: 1569
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1570
randoop.util.Randomness: total calls to random: 1571
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
java.lang.Iterable var2 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var3.getManager();
// <NormalExecution object=null>;
boolean var7 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var2]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=338
-------------------------------------------
randoop.util.Randomness: total calls to random: 1572
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 1573
randoop.util.Randomness: total calls to random: 1574
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1575
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 88 sequences.
components: 88
randoop.util.Randomness: total calls to random: 1576
randoop.util.Randomness: total calls to random: 1577
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1578
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 1579
randoop.util.Randomness: total calls to random: 1580
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1581
randoop.util.Randomness: total calls to random: 1582
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var9 =  prim : double:1.0 : 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var9 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var8]  : true

allSequences.size()=339
-------------------------------------------
randoop.util.Randomness: total calls to random: 1583
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 1584
randoop.util.Randomness: total calls to random: 1585
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var6 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=340
-------------------------------------------
randoop.util.Randomness: total calls to random: 1586
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 1587
randoop.util.Randomness: total calls to random: 1588
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 1589
randoop.util.Randomness: total calls to random: 1590
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1591
randoop.util.Randomness: total calls to random: 1592
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  prim : float:-1.0 : 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var7 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var12 
var15 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var15 
var17 =  prim : boolean:false : 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var15 var17 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var15 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var15 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var22 =  prim : double:10.0 : 
var23 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var15 var22 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var9 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var10 = var7.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var7);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var13 = var11.add((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var15 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var16 = var15.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var17 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var15.setManager(false);
// <NormalExecution object=null>;
java.lang.String var19 = var15.getAddress();
// <NormalExecution object=null>;
java.lang.String var20 = var15.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var21 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var22 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var15, 10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=cep [var20]  : true
<randoop.PrimValue, value=0.0 [var21]  : true

allSequences.size()=341
-------------------------------------------
randoop.util.Randomness: total calls to random: 1593
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 1594
randoop.util.Randomness: total calls to random: 1595
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 
var15 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var15 = new org.softlang.util.RemoveFromList((java.lang.Object)"");
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=342
-------------------------------------------
randoop.util.Randomness: total calls to random: 1596
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 88 sequences.
components: 88
randoop.util.Randomness: total calls to random: 1597
randoop.util.Randomness: total calls to random: 1598
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1599
randoop.util.Randomness: total calls to random: 1600
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var10 
var12 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var12 var13 
var15 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var15 var16 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var15 
var19 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var12 var15 
var20 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var12 
var21 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var12 

Making all indices inactive (exception thrown, or failure revealed during execution).
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var12 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var12.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var15 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var15.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var18 = var15.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var19 = var12.add((org.softlang.company.Subunit)var15);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var20 = var12.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var21 = var3.remove((org.softlang.company.Subunit)var12);
// <ExceptionalExecution, exception type=java.lang.ClassCastException>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=hi! [var20]  : true
// throws exception of type java.lang.ClassCastException
 : true

allSequences.size()=343
-------------------------------------------
randoop.util.Randomness: total calls to random: 1601
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 198 sequences.
components: 198
randoop.util.Randomness: total calls to random: 1602
randoop.util.Randomness: total calls to random: 1603
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var7 var13 
var15 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setManager(false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var15 = var7.getParent();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.IsNull@25 [var15]  : true

allSequences.size()=344
-------------------------------------------
randoop.util.Randomness: total calls to random: 1604
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 1605
randoop.util.Randomness: total calls to random: 1606
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 1607
randoop.util.Randomness: total calls to random: 1608
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1609
randoop.util.Randomness: total calls to random: 1610
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var16 
var18 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var16 var18 
var20 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var15 var18 
var21 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var22 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var21 
var23 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var22 
var24 =  prim : float:-1.0 : 
var25 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var22 var24 
var26 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var22 
var27 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var28 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var26 var27 
var29 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var15 var27 
var30 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var30 
var32 =  prim : boolean:false : 
var33 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var30 var32 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var30 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var30 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var30 
var37 =  prim : double:10.0 : 
var38 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var15 var30 var37 
var39 =  prim : double:100.0 : 
var40 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var30 var39 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 active.
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is null)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var17 = new org.softlang.util.AddToList((java.lang.Object)var16);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var18 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var16.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
var15.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var21 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var22 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var21);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var22.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var24 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var25 = var22.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var26 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var22);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var27 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var28 = var26.add((java.lang.Object)var27);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var15.createSampleCompany((org.softlang.company.factory.Factory)var27);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var30 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var31 = var30.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var32 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var30.setManager(false);
// <NormalExecution object=null>;
java.lang.String var34 = var30.getAddress();
// <NormalExecution object=null>;
java.lang.String var35 = var30.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var36 = var30.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var37 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(var30, 10.0d);
// <NormalExecution object=null>;
java.lang.Double var39 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var30, 100.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=true [var28]  : true
<randoop.PrimValue, value=false [var31]  : true
<randoop.IsNull@25 [var34]  : true
<randoop.PrimValue, value=cep [var35]  : true
<randoop.PrimValue, value=0.0 [var36]  : true

allSequences.size()=345
-------------------------------------------
randoop.util.Randomness: total calls to random: 1611
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 112 sequences.
components: 112
randoop.util.Randomness: total calls to random: 1612
randoop.util.Randomness: total calls to random: 1613
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getEmp() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var9 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var8 
var10 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var11 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var12 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var12 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var12 
var17 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var7 var12 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var21 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var19 var20 
var22 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var23 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var24 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var27 
var29 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var27 
var30 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var27 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var27 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var24 var27 
var33 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var19 var27 
var34 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var18 var27 
var35 =  method : org.softlang.main.Main.getEmp() : var18 
var36 =  prim : double:100.0 : 
var37 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var7 var35 var36 
var38 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var35 
var39 =  method : java.util.Observable.deleteObservers() : var35 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 active.
Making index 21 inactive (value is null)
Making index 22 active.
Making index 23 active.
Making index 24 active.
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is null)
Making index 38 inactive (value is null)
Making index 39 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var8 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var8);
// <NormalExecution object=null>;
org.softlang.company.Company var10 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var11 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var14 = var12.getParent();
// <NormalExecution object=null>;
java.lang.String var15 = var12.getAddress();
// <NormalExecution object=null>;
double var16 = var12.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setEmp(var12);
// <NormalExecution object=null>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var20 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var19.createSampleCompany((org.softlang.company.factory.Factory)var20);
// <NormalExecution object=null>;
org.softlang.company.Company var22 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var23 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var24 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var25 = var24.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var27 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var28 = var27.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var29 = var27.getParent();
// <NormalExecution object=null>;
java.lang.String var30 = var27.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var31 = var27.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var32 = var24.remove((org.softlang.company.Subunit)var27);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var33 = var19.getSalary(var27);
// <NormalExecution object=object-of-type-java.lang.Double>;
var18.setEmp(var27);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var35 = var18.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var36 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(var35, 100.0d);
// <NormalExecution object=null>;
var0.setEmp(var35);
// <NormalExecution object=null>;
var35.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.IsNotNull@1f [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.IsNull@25 [var15]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.IsNotNull@1f [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=false [var28]  : true
<randoop.IsNull@25 [var29]  : true
<randoop.PrimValue, value=cep [var30]  : true
<randoop.PrimValue, value=0.0 [var31]  : true
<randoop.PrimValue, value=false [var32]  : true
<randoop.PrimValue, value=0.0 [var33]  : true
<randoop.IsNotNull@1f [var35]  : true

allSequences.size()=346
-------------------------------------------
randoop.util.Randomness: total calls to random: 1614
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 1615
randoop.util.Randomness: total calls to random: 1616
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=347
-------------------------------------------
randoop.util.Randomness: total calls to random: 1617
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 1618
randoop.util.Randomness: total calls to random: 1619
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var1 var6 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var8 = var1.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=cep [var8]  : true

allSequences.size()=348
-------------------------------------------
randoop.util.Randomness: total calls to random: 1620
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 1621
randoop.util.Randomness: total calls to random: 1622
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
java.lang.String var6 = var1.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=349
-------------------------------------------
randoop.util.Randomness: total calls to random: 1623
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1624
randoop.util.Randomness: total calls to random: 1625
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 
var9 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var9 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var9]  : true

allSequences.size()=350
-------------------------------------------
randoop.util.Randomness: total calls to random: 1626
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 115 sequences.
components: 115
randoop.util.Randomness: total calls to random: 1627
randoop.util.Randomness: total calls to random: 1628
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1629
randoop.util.Randomness: total calls to random: 1630
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  prim : boolean:false : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
java.lang.Boolean var4 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=351
-------------------------------------------
randoop.util.Randomness: total calls to random: 1631
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 116 sequences.
components: 116
randoop.util.Randomness: total calls to random: 1632
randoop.util.Randomness: total calls to random: 1633
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var7 var13 
var15 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.setManager(false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var15 = var7.getParent();
// <NormalExecution object=null>;
boolean var16 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.IsNull@25 [var15]  : true
<randoop.PrimValue, value=false [var16]  : true

allSequences.size()=352
-------------------------------------------
randoop.util.Randomness: total calls to random: 1634
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 117 sequences.
components: 117
randoop.util.Randomness: total calls to random: 1635
randoop.util.Randomness: total calls to random: 1636
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var9 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var10 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.PrimValue, value=false [var10]  : true

allSequences.size()=353
-------------------------------------------
randoop.util.Randomness: total calls to random: 1637
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1638
randoop.util.Randomness: total calls to random: 1639
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1640
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 503 sequences.
components: 503
randoop.util.Randomness: total calls to random: 1641
randoop.util.Randomness: total calls to random: 1642
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.AddToList var5 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=354
-------------------------------------------
randoop.util.Randomness: total calls to random: 1643
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 1644
randoop.util.Randomness: total calls to random: 1645
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1646
randoop.util.Randomness: total calls to random: 1647
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : double:0.0 : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var8 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=355
-------------------------------------------
randoop.util.Randomness: total calls to random: 1648
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 261 sequences.
components: 261
randoop.util.Randomness: total calls to random: 1649
randoop.util.Randomness: total calls to random: 1650
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var11 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var11 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var11 
var15 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var3 var11 
var16 =  method : java.util.Observable.countObservers() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
java.lang.Iterable var10 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var12 = var11.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = var11.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var14 = var11.getName();
// <NormalExecution object=null>;
boolean var15 = var3.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
int var16 = var3.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=356
-------------------------------------------
randoop.util.Randomness: total calls to random: 1651
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 1652
randoop.util.Randomness: total calls to random: 1653
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var16 =  method : java.util.Observable.deleteObservers() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
double var15 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=0.0 [var15]  : true

allSequences.size()=357
-------------------------------------------
randoop.util.Randomness: total calls to random: 1654
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 1655
randoop.util.Randomness: total calls to random: 1656
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 1657
randoop.util.Randomness: total calls to random: 1658
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var16 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var11 var15 
var17 =  method : org.softlang.main.Main.getSampleCompany() : var11 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var18 
var20 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var21 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var18 var20 
var22 =  cons : org.softlang.main.Main.<init>() : 
var23 =  cons : org.softlang.main.Main.<init>() : 
var24 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var23 
var25 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var26 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var23 var25 
var27 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var22 var25 
var28 =  prim : java.lang.String:"hi!" : 
var29 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var25 var28 
var30 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var18 var25 
var31 =  cons : org.softlang.main.Main.<init>() : 
var32 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var33 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var31 var32 
var34 =  method : org.softlang.main.Main.getSampleCompany() : var31 
var35 =  method : org.softlang.main.Main.getSampleCompany() : var31 
var36 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var37 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var36 
var38 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var36 
var39 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var40 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var39 
var41 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var39 
var42 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var39 
var43 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var39 
var44 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var36 var39 
var45 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var31 var39 
var46 =  cons : org.softlang.main.Main.<init>() : 
var47 =  cons : org.softlang.main.Main.<init>() : 
var48 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var49 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var47 var48 
var50 =  method : org.softlang.main.Main.getSampleCompany() : var47 
var51 =  method : org.softlang.main.Main.getSampleCompany() : var47 
var52 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var53 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var52 
var54 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var52 
var55 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var56 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var55 
var57 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var55 
var58 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var55 
var59 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var55 
var60 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var52 var55 
var61 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var47 var55 
var62 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var46 var55 
var63 =  method : org.softlang.main.Main.getEmp() : var46 
var64 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var39 var46 
var65 =  prim : double:10.0 : 
var66 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var18 var39 var65 
var67 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var68 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var18 var67 
var69 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var11 var67 
var70 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var67 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 55
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 55
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 55, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 55, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 55, 55
Contract returned true.
Checking contract class randoop.EqualsHashcode on 55, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 55
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 55
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 55
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 55, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 55, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 55, 55
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 55, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 55
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 53
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 53, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 53
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 53, 53
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 active.
Making index 20 active.
Making index 21 inactive (value is null)
Making index 22 active.
Making index 23 active.
Making index 24 active.
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 inactive (value is null)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 inactive (value is null)
Making index 31 active.
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 active.
Making index 36 active.
Making index 37 active.
Making index 38 inactive (value is null)
Making index 39 active.
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is null)
Making index 42 inactive (value is a primitive)
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is a primitive)
Making index 45 inactive (value is a primitive)
Making index 46 active.
Making index 47 active.
Making index 48 active.
Making index 49 inactive (value is null)
Making index 50 active.
Making index 51 active.
Making index 52 active.
Making index 53 active.
Making index 54 inactive (value is null)
Making index 55 active.
Making index 56 inactive (value is a primitive)
Making index 57 inactive (value is null)
Making index 58 inactive (value is a primitive)
Making index 59 inactive (value is a primitive)
Making index 60 inactive (value is a primitive)
Making index 61 inactive (value is a primitive)
Making index 62 inactive (value is null)
Making index 63 active.
Making index 64 inactive (value is null)
Making index 65 inactive (value is a primitive)
Making index 66 inactive (value is null)
Making index 67 active.
Making index 68 inactive (value is null)
Making index 69 inactive (value is null)
Making index 70 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var15 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var11.createSampleCompany((org.softlang.company.factory.Factory)var15);
// <NormalExecution object=null>;
org.softlang.company.Company var17 = var11.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var19 = new org.softlang.util.AddToList((java.lang.Object)var18);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var20 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var18.setSampleCompany((org.softlang.company.Company)var20);
// <NormalExecution object=null>;
org.softlang.main.Main var22 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var23 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var24 = new org.softlang.util.AddToList((java.lang.Object)var23);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var25 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var23.setSampleCompany((org.softlang.company.Company)var25);
// <NormalExecution object=null>;
var22.setSampleCompany((org.softlang.company.Company)var25);
// <NormalExecution object=null>;
java.lang.String var28 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var25.setName("hi!");
// <NormalExecution object=null>;
var18.setSampleCompany((org.softlang.company.Company)var25);
// <NormalExecution object=null>;
org.softlang.main.Main var31 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var32 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var31.createSampleCompany((org.softlang.company.factory.Factory)var32);
// <NormalExecution object=null>;
org.softlang.company.Company var34 = var31.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var35 = var31.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var36 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var37 = var36.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var38 = var36.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var39 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var40 = var39.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var41 = var39.getParent();
// <NormalExecution object=null>;
java.lang.String var42 = var39.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var43 = var39.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var44 = var36.remove((org.softlang.company.Subunit)var39);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var45 = var31.getSalary(var39);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var46 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var47 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var48 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var47.createSampleCompany((org.softlang.company.factory.Factory)var48);
// <NormalExecution object=null>;
org.softlang.company.Company var50 = var47.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var51 = var47.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var52 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var53 = var52.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var54 = var52.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var55 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var56 = var55.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var57 = var55.getParent();
// <NormalExecution object=null>;
java.lang.String var58 = var55.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var59 = var55.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var60 = var52.remove((org.softlang.company.Subunit)var55);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var61 = var47.getSalary(var55);
// <NormalExecution object=object-of-type-java.lang.Double>;
var46.setEmp(var55);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var63 = var46.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var39.notifyObservers((java.lang.Object)var46);
// <NormalExecution object=null>;
java.lang.Double var65 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var18.setSalary(var39, 10.0d);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var67 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var18.createSampleCompany((org.softlang.company.factory.Factory)var67);
// <NormalExecution object=null>;
var11.createSampleCompany((org.softlang.company.factory.Factory)var67);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var67);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.IsNotNull@1f [var34]  : true
<randoop.IsNotNull@1f [var35]  : true
<randoop.IsNotNull@1f [var37]  : true
<randoop.IsNull@25 [var38]  : true
<randoop.PrimValue, value=false [var40]  : true
<randoop.IsNull@25 [var41]  : true
<randoop.PrimValue, value=cep [var42]  : true
<randoop.PrimValue, value=0.0 [var43]  : true
<randoop.PrimValue, value=false [var44]  : true
<randoop.PrimValue, value=0.0 [var45]  : true
<randoop.IsNotNull@1f [var50]  : true
<randoop.IsNotNull@1f [var51]  : true
<randoop.IsNotNull@1f [var53]  : true
<randoop.IsNull@25 [var54]  : true
<randoop.PrimValue, value=false [var56]  : true
<randoop.IsNull@25 [var57]  : true
<randoop.PrimValue, value=cep [var58]  : true
<randoop.PrimValue, value=0.0 [var59]  : true
<randoop.PrimValue, value=false [var60]  : true
<randoop.PrimValue, value=0.0 [var61]  : true
<randoop.IsNotNull@1f [var63]  : true

allSequences.size()=358
-------------------------------------------
randoop.util.Randomness: total calls to random: 1659
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 120 sequences.
components: 120
randoop.util.Randomness: total calls to random: 1660
randoop.util.Randomness: total calls to random: 1661
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1662
randoop.util.Randomness: total calls to random: 1663
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  prim : java.lang.String:"" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=359
-------------------------------------------
randoop.util.Randomness: total calls to random: 1664
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 1665
randoop.util.Randomness: total calls to random: 1666
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 1667
randoop.util.Randomness: total calls to random: 1668
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getEmp() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var9 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var8 
var10 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var11 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var12 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var11 
var13 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var8 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var8);
// <NormalExecution object=null>;
org.softlang.company.Company var10 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var11 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNotNull@1f [var10]  : true

allSequences.size()=360
-------------------------------------------
randoop.util.Randomness: total calls to random: 1669
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 1670
randoop.util.Randomness: total calls to random: 1671
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var5 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var4 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
java.util.Iterator var5 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true

allSequences.size()=361
-------------------------------------------
randoop.util.Randomness: total calls to random: 1672
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 121 sequences.
components: 121
randoop.util.Randomness: total calls to random: 1673
randoop.util.Randomness: total calls to random: 1674
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=362
-------------------------------------------
randoop.util.Randomness: total calls to random: 1675
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 89 sequences.
components: 89
randoop.util.Randomness: total calls to random: 1676
randoop.util.Randomness: total calls to random: 1677
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 287 sequences.
components: 287
randoop.util.Randomness: total calls to random: 1678
randoop.util.Randomness: total calls to random: 1679
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.main.Main.<init>() : 
var10 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var9 
var11 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var9 var11 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var9 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var9 
var16 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var16 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var21 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var9 var16 
var22 =  prim : java.lang.String:"" : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var16 var22 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var25 =  method : java.util.Observable.deleteObservers() : var16 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var16 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var9 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var10 = new org.softlang.util.AddToList((java.lang.Object)var9);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var11 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var9.setSampleCompany((org.softlang.company.Company)var11);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var9.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var9.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var16 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var17 = var16.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var18 = var16.getParent();
// <NormalExecution object=null>;
double var19 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var20 = var16.getParent();
// <NormalExecution object=null>;
double var21 = var9.getSalary(var16);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var22 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var16.setAddress("");
// <NormalExecution object=null>;
double var24 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var16.deleteObservers();
// <NormalExecution object=null>;
boolean var26 = var0.add((org.softlang.company.Subunit)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.PrimValue, value=false [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=0.0 [var21]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=true [var26]  : true

allSequences.size()=363
-------------------------------------------
randoop.util.Randomness: total calls to random: 1680
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 1681
randoop.util.Randomness: total calls to random: 1682
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1683
randoop.util.Randomness: total calls to random: 1684
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var9 =  prim : double:1.0 : 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var9 
var11 =  prim : double:-1.0 : 
var12 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var9 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var8]  : true

allSequences.size()=364
-------------------------------------------
randoop.util.Randomness: total calls to random: 1685
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 1686
randoop.util.Randomness: total calls to random: 1687
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 1688
randoop.util.Randomness: total calls to random: 1689
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var11 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var11 var13 
var15 =  method : java.util.Observable.deleteObservers() : var11 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var11 
var17 =  prim : boolean:false : 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var11 var17 
var19 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var12 = var11.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var11.setManager(false);
// <NormalExecution object=null>;
var11.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var16 = var11.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var17 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var11.setManager(false);
// <NormalExecution object=null>;
double var19 = var0.getSalary(var11);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var16]  : true
<randoop.PrimValue, value=0.0 [var19]  : true

allSequences.size()=365
-------------------------------------------
randoop.util.Randomness: total calls to random: 1690
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 1691
randoop.util.Randomness: total calls to random: 1692
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var8 var10 
var12 =  method : java.util.Observable.hasChanged() : var8 
var13 =  prim : java.lang.String:"cep" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var8 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var8 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var17 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setAddress("cep");
// <NormalExecution object=null>;
boolean var12 = var8.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var13 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("cep");
// <NormalExecution object=null>;
java.lang.String var15 = var8.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setEmp(var8);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = var0.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var15]  : true
<randoop.IsNotNull@1f [var17]  : true

allSequences.size()=366
-------------------------------------------
randoop.util.Randomness: total calls to random: 1693
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 215 sequences.
components: 215
randoop.util.Randomness: total calls to random: 1694
randoop.util.Randomness: total calls to random: 1695
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1696
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 1697
randoop.util.Randomness: total calls to random: 1698
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.main.Main.<init>() : 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var8 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var5 var7 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var4 var7 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var7 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var7 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var5 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var7 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var5.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var4.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var7);
// <NormalExecution object=null>;
var7.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=367
-------------------------------------------
randoop.util.Randomness: total calls to random: 1699
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 1700
randoop.util.Randomness: total calls to random: 1701
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var12.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=368
-------------------------------------------
randoop.util.Randomness: total calls to random: 1702
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 1703
randoop.util.Randomness: total calls to random: 1704
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
boolean var10 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var10]  : true

allSequences.size()=369
-------------------------------------------
randoop.util.Randomness: total calls to random: 1705
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 1706
randoop.util.Randomness: total calls to random: 1707
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  method : java.util.Observable.hasChanged() : var3 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var21 = var3.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var22 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNotNull@1f [var22]  : true

allSequences.size()=370
-------------------------------------------
randoop.util.Randomness: total calls to random: 1708
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1709
randoop.util.Randomness: total calls to random: 1710
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1711
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 1712
randoop.util.Randomness: total calls to random: 1713
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 1714
randoop.util.Randomness: total calls to random: 1715
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var12 
var14 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var12 var14 
var16 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var14 
var17 =  prim : java.lang.String:"hi!" : 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var17 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var14 
var20 =  cons : org.softlang.main.Main.<init>() : 
var21 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var22 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var20 var21 
var23 =  method : org.softlang.main.Main.getSampleCompany() : var20 
var24 =  method : org.softlang.main.Main.getSampleCompany() : var20 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var25 
var28 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var29 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var28 
var30 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var28 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var28 
var32 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var28 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var25 var28 
var34 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var20 var28 
var35 =  cons : org.softlang.main.Main.<init>() : 
var36 =  cons : org.softlang.main.Main.<init>() : 
var37 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var38 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var36 var37 
var39 =  method : org.softlang.main.Main.getSampleCompany() : var36 
var40 =  method : org.softlang.main.Main.getSampleCompany() : var36 
var41 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var42 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var41 
var43 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var41 
var44 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var45 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var44 
var46 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var44 
var47 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var44 
var48 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var44 
var49 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var41 var44 
var50 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var36 var44 
var51 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var35 var44 
var52 =  method : org.softlang.main.Main.getEmp() : var35 
var53 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var28 var35 
var54 =  prim : double:10.0 : 
var55 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var7 var28 var54 
var56 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var57 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var56 
var58 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var56 
var59 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var60 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var59 
var61 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var60 
var62 =  method : org.softlang.util.ObservableSimpleList.iterator() : var60 
var63 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var60 
var64 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var65 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var64 
var66 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var65 
var67 =  method : org.softlang.util.ObservableSimpleList.iterator() : var65 
var68 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var65 
var69 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var63 var68 
var70 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var68 
var71 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var68 
var72 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var73 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var72 
var74 =  prim : boolean:false : 
var75 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var72 var74 
var76 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var72 
var77 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var71 var72 
var78 =  cons : org.softlang.main.Main.<init>() : 
var79 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var80 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var78 var79 
var81 =  method : org.softlang.main.Main.getSampleCompany() : var78 
var82 =  method : org.softlang.main.Main.getSampleCompany() : var78 
var83 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var71 var82 
var84 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var82 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 78, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 78
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 78, 78
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 79
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 79
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 79
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 79
Contract returned true.
Checking contract class randoop.EqualsHashcode on 79, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 79, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 79, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 79, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 79, 79
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 79
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 79
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 79
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 79
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 79, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 79, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 79, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 79, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 79, 79
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 81, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 81
Contract returned true.
Checking contract class randoop.EqualsHashcode on 82, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 81, 82
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 81
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 82, 82
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 41
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 72
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 72
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 72
Contract returned true.
Checking contract class randoop.EqualsHashcode on 72, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 72, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 72, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 72, 72
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 72
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 72
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 72
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 72, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 72, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 72, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 72, 72
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 64
Contract returned true.
Checking contract class randoop.EqualsHashcode on 64, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 64, 64
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 64
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 64, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 64, 64
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 63, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 65, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 68, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 70, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 63
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 65
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 68
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 70
Contract returned true.
Checking contract class randoop.EqualsHashcode on 71, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 63, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 65, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 68, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 70, 71
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 63
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 65
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 68
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 70
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 71, 71
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 67
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 67, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 67
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 67, 67
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 active.
Making index 25 active.
Making index 26 active.
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 active.
Making index 36 active.
Making index 37 active.
Making index 38 inactive (value is null)
Making index 39 active.
Making index 40 active.
Making index 41 active.
Making index 42 active.
Making index 43 inactive (value is null)
Making index 44 active.
Making index 45 inactive (value is a primitive)
Making index 46 inactive (value is null)
Making index 47 inactive (value is a primitive)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is a primitive)
Making index 50 inactive (value is a primitive)
Making index 51 inactive (value is null)
Making index 52 active.
Making index 53 inactive (value is null)
Making index 54 inactive (value is a primitive)
Making index 55 inactive (value is null)
Making index 56 active.
Making index 57 inactive (value is null)
Making index 58 inactive (value is null)
Making index 59 active.
Making index 60 active.
Making index 61 inactive (value is null)
Making index 62 active.
Making index 63 active.
Making index 64 active.
Making index 65 active.
Making index 66 inactive (value is null)
Making index 67 active.
Making index 68 active.
Making index 69 inactive (value is a primitive)
Making index 70 active.
Making index 71 active.
Making index 72 active.
Making index 73 inactive (value is a primitive)
Making index 74 inactive (value is a primitive)
Making index 75 inactive (value is null)
Making index 76 inactive (value is null)
Making index 77 inactive (value is a primitive)
Making index 78 active.
Making index 79 active.
Making index 80 inactive (value is null)
Making index 81 active.
Making index 82 active.
Making index 83 inactive (value is a primitive)
Making index 84 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type interface org.softlang.company.Company
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var13 = new org.softlang.util.AddToList((java.lang.Object)var12);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var14 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var12.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
var11.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
java.lang.String var17 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
var7.setSampleCompany((org.softlang.company.Company)var14);
// <NormalExecution object=null>;
org.softlang.main.Main var20 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var21 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var20.createSampleCompany((org.softlang.company.factory.Factory)var21);
// <NormalExecution object=null>;
org.softlang.company.Company var23 = var20.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var24 = var20.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var26 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var27 = var25.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var29 = var28.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var30 = var28.getParent();
// <NormalExecution object=null>;
java.lang.String var31 = var28.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var32 = var28.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var33 = var25.remove((org.softlang.company.Subunit)var28);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var34 = var20.getSalary(var28);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var35 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var36 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var37 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var36.createSampleCompany((org.softlang.company.factory.Factory)var37);
// <NormalExecution object=null>;
org.softlang.company.Company var39 = var36.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var40 = var36.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var41 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var42 = var41.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var43 = var41.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var44 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var45 = var44.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var46 = var44.getParent();
// <NormalExecution object=null>;
java.lang.String var47 = var44.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var48 = var44.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var49 = var41.remove((org.softlang.company.Subunit)var44);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var50 = var36.getSalary(var44);
// <NormalExecution object=object-of-type-java.lang.Double>;
var35.setEmp(var44);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var52 = var35.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var28.notifyObservers((java.lang.Object)var35);
// <NormalExecution object=null>;
java.lang.Double var54 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(var28, 10.0d);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var56 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var56);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var56);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var59 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var60 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var59);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var60.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var62 = var60.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var63 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var60);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var64 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var65 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var64);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var65.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var67 = var65.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var68 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var65);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var69 = var63.add((java.lang.Object)var68);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var70 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var68);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var71 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var68);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var72 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var73 = var72.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var74 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var72.setManager(false);
// <NormalExecution object=null>;
java.lang.String var76 = var72.getAddress();
// <NormalExecution object=null>;
boolean var77 = var71.remove((java.lang.Object)var72);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var78 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var79 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var78.createSampleCompany((org.softlang.company.factory.Factory)var79);
// <NormalExecution object=null>;
org.softlang.company.Company var81 = var78.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var82 = var78.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
boolean var83 = var71.remove((java.lang.Object)var82);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setSampleCompany(var82);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.IsNotNull@1f [var24]  : true
<randoop.IsNotNull@1f [var26]  : true
<randoop.IsNull@25 [var27]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.IsNull@25 [var30]  : true
<randoop.PrimValue, value=cep [var31]  : true
<randoop.PrimValue, value=0.0 [var32]  : true
<randoop.PrimValue, value=false [var33]  : true
<randoop.PrimValue, value=0.0 [var34]  : true
<randoop.IsNotNull@1f [var39]  : true
<randoop.IsNotNull@1f [var40]  : true
<randoop.IsNotNull@1f [var42]  : true
<randoop.IsNull@25 [var43]  : true
<randoop.PrimValue, value=false [var45]  : true
<randoop.IsNull@25 [var46]  : true
<randoop.PrimValue, value=cep [var47]  : true
<randoop.PrimValue, value=0.0 [var48]  : true
<randoop.PrimValue, value=false [var49]  : true
<randoop.PrimValue, value=0.0 [var50]  : true
<randoop.IsNotNull@1f [var52]  : true
<randoop.IsNotNull@1f [var62]  : true
<randoop.IsNotNull@1f [var67]  : true
<randoop.PrimValue, value=true [var69]  : true
<randoop.PrimValue, value=false [var73]  : true
<randoop.IsNull@25 [var76]  : true
<randoop.PrimValue, value=false [var77]  : true
<randoop.IsNotNull@1f [var81]  : true
<randoop.IsNotNull@1f [var82]  : true
<randoop.PrimValue, value=false [var83]  : true

allSequences.size()=371
-------------------------------------------
randoop.util.Randomness: total calls to random: 1716
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1717
randoop.util.Randomness: total calls to random: 1718
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  method : java.util.Observable.hasChanged() : var0 
var5 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=372
-------------------------------------------
randoop.util.Randomness: total calls to random: 1719
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 126 sequences.
components: 126
randoop.util.Randomness: total calls to random: 1720
randoop.util.Randomness: total calls to random: 1721
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : java.lang.String:"cep" : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var2 
var4 =  prim : java.lang.String:"cep" : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var2 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
java.lang.String var4 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
java.lang.String var6 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=cep [var6]  : true

allSequences.size()=373
-------------------------------------------
randoop.util.Randomness: total calls to random: 1722
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 1723
randoop.util.Randomness: total calls to random: 1724
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 296 sequences.
components: 296
randoop.util.Randomness: total calls to random: 1725
randoop.util.Randomness: total calls to random: 1726
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 
var25 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var26 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var27 =  prim : java.lang.String:"hi!" : 
var28 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var26 var27 
var29 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var26 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var26 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var25 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var26 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var27 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var26.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var29 = var26.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var30 = var0.add((org.softlang.company.Subunit)var26);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.IsNull@25 [var25]  : true
<randoop.PrimValue, value=hi! [var29]  : true
<randoop.PrimValue, value=true [var30]  : true

allSequences.size()=374
-------------------------------------------
randoop.util.Randomness: total calls to random: 1727
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 1728
randoop.util.Randomness: total calls to random: 1729
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1730
randoop.util.Randomness: total calls to random: 1731
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  prim : double:10.0 : 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var8 var34 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
java.lang.Double var34 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var8.setSalary(10.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true

allSequences.size()=375
-------------------------------------------
randoop.util.Randomness: total calls to random: 1732
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 276 sequences.
components: 276
randoop.util.Randomness: total calls to random: 1733
randoop.util.Randomness: total calls to random: 1734
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var7 
var9 =  prim : float:-1.0 : 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var7 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var7 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var12 
var15 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var15 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var15 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var15 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var20 =  prim : double:1.0 : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var15 var20 
var22 =  method : java.util.Observable.countObservers() : var15 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var15 
var24 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var15 
var25 =  method : java.util.Observable.notifyObservers() : var15 
var26 =  method : java.util.Observable.hasChanged() : var15 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var6 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var7.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var9 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var10 = var7.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var7);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var13 = var11.add((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var15 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var16 = var15.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var17 = var15.getParent();
// <NormalExecution object=null>;
java.lang.String var18 = var15.getAddress();
// <NormalExecution object=null>;
double var19 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var20 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(1.0d);
// <NormalExecution object=null>;
int var22 = var15.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
double var23 = var15.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var15);
// <NormalExecution object=null>;
var15.notifyObservers();
// <NormalExecution object=null>;
boolean var26 = var15.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=false [var16]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=1.0 [var23]  : true
<randoop.PrimValue, value=false [var26]  : true

allSequences.size()=376
-------------------------------------------
randoop.util.Randomness: total calls to random: 1735
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 1736
randoop.util.Randomness: total calls to random: 1737
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 536 sequences.
components: 536
randoop.util.Randomness: total calls to random: 1738
randoop.util.Randomness: total calls to random: 1739
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var13 
var15 =  prim : boolean:false : 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var13 var15 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var13 
var18 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var13 
var19 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var19 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var19 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var25 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var12 var24 
var26 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var27 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var26 
var28 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var27 
var29 =  prim : float:-1.0 : 
var30 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var27 var29 
var31 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var27 
var32 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var33 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var31 var32 
var34 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var12 var33 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 active.
Making index 32 active.
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var14 = var13.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var15 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var13.setManager(false);
// <NormalExecution object=null>;
java.lang.String var17 = var13.getAddress();
// <NormalExecution object=null>;
boolean var18 = var12.remove((java.lang.Object)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var19 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var20 = var19.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var21 = var19.getParent();
// <NormalExecution object=null>;
java.lang.String var22 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var23 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
double var24 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var12.add((java.lang.Object)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.SimpleLinkedList var26 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var27 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var26);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var27.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var29 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var30 = var27.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var31 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var27);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var32 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var33 = var31.add((java.lang.Object)var32);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var34 = var12.remove((java.lang.Object)var33);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=cep [var22]  : true
<randoop.PrimValue, value=0.0 [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=true [var25]  : true
<randoop.PrimValue, value=false [var30]  : true
<randoop.PrimValue, value=true [var33]  : true
<randoop.PrimValue, value=false [var34]  : true

allSequences.size()=377
-------------------------------------------
randoop.util.Randomness: total calls to random: 1740
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 1741
randoop.util.Randomness: total calls to random: 1742
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 129 sequences.
components: 129
randoop.util.Randomness: total calls to random: 1743
randoop.util.Randomness: total calls to random: 1744
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1745
randoop.util.Randomness: total calls to random: 1746
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var13 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var12 
var14 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var13 
var15 =  prim : float:-1.0 : 
var16 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var13 var15 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var13 
var18 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var19 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var17 var18 
var20 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var6 var18 
var21 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var18 
var22 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var22 
var24 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var22 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var22 
var26 =  prim : double:0.0 : 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var22 var26 
var28 =  prim : double:100.0 : 
var29 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var22 var28 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var12 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var13 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var12);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var13.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var15 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var16 = var13.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var13);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var18 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var19 = var17.add((java.lang.Object)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var22 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var23 = var22.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var24 = var22.getParent();
// <NormalExecution object=null>;
java.lang.String var25 = var22.getName();
// <NormalExecution object=null>;
java.lang.Double var26 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var22.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.Double var28 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var22, 100.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var16]  : true
<randoop.PrimValue, value=true [var19]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.IsNull@25 [var24]  : true
<randoop.IsNull@25 [var25]  : true

allSequences.size()=378
-------------------------------------------
randoop.util.Randomness: total calls to random: 1747
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 1748
randoop.util.Randomness: total calls to random: 1749
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1750
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 99 sequences.
components: 99
randoop.util.Randomness: total calls to random: 1751
randoop.util.Randomness: total calls to random: 1752
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var11 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
boolean var10 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var11 = var2.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true

allSequences.size()=379
-------------------------------------------
randoop.util.Randomness: total calls to random: 1753
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 1754
randoop.util.Randomness: total calls to random: 1755
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var1.remove((java.lang.Object)false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.util.Iterator var4 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=380
-------------------------------------------
randoop.util.Randomness: total calls to random: 1756
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 542 sequences.
components: 542
randoop.util.Randomness: total calls to random: 1757
randoop.util.Randomness: total calls to random: 1758
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var6 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
org.softlang.company.Employee var4 = var3.getManager();
// <NormalExecution object=null>;
boolean var5 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.AddToList var6 = new org.softlang.util.AddToList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=381
-------------------------------------------
randoop.util.Randomness: total calls to random: 1759
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 92 sequences.
components: 92
randoop.util.Randomness: total calls to random: 1760
randoop.util.Randomness: total calls to random: 1761
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : java.util.Observable.hasChanged() : var0 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var9 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var10 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNotNull@1f [var10]  : true

allSequences.size()=382
-------------------------------------------
randoop.util.Randomness: total calls to random: 1762
Selected statement: org.softlang.main.Main.getSampleCompany()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 1763
randoop.util.Randomness: total calls to random: 1764
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1765
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 93 sequences.
components: 93
randoop.util.Randomness: total calls to random: 1766
randoop.util.Randomness: total calls to random: 1767
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.main.Main.<init>() : 
var10 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var9 
var11 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var9 var11 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var9 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var9 
var16 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var16 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var21 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var9 var16 
var22 =  prim : java.lang.String:"" : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var16 var22 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var25 =  method : java.util.Observable.deleteObservers() : var16 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var16 
var27 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var9 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var10 = new org.softlang.util.AddToList((java.lang.Object)var9);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var11 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var9.setSampleCompany((org.softlang.company.Company)var11);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var9.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var9.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var16 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var17 = var16.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var18 = var16.getParent();
// <NormalExecution object=null>;
double var19 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var20 = var16.getParent();
// <NormalExecution object=null>;
double var21 = var9.getSalary(var16);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var22 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var16.setAddress("");
// <NormalExecution object=null>;
double var24 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var16.deleteObservers();
// <NormalExecution object=null>;
boolean var26 = var0.add((org.softlang.company.Subunit)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.PrimValue, value=false [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=0.0 [var21]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=true [var26]  : true

allSequences.size()=383
-------------------------------------------
randoop.util.Randomness: total calls to random: 1768
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 94 sequences.
components: 94
randoop.util.Randomness: total calls to random: 1769
randoop.util.Randomness: total calls to random: 1770
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true

allSequences.size()=384
-------------------------------------------
randoop.util.Randomness: total calls to random: 1771
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 1772
randoop.util.Randomness: total calls to random: 1773
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var13 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var11.deleteObservers();
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var13 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var11);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=385
-------------------------------------------
randoop.util.Randomness: total calls to random: 1774
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 130 sequences.
components: 130
randoop.util.Randomness: total calls to random: 1775
randoop.util.Randomness: total calls to random: 1776
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var4 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
double var8 = var0.getSalary(var4);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var9 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=0.0 [var8]  : true
<randoop.PrimValue, value=false [var9]  : true

allSequences.size()=386
-------------------------------------------
randoop.util.Randomness: total calls to random: 1777
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 1778
randoop.util.Randomness: total calls to random: 1779
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=387
-------------------------------------------
randoop.util.Randomness: total calls to random: 1780
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1781
randoop.util.Randomness: total calls to random: 1782
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var15 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var16 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var15 
var17 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 
var19 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.countObservers() : var19 
var21 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var16 var20 
var22 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var23 =  prim : java.lang.String:"hi!" : 
var24 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var22 var23 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  prim : java.lang.String:"hi!" : 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var25 var26 
var28 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var29 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var22 var25 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var22 
var31 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var16 var22 
var32 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var14 var16 
var33 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var15 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var16 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var15);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var16.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var18 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var19 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var20 = var19.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var21 = var16.remove((java.lang.Object)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var22 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var23 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var22.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var26 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var25.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var28 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var29 = var22.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var30 = var22.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var16.notifyObservers((java.lang.Object)var22);
// <NormalExecution object=null>;
boolean var32 = var14.add((java.lang.Object)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.util.Iterator var33 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.PrimValue, value=true [var32]  : true
<randoop.IsNotNull@1f [var33]  : true

allSequences.size()=388
-------------------------------------------
randoop.util.Randomness: total calls to random: 1783
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 131 sequences.
components: 131
randoop.util.Randomness: total calls to random: 1784
randoop.util.Randomness: total calls to random: 1785
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var4 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var12 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var12 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var12 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var9 var12 
var18 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var12 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
double var8 = var0.getSalary(var4);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var10 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var14 = var12.getParent();
// <NormalExecution object=null>;
java.lang.String var15 = var12.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var16 = var12.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var17 = var9.remove((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var18 = var0.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var19 = var12.getName();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=0.0 [var8]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.PrimValue, value=cep [var15]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.PrimValue, value=false [var17]  : true
<randoop.PrimValue, value=0.0 [var18]  : true
<randoop.IsNull@25 [var19]  : true

allSequences.size()=389
-------------------------------------------
randoop.util.Randomness: total calls to random: 1786
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 555 sequences.
components: 555
randoop.util.Randomness: total calls to random: 1787
randoop.util.Randomness: total calls to random: 1788
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var6 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=390
-------------------------------------------
randoop.util.Randomness: total calls to random: 1789
Selected statement: org.softlang.company.impl.pojo.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.DepartmentImpl
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 1790
randoop.util.Randomness: total calls to random: 1791
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var9 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.company.Employee var9 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=hi! [var8]  : true
<randoop.IsNull@25 [var9]  : true

allSequences.size()=391
-------------------------------------------
randoop.util.Randomness: total calls to random: 1792
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1793
randoop.util.Randomness: total calls to random: 1794
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 1795
randoop.util.Randomness: total calls to random: 1796
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  cons : org.softlang.main.Main.<init>() : 
var18 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var19 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var17 var18 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var21 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 
var23 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var24 =  prim : java.lang.String:"" : 
var25 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var23 var24 
var26 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var23 
var27 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var23 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.main.Main var17 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var18 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var17.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
org.softlang.company.Company var20 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var21 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany(var21);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var23 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var24 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("");
// <NormalExecution object=null>;
java.lang.String var26 = var23.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setSampleCompany((org.softlang.company.Company)var23);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var21]  : true
<randoop.PrimValue, value= [var26]  : true

allSequences.size()=392
-------------------------------------------
randoop.util.Randomness: total calls to random: 1797
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 1798
randoop.util.Randomness: total calls to random: 1799
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var0 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var4 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=393
-------------------------------------------
randoop.util.Randomness: total calls to random: 1800
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 1801
randoop.util.Randomness: total calls to random: 1802
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1803
randoop.util.Randomness: total calls to random: 1804
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var5 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var5 
var7 =  prim : float:-1.0 : 
var8 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var5 var7 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var10 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var11 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var9 var10 
var12 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var4 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var5 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var5.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var7 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var8 = var5.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var10 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var11 = var9.add((java.lang.Object)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var10);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=394
-------------------------------------------
randoop.util.Randomness: total calls to random: 1805
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 1806
randoop.util.Randomness: total calls to random: 1807
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 310 sequences.
components: 310
randoop.util.Randomness: total calls to random: 1808
randoop.util.Randomness: total calls to random: 1809
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.main.Main.<init>() : 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var3 var4 
var9 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.main.Main var3 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
var3.setEmp(var4);
// <NormalExecution object=null>;
boolean var9 = var0.add((org.softlang.company.Subunit)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=true [var9]  : true

allSequences.size()=395
-------------------------------------------
randoop.util.Randomness: total calls to random: 1810
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 1811
randoop.util.Randomness: total calls to random: 1812
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var5 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var4 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var5 = var0.getManager();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=396
-------------------------------------------
randoop.util.Randomness: total calls to random: 1813
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 133 sequences.
components: 133
randoop.util.Randomness: total calls to random: 1814
randoop.util.Randomness: total calls to random: 1815
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
java.lang.String var15 = var7.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value= [var15]  : true

allSequences.size()=397
-------------------------------------------
randoop.util.Randomness: total calls to random: 1816
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 134 sequences.
components: 134
randoop.util.Randomness: total calls to random: 1817
randoop.util.Randomness: total calls to random: 1818
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var6 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var11 
var13 =  prim : boolean:false : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var11 var13 
var15 =  method : java.util.Observable.deleteObservers() : var11 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var11 
var17 =  prim : boolean:false : 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var11 var17 
var19 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var11 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
double var10 = var0.getSalary(var6);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var12 = var11.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var13 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var11.setManager(false);
// <NormalExecution object=null>;
var11.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var16 = var11.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var17 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var11.setManager(false);
// <NormalExecution object=null>;
double var19 = var0.getSalary(var11);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var20 = var11.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.PrimValue, value=cep [var16]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.IsNull@25 [var20]  : true

allSequences.size()=398
-------------------------------------------
randoop.util.Randomness: total calls to random: 1819
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 96 sequences.
components: 96
randoop.util.Randomness: total calls to random: 1820
randoop.util.Randomness: total calls to random: 1821
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
boolean var6 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=true [var6]  : true

allSequences.size()=399
-------------------------------------------
randoop.util.Randomness: total calls to random: 1822
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 1823
randoop.util.Randomness: total calls to random: 1824
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var4 =  cons : org.softlang.main.Main.<init>() : 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  prim : java.lang.String:"cep" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var5 var7 
var9 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var4 var5 
var10 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var10 
var12 =  prim : double:10.0 : 
var13 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var4 var10 var12 
var14 =  method : java.util.Observable.notifyObservers() : var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var10 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var10 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.main.Main var4 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setAddress("cep");
// <NormalExecution object=null>;
var4.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var10 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var11 = var10.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var12 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var4.setSalary(var10, 10.0d);
// <NormalExecution object=null>;
var10.notifyObservers();
// <NormalExecution object=null>;
boolean var15 = var0.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var16 = var10.getAddress();
// <NormalExecution object=null>;
java.lang.String var17 = var10.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=hi! [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=0.0 [var11]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.IsNull@25 [var16]  : true
<randoop.IsNull@25 [var17]  : true

allSequences.size()=400
-------------------------------------------
randoop.util.Randomness: total calls to random: 1825
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 136 sequences.
components: 136
randoop.util.Randomness: total calls to random: 1826
randoop.util.Randomness: total calls to random: 1827
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1828
randoop.util.Randomness: total calls to random: 1829
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  method : java.util.Observable.notifyObservers() : var6 
var11 =  prim : boolean:false : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
var6.notifyObservers();
// <NormalExecution object=null>;
java.lang.Boolean var11 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true

allSequences.size()=401
-------------------------------------------
randoop.util.Randomness: total calls to random: 1830
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 1831
randoop.util.Randomness: total calls to random: 1832
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var4 var6 
var8 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var4 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var4 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var4 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var5 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setAddress("cep");
// <NormalExecution object=null>;
double var8 = var0.getSalary(var4);
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var9 = var4.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var10 = var4.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=0.0 [var8]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=402
-------------------------------------------
randoop.util.Randomness: total calls to random: 1833
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 572 sequences.
components: 572
randoop.util.Randomness: total calls to random: 1834
randoop.util.Randomness: total calls to random: 1835
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var9 = new org.softlang.util.RemoveFromList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=403
-------------------------------------------
randoop.util.Randomness: total calls to random: 1836
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 1837
randoop.util.Randomness: total calls to random: 1838
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 574 sequences.
components: 574
randoop.util.Randomness: total calls to random: 1839
randoop.util.Randomness: total calls to random: 1840
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var4 
var8 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var8 
var10 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var11 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var10 
var12 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var10 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var10 
var14 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var10 
var15 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var4.deleteObservers();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var8 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var9 = var8.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var10 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var10);
// <NormalExecution object=null>;
java.lang.String var12 = var10.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var13 = var10.getName();
// <NormalExecution object=null>;
java.lang.String var14 = var10.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var15 = var4.add((java.lang.Object)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.IsNull@25 [var13]  : true
<randoop.PrimValue, value=cep [var14]  : true
<randoop.PrimValue, value=true [var15]  : true

allSequences.size()=404
-------------------------------------------
randoop.util.Randomness: total calls to random: 1841
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1842
randoop.util.Randomness: total calls to random: 1843
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 1844
randoop.util.Randomness: total calls to random: 1845
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var12 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var10 var11 
var13 =  method : org.softlang.main.Main.getSampleCompany() : var10 
var14 =  method : org.softlang.main.Main.getSampleCompany() : var10 
var15 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var15 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var15 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var18 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var18 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var15 var18 
var24 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var10 var18 
var25 =  cons : org.softlang.main.Main.<init>() : 
var26 =  cons : org.softlang.main.Main.<init>() : 
var27 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var28 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var26 var27 
var29 =  method : org.softlang.main.Main.getSampleCompany() : var26 
var30 =  method : org.softlang.main.Main.getSampleCompany() : var26 
var31 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var31 
var33 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var31 
var34 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var34 
var36 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var34 
var37 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var34 
var38 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var34 
var39 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var31 var34 
var40 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var26 var34 
var41 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var25 var34 
var42 =  method : org.softlang.main.Main.getEmp() : var25 
var43 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var18 var25 
var44 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var18 
var45 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is null)
Making index 29 active.
Making index 30 active.
Making index 31 active.
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is null)
Making index 42 active.
Making index 43 inactive (value is null)
Making index 44 active.
Making index 45 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var11 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var10.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
org.softlang.company.Company var13 = var10.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var14 = var10.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var15 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var16 = var15.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var17 = var15.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
java.lang.String var21 = var18.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var22 = var18.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var23 = var15.remove((org.softlang.company.Subunit)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var24 = var10.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var25 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var26 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var27 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var26.createSampleCompany((org.softlang.company.factory.Factory)var27);
// <NormalExecution object=null>;
org.softlang.company.Company var29 = var26.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var30 = var26.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var31 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var32 = var31.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var33 = var31.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var34 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var35 = var34.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var36 = var34.getParent();
// <NormalExecution object=null>;
java.lang.String var37 = var34.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var38 = var34.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var39 = var31.remove((org.softlang.company.Subunit)var34);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var40 = var26.getSalary(var34);
// <NormalExecution object=object-of-type-java.lang.Double>;
var25.setEmp(var34);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var42 = var25.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var18.notifyObservers((java.lang.Object)var25);
// <NormalExecution object=null>;
org.softlang.util.AddToList var44 = new org.softlang.util.AddToList((java.lang.Object)var18);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
double var45 = var0.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=cep [var21]  : true
<randoop.PrimValue, value=0.0 [var22]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.IsNotNull@1f [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var33]  : true
<randoop.PrimValue, value=false [var35]  : true
<randoop.IsNull@25 [var36]  : true
<randoop.PrimValue, value=cep [var37]  : true
<randoop.PrimValue, value=0.0 [var38]  : true
<randoop.PrimValue, value=false [var39]  : true
<randoop.PrimValue, value=0.0 [var40]  : true
<randoop.IsNotNull@1f [var42]  : true
<randoop.PrimValue, value=0.0 [var45]  : true

allSequences.size()=405
-------------------------------------------
randoop.util.Randomness: total calls to random: 1846
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 300 sequences.
components: 300
randoop.util.Randomness: total calls to random: 1847
randoop.util.Randomness: total calls to random: 1848
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 578 sequences.
components: 578
randoop.util.Randomness: total calls to random: 1849
randoop.util.Randomness: total calls to random: 1850
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var7 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var7 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.String var4 = var0.getAddress();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var6 = var5.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var7 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var5.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
var0.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=406
-------------------------------------------
randoop.util.Randomness: total calls to random: 1851
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 301 sequences.
components: 301
randoop.util.Randomness: total calls to random: 1852
randoop.util.Randomness: total calls to random: 1853
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : java.util.Observable.notifyObservers() : var0 
var5 =  prim : boolean:true : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=407
-------------------------------------------
randoop.util.Randomness: total calls to random: 1854
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 1855
randoop.util.Randomness: total calls to random: 1856
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"hi!" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=408
-------------------------------------------
randoop.util.Randomness: total calls to random: 1857
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 582 sequences.
components: 582
randoop.util.Randomness: total calls to random: 1858
randoop.util.Randomness: total calls to random: 1859
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=hi! [var8]  : true

allSequences.size()=409
-------------------------------------------
randoop.util.Randomness: total calls to random: 1860
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1861
randoop.util.Randomness: total calls to random: 1862
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 326 sequences.
components: 326
randoop.util.Randomness: total calls to random: 1863
randoop.util.Randomness: total calls to random: 1864
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : java.util.Observable.countObservers() : var1 
var3 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var1 
var4 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var2 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var3 = var1.getName();
// <NormalExecution object=null>;
boolean var4 = var0.add((org.softlang.company.Subunit)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=410
-------------------------------------------
randoop.util.Randomness: total calls to random: 1865
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 1866
randoop.util.Randomness: total calls to random: 1867
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 327 sequences.
components: 327
randoop.util.Randomness: total calls to random: 1868
randoop.util.Randomness: total calls to random: 1869
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var2 =  prim : double:-1.0 : 
var3 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var1 var2 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var1 var4 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var1 
var7 =  prim : boolean:false : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var1 var7 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var1 
var10 =  prim : double:1.0 : 
var11 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var1 var10 
var12 =  prim : double:-1.0 : 
var13 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var1 var12 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
org.softlang.company.impl.pojo.EmployeeImpl var1 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var2 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var1.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setName("");
// <NormalExecution object=null>;
boolean var6 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var7 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.setManager(false);
// <NormalExecution object=null>;
double var9 = var1.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var10 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var1.setSalary(1.0d);
// <NormalExecution object=null>;
java.lang.Double var12 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var1.setSalary((-1.0d));
// <NormalExecution object=null>;
boolean var14 = var0.remove((org.softlang.company.Subunit)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=-1.0 [var9]  : true
<randoop.PrimValue, value=false [var14]  : true

allSequences.size()=411
-------------------------------------------
randoop.util.Randomness: total calls to random: 1870
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 142 sequences.
components: 142
randoop.util.Randomness: total calls to random: 1871
randoop.util.Randomness: total calls to random: 1872
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1873
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 98 sequences.
components: 98
randoop.util.Randomness: total calls to random: 1874
randoop.util.Randomness: total calls to random: 1875
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
boolean var6 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var3.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=true [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=412
-------------------------------------------
randoop.util.Randomness: total calls to random: 1876
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 1877
randoop.util.Randomness: total calls to random: 1878
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var2 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var2]  : true
<randoop.IsNull@25 [var3]  : true

allSequences.size()=413
-------------------------------------------
randoop.util.Randomness: total calls to random: 1879
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1880
randoop.util.Randomness: total calls to random: 1881
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1882
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 143 sequences.
components: 143
randoop.util.Randomness: total calls to random: 1883
randoop.util.Randomness: total calls to random: 1884
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var5 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var5 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var9 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var9 
var13 =  prim : char:61 : 
var14 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var9 var13 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var9 
var16 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var17 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var17 
var19 =  prim : boolean:false : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var17 var19 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var17 
var22 =  prim : boolean:true : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var17 var22 
var24 =  prim : java.lang.String:"cep" : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var17 var24 
var26 =  method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var17 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var17 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.Employee var4 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var5.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var9.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var9.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var13 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var9.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
boolean var15 = var0.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var16 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var17 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var18 = var17.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var19 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var17.setManager(false);
// <NormalExecution object=null>;
java.lang.String var21 = var17.getName();
// <NormalExecution object=null>;
java.lang.Boolean var22 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var17.setManager(true);
// <NormalExecution object=null>;
java.lang.String var24 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var17.setName("cep");
// <NormalExecution object=null>;
boolean var26 = var0.remove((org.softlang.company.Subunit)var17);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var27 = var17.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var12]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.IsNull@25 [var16]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=false [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true

allSequences.size()=414
-------------------------------------------
randoop.util.Randomness: total calls to random: 1885
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 99 sequences.
components: 99
randoop.util.Randomness: total calls to random: 1886
randoop.util.Randomness: total calls to random: 1887
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1888
randoop.util.Randomness: total calls to random: 1889
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var8 var9 
var11 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var11 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var8 var11 
var16 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var17 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var11 var16 
var18 =  prim : java.lang.String:"cep" : 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var11 var18 
var20 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var3 var11 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var21 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var9 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var8.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var11 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var14 = var11.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var15 = var8.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var16 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var11.notifyObservers((java.lang.Object)var16);
// <NormalExecution object=null>;
java.lang.String var18 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("cep");
// <NormalExecution object=null>;
boolean var20 = var3.remove((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("cep");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.PrimValue, value=true [var15]  : true
<randoop.PrimValue, value=false [var20]  : true

allSequences.size()=415
-------------------------------------------
randoop.util.Randomness: total calls to random: 1890
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 100 sequences.
components: 100
randoop.util.Randomness: total calls to random: 1891
randoop.util.Randomness: total calls to random: 1892
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1893
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 1894
randoop.util.Randomness: total calls to random: 1895
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getEmp() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var9 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var8 
var10 =  method : org.softlang.main.Main.getSampleCompany() : var7 
var11 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var12 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var7 var11 
var13 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var11 
var14 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = var0.getEmp();
// <NormalExecution object=null>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var8 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var8);
// <NormalExecution object=null>;
org.softlang.company.Company var10 = var7.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var11 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var7.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var14 = var0.getEmp();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.IsNull@25 [var14]  : true

allSequences.size()=416
-------------------------------------------
randoop.util.Randomness: total calls to random: 1896
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 1897
randoop.util.Randomness: total calls to random: 1898
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 1899
randoop.util.Randomness: total calls to random: 1900
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 
var31 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var32 =  prim : java.lang.String:"" : 
var33 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var31 var32 
var34 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 
var35 =  cons : org.softlang.main.Main.<init>() : 
var36 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var37 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var36 
var38 =  prim : java.lang.String:"cep" : 
var39 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var36 var38 
var40 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var35 var36 
var41 =  prim : java.lang.String:"hi!" : 
var42 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var36 var41 
var43 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var36 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 active.
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is null)
Making index 40 inactive (value is null)
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is null)
Making index 43 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var31 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var32 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
org.softlang.main.Main var35 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var36 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var37 = var36.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var38 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setAddress("cep");
// <NormalExecution object=null>;
var35.setEmp(var36);
// <NormalExecution object=null>;
java.lang.String var41 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setName("hi!");
// <NormalExecution object=null>;
double var43 = var0.getSalary(var36);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=false [var37]  : true
<randoop.PrimValue, value=0.0 [var43]  : true

allSequences.size()=417
-------------------------------------------
randoop.util.Randomness: total calls to random: 1901
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 100 sequences.
components: 100
randoop.util.Randomness: total calls to random: 1902
randoop.util.Randomness: total calls to random: 1903
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var2 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setName("");
// <NormalExecution object=null>;
var2.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=418
-------------------------------------------
randoop.util.Randomness: total calls to random: 1904
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 1905
randoop.util.Randomness: total calls to random: 1906
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1907
randoop.util.Randomness: total calls to random: 1908
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var18 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var16 var17 
var19 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var16 
var21 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var22 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var21 
var23 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var21 
var24 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var24 
var26 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var24 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var24 
var28 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var24 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var21 var24 
var30 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var16 var24 
var31 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var15 var24 
var32 =  method : org.softlang.main.Main.getEmp() : var15 
var33 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var8 var15 
var34 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var35 =  prim : double:-1.0 : 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var8 var35 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 24
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 active.
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var17 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var16.createSampleCompany((org.softlang.company.factory.Factory)var17);
// <NormalExecution object=null>;
org.softlang.company.Company var19 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var20 = var16.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var21 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var22 = var21.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var23 = var21.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var24 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var25 = var24.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var26 = var24.getParent();
// <NormalExecution object=null>;
java.lang.String var27 = var24.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var28 = var24.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var29 = var21.remove((org.softlang.company.Subunit)var24);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var30 = var16.getSalary(var24);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setEmp(var24);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var32 = var15.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var8.notifyObservers((java.lang.Object)var15);
// <NormalExecution object=null>;
org.softlang.util.AddToList var34 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
java.lang.Double var35 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var8.setSalary((-1.0d));
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNull@25 [var23]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.IsNull@25 [var26]  : true
<randoop.PrimValue, value=cep [var27]  : true
<randoop.PrimValue, value=0.0 [var28]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.IsNotNull@1f [var32]  : true

allSequences.size()=419
-------------------------------------------
randoop.util.Randomness: total calls to random: 1909
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1910
randoop.util.Randomness: total calls to random: 1911
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1912
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 1913
randoop.util.Randomness: total calls to random: 1914
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 146 sequences.
components: 146
randoop.util.Randomness: total calls to random: 1915
randoop.util.Randomness: total calls to random: 1916
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var30 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var29 
var31 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var29 
var32 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var29 
var33 =  prim : boolean:false : 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var29 var33 
var35 =  prim : double:0.0 : 
var36 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var11 var29 var35 
var37 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var29 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 active.
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Making index 37 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.impl.bean.EmployeeImpl var29 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var30 = var29.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var31 = var29.getParent();
// <NormalExecution object=null>;
java.lang.String var32 = var29.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var33 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var29.setManager(false);
// <NormalExecution object=null>;
java.lang.Double var35 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setSalary(var29, 0.0d);
// <NormalExecution object=null>;
var0.setEmp(var29);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=false [var30]  : true
<randoop.IsNull@25 [var31]  : true
<randoop.PrimValue, value=cep [var32]  : true

allSequences.size()=420
-------------------------------------------
randoop.util.Randomness: total calls to random: 1917
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 1918
randoop.util.Randomness: total calls to random: 1919
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=421
-------------------------------------------
randoop.util.Randomness: total calls to random: 1920
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 1921
randoop.util.Randomness: total calls to random: 1922
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1923
randoop.util.Randomness: total calls to random: 1924
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var9 =  prim : java.lang.String:"" : 
var10 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
java.lang.String var9 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var8]  : true

allSequences.size()=422
-------------------------------------------
randoop.util.Randomness: total calls to random: 1925
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1926
randoop.util.Randomness: total calls to random: 1927
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1928
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 1929
randoop.util.Randomness: total calls to random: 1930
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1931
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 1932
randoop.util.Randomness: total calls to random: 1933
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1934
randoop.util.Randomness: total calls to random: 1935
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 
var3 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var4 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var1 var3 
var5 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var3 
var6 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var7 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var3 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var1.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var3);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var6 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var6);
// <NormalExecution object=null>;

allSequences.size()=423
-------------------------------------------
randoop.util.Randomness: total calls to random: 1936
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 1937
randoop.util.Randomness: total calls to random: 1938
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1939
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 1940
randoop.util.Randomness: total calls to random: 1941
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 1942
randoop.util.Randomness: total calls to random: 1943
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : boolean:true : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var8 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(true);
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=424
-------------------------------------------
randoop.util.Randomness: total calls to random: 1944
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 1945
randoop.util.Randomness: total calls to random: 1946
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 339 sequences.
components: 339
randoop.util.Randomness: total calls to random: 1947
randoop.util.Randomness: total calls to random: 1948
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  prim : java.lang.String:"hi!" : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var4 var5 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var4 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var4 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var5 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var7 = var4.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var4.deleteObservers();
// <NormalExecution object=null>;
boolean var9 = var0.add((org.softlang.company.Subunit)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.PrimValue, value=true [var9]  : true

allSequences.size()=425
-------------------------------------------
randoop.util.Randomness: total calls to random: 1949
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 1950
randoop.util.Randomness: total calls to random: 1951
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 1952
randoop.util.Randomness: total calls to random: 1953
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.main.Main.<init>() : 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var10 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var10 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var10 
var16 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var17 
var19 =  method : org.softlang.util.ObservableSimpleList.iterator() : var17 
var20 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var17 
var21 =  cons : org.softlang.main.Main.<init>() : 
var22 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var21 
var23 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var24 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var21 var23 
var25 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var26 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var21 var25 
var27 =  method : org.softlang.main.Main.getSampleCompany() : var21 
var28 =  cons : org.softlang.main.Main.<init>() : 
var29 =  cons : org.softlang.main.Main.<init>() : 
var30 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var29 
var31 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var32 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var29 var31 
var33 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var28 var31 
var34 =  prim : java.lang.String:"hi!" : 
var35 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var31 var34 
var36 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var21 var31 
var37 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var17 var31 
var38 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 active.
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 active.
Making index 28 active.
Making index 29 active.
Making index 30 active.
Making index 31 active.
Making index 32 inactive (value is null)
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Making index 36 inactive (value is null)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var8 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var10 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var8.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
var7.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var16 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var16);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var17.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var19 = var17.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var20 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var17);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.main.Main var21 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var22 = new org.softlang.util.AddToList((java.lang.Object)var21);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var23 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var21.setSampleCompany((org.softlang.company.Company)var23);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var25 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var21.createSampleCompany((org.softlang.company.factory.Factory)var25);
// <NormalExecution object=null>;
org.softlang.company.Company var27 = var21.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var28 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var29 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var30 = new org.softlang.util.AddToList((java.lang.Object)var29);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var31 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var29.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
var28.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
java.lang.String var34 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("hi!");
// <NormalExecution object=null>;
var21.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
boolean var37 = var17.add((java.lang.Object)var31);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var27]  : true
<randoop.PrimValue, value=true [var37]  : true

allSequences.size()=426
-------------------------------------------
randoop.util.Randomness: total calls to random: 1954
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 1955
randoop.util.Randomness: total calls to random: 1956
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 1957
randoop.util.Randomness: total calls to random: 1958
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var8 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var8 
var11 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var8 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var9 = var8.getName();
// <NormalExecution object=null>;
var8.deleteObservers();
// <NormalExecution object=null>;
boolean var11 = var0.add((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=427
-------------------------------------------
randoop.util.Randomness: total calls to random: 1959
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 1960
randoop.util.Randomness: total calls to random: 1961
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 343 sequences.
components: 343
randoop.util.Randomness: total calls to random: 1962
randoop.util.Randomness: total calls to random: 1963
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var4 =  prim : char:61 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var10 
var13 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var13 
var15 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var13 
var16 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var13 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var13 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var10 var13 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var19 
var21 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var19 var21 
var23 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var24 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var19 var23 
var25 =  method : org.softlang.main.Main.getSampleCompany() : var19 
var26 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var26 
var28 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var26 
var29 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var26 
var30 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var26 
var31 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var19 var26 
var32 =  prim : java.lang.String:"" : 
var33 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var26 var32 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var26 
var35 =  method : java.util.Observable.deleteObservers() : var26 
var36 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var10 var26 
var37 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var3 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Character var4 = new java.lang.Character('a');
// <NormalExecution object=object-of-type-java.lang.Character>;
var0.notifyObservers((java.lang.Object)'a');
// <NormalExecution object=null>;
org.softlang.company.Employee var6 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var7 = var0.getParent();
// <NormalExecution object=null>;
java.lang.Iterable var8 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Iterable var9 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var11 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var12 = var10.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var13 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var14 = var13.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var15 = var13.getParent();
// <NormalExecution object=null>;
java.lang.String var16 = var13.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var17 = var13.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var18 = var10.remove((org.softlang.company.Subunit)var13);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var20 = new org.softlang.util.AddToList((java.lang.Object)var19);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var21 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var19.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var23 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var19.createSampleCompany((org.softlang.company.factory.Factory)var23);
// <NormalExecution object=null>;
org.softlang.company.Company var25 = var19.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var26 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var27 = var26.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var28 = var26.getParent();
// <NormalExecution object=null>;
double var29 = var26.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var30 = var26.getParent();
// <NormalExecution object=null>;
double var31 = var19.getSalary(var26);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var32 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var26.setAddress("");
// <NormalExecution object=null>;
double var34 = var26.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var26.deleteObservers();
// <NormalExecution object=null>;
boolean var36 = var10.add((org.softlang.company.Subunit)var26);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var37 = var0.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.IsNotNull@1f [var9]  : true
<randoop.IsNotNull@1f [var11]  : true
<randoop.IsNull@25 [var12]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.IsNull@25 [var15]  : true
<randoop.PrimValue, value=cep [var16]  : true
<randoop.PrimValue, value=0.0 [var17]  : true
<randoop.PrimValue, value=false [var18]  : true
<randoop.IsNotNull@1f [var25]  : true
<randoop.PrimValue, value=false [var27]  : true
<randoop.IsNull@25 [var28]  : true
<randoop.PrimValue, value=0.0 [var29]  : true
<randoop.IsNull@25 [var30]  : true
<randoop.PrimValue, value=0.0 [var31]  : true
<randoop.PrimValue, value=0.0 [var34]  : true
<randoop.PrimValue, value=true [var36]  : true
<randoop.PrimValue, value=true [var37]  : true

allSequences.size()=428
-------------------------------------------
randoop.util.Randomness: total calls to random: 1964
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 148 sequences.
components: 148
randoop.util.Randomness: total calls to random: 1965
randoop.util.Randomness: total calls to random: 1966
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 1967
randoop.util.Randomness: total calls to random: 1968
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var10 =  prim : java.lang.String:"" : 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var3 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var9 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var10 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setAddress("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true

allSequences.size()=429
-------------------------------------------
randoop.util.Randomness: total calls to random: 1969
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 149 sequences.
components: 149
randoop.util.Randomness: total calls to random: 1970
randoop.util.Randomness: total calls to random: 1971
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var2 =  method : java.util.Observable.hasChanged() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var2 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true

allSequences.size()=430
-------------------------------------------
randoop.util.Randomness: total calls to random: 1972
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 150 sequences.
components: 150
randoop.util.Randomness: total calls to random: 1973
randoop.util.Randomness: total calls to random: 1974
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1975
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 1976
randoop.util.Randomness: total calls to random: 1977
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1978
randoop.util.Randomness: total calls to random: 1979
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var9 =  prim : double:100.0 : 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var9 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(100.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var8]  : true

allSequences.size()=431
-------------------------------------------
randoop.util.Randomness: total calls to random: 1980
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 1981
randoop.util.Randomness: total calls to random: 1982
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 614 sequences.
components: 614
randoop.util.Randomness: total calls to random: 1983
randoop.util.Randomness: total calls to random: 1984
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  prim : float:-1.0 : 
var4 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var3 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var6 =  prim : byte:1 : 
var7 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var3 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var4 = var1.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.lang.Byte var6 = new java.lang.Byte((byte)1);
// <NormalExecution object=object-of-type-java.lang.Byte>;
boolean var7 = var1.remove((java.lang.Object)(byte)1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=432
-------------------------------------------
randoop.util.Randomness: total calls to random: 1985
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 1986
randoop.util.Randomness: total calls to random: 1987
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 348 sequences.
components: 348
randoop.util.Randomness: total calls to random: 1988
randoop.util.Randomness: total calls to random: 1989
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var3 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var10 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.main.Main.<init>() : 
var14 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var13 
var15 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var16 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var13 var15 
var17 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var12 var15 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  prim : boolean:false : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var18 var20 
var22 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var18 
var23 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var10 var18 
var24 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var3 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 active.
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var3.getParent();
// <NormalExecution object=null>;
var3.deleteObservers();
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var11 = new org.softlang.util.AddToList((java.lang.Object)var10);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var13 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var14 = new org.softlang.util.AddToList((java.lang.Object)var13);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var15 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var13.setSampleCompany((org.softlang.company.Company)var15);
// <NormalExecution object=null>;
var12.setSampleCompany((org.softlang.company.Company)var15);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var20 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var18.setManager(false);
// <NormalExecution object=null>;
double var22 = var12.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
var10.setEmp(var18);
// <NormalExecution object=null>;
boolean var24 = var3.add((org.softlang.company.Subunit)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.PrimValue, value=0.0 [var22]  : true
<randoop.PrimValue, value=true [var24]  : true

allSequences.size()=433
-------------------------------------------
randoop.util.Randomness: total calls to random: 1990
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 1991
randoop.util.Randomness: total calls to random: 1992
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 151 sequences.
components: 151
randoop.util.Randomness: total calls to random: 1993
randoop.util.Randomness: total calls to random: 1994
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 1995
randoop.util.Randomness: total calls to random: 1996
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var6 var12 
var17 =  prim : double:-1.0 : 
var18 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var12 var17 
var19 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var19 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var19 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var19 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var26 =  prim : double:0.0 : 
var27 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var19 var26 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
double var16 = var6.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var17 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var12, (-1.0d));
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var19 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var20 = var19.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var21 = var19.getParent();
// <NormalExecution object=null>;
java.lang.String var22 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var23 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var24 = var19.getName();
// <NormalExecution object=null>;
java.lang.String var25 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var26 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var19, 0.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=cep [var22]  : true
<randoop.PrimValue, value=0.0 [var23]  : true
<randoop.IsNull@25 [var24]  : true
<randoop.PrimValue, value=cep [var25]  : true

allSequences.size()=434
-------------------------------------------
randoop.util.Randomness: total calls to random: 1997
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 1998
randoop.util.Randomness: total calls to random: 1999
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2000
randoop.util.Randomness: total calls to random: 2001
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 
var8 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var10 var13 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var16 
var18 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var13 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var13 
var20 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var21 =  prim : java.lang.String:"hi!" : 
var22 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var20 var21 
var23 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var24 =  prim : java.lang.String:"hi!" : 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var24 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var27 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var20 var23 
var28 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var29 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var23 var28 
var30 =  prim : java.lang.String:"cep" : 
var31 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var30 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var13 var23 
var34 =  prim : java.lang.String:"" : 
var35 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var34 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 active.
Making index 29 inactive (value is null)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var8 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var6.setSampleCompany((org.softlang.company.Company)var8);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var10.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var20 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var21 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var20.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var23 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var24 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var26 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var27 = var20.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var28 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var23.notifyObservers((java.lang.Object)var28);
// <NormalExecution object=null>;
java.lang.String var30 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("cep");
// <NormalExecution object=null>;
java.lang.Iterable var32 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var33 = var13.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var34 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var26]  : true
<randoop.PrimValue, value=true [var27]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.PrimValue, value=true [var33]  : true

allSequences.size()=435
-------------------------------------------
randoop.util.Randomness: total calls to random: 2002
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 2003
randoop.util.Randomness: total calls to random: 2004
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  prim : boolean:false : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var3 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var7 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var5 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var3 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var6 = var5.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var7 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var5.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
java.lang.String var9 = var5.getName();
// <NormalExecution object=null>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var11 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var11]  : true

allSequences.size()=436
-------------------------------------------
randoop.util.Randomness: total calls to random: 2005
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 2006
randoop.util.Randomness: total calls to random: 2007
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2008
randoop.util.Randomness: total calls to random: 2009
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2010
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 152 sequences.
components: 152
randoop.util.Randomness: total calls to random: 2011
randoop.util.Randomness: total calls to random: 2012
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2013
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 2014
randoop.util.Randomness: total calls to random: 2015
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2016
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 326 sequences.
components: 326
randoop.util.Randomness: total calls to random: 2017
randoop.util.Randomness: total calls to random: 2018
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var7 var8 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var11 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var7 var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var7 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var7 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var18 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var19 =  method : java.util.Observable.notifyObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var7 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var13 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var14 = var7.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var15 = var7.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var1.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.notifyObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var14]  : true
<randoop.IsNotNull@1f [var15]  : true

allSequences.size()=437
-------------------------------------------
randoop.util.Randomness: total calls to random: 2019
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 152 sequences.
components: 152
randoop.util.Randomness: total calls to random: 2020
randoop.util.Randomness: total calls to random: 2021
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 
var31 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var32 =  prim : java.lang.String:"" : 
var33 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var31 var32 
var34 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 
var35 =  cons : org.softlang.main.Main.<init>() : 
var36 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var37 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var36 
var38 =  prim : java.lang.String:"cep" : 
var39 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var36 var38 
var40 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var35 var36 
var41 =  prim : java.lang.String:"hi!" : 
var42 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var36 var41 
var43 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var36 
var44 =  method : java.util.Observable.deleteObservers() : var36 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 active.
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is null)
Making index 40 inactive (value is null)
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is null)
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var31 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var32 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
org.softlang.main.Main var35 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var36 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var37 = var36.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var38 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setAddress("cep");
// <NormalExecution object=null>;
var35.setEmp(var36);
// <NormalExecution object=null>;
java.lang.String var41 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setName("hi!");
// <NormalExecution object=null>;
double var43 = var0.getSalary(var36);
// <NormalExecution object=object-of-type-java.lang.Double>;
var36.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=false [var37]  : true
<randoop.PrimValue, value=0.0 [var43]  : true

allSequences.size()=438
-------------------------------------------
randoop.util.Randomness: total calls to random: 2022
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 2023
randoop.util.Randomness: total calls to random: 2024
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2025
randoop.util.Randomness: total calls to random: 2026
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var7 =  prim : double:0.0 : 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var6 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var7 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var6]  : true

allSequences.size()=439
-------------------------------------------
randoop.util.Randomness: total calls to random: 2027
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 2028
randoop.util.Randomness: total calls to random: 2029
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 625 sequences.
components: 625
randoop.util.Randomness: total calls to random: 2030
randoop.util.Randomness: total calls to random: 2031
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : java.util.Observable.countObservers() : var1 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
int var3 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.deleteObservers();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
double var9 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var10 = var1.remove((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.PrimValue, value=false [var10]  : true

allSequences.size()=440
-------------------------------------------
randoop.util.Randomness: total calls to random: 2032
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 2033
randoop.util.Randomness: total calls to random: 2034
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2035
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 2036
randoop.util.Randomness: total calls to random: 2037
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var0 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var2 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var4 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var5 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=0.0 [var5]  : true

allSequences.size()=441
-------------------------------------------
randoop.util.Randomness: total calls to random: 2038
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 2039
randoop.util.Randomness: total calls to random: 2040
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 153 sequences.
components: 153
randoop.util.Randomness: total calls to random: 2041
randoop.util.Randomness: total calls to random: 2042
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2043
randoop.util.Randomness: total calls to random: 2044
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var6 
var8 =  prim : boolean:false : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var8 
var10 =  method : java.util.Observable.deleteObservers() : var6 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var6 
var12 =  prim : boolean:false : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var6 var12 
var14 =  prim : double:100.0 : 
var15 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var14 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var5 = new org.softlang.util.RemoveFromList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var7 = var6.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var8 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.lang.String var11 = var6.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var12 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var6.setManager(false);
// <NormalExecution object=null>;
java.lang.Double var14 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 100.0d);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=cep [var11]  : true

allSequences.size()=442
-------------------------------------------
randoop.util.Randomness: total calls to random: 2045
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 330 sequences.
components: 330
randoop.util.Randomness: total calls to random: 2046
randoop.util.Randomness: total calls to random: 2047
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 
var31 =  method : java.util.Observable.hasChanged() : var28 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
boolean var31 = var28.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=false [var31]  : true

allSequences.size()=443
-------------------------------------------
randoop.util.Randomness: total calls to random: 2048
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 2049
randoop.util.Randomness: total calls to random: 2050
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  prim : java.lang.String:"" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.String var7 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=444
-------------------------------------------
randoop.util.Randomness: total calls to random: 2051
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 156 sequences.
components: 156
randoop.util.Randomness: total calls to random: 2052
randoop.util.Randomness: total calls to random: 2053
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2054
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 2055
randoop.util.Randomness: total calls to random: 2056
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2057
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 92 sequences.
components: 92
randoop.util.Randomness: total calls to random: 2058
randoop.util.Randomness: total calls to random: 2059
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  prim : boolean:false : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var3 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var7 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var5 
var11 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var3 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var6 = var5.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var7 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var5.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
java.lang.String var9 = var5.getName();
// <NormalExecution object=null>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var11 = var0.getManager();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNull@25 [var11]  : true

allSequences.size()=445
-------------------------------------------
randoop.util.Randomness: total calls to random: 2060
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 2061
randoop.util.Randomness: total calls to random: 2062
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2063
randoop.util.Randomness: total calls to random: 2064
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=446
-------------------------------------------
randoop.util.Randomness: total calls to random: 2065
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 2066
randoop.util.Randomness: total calls to random: 2067
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  prim : boolean:false : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var3 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var7 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var5 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var5 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 active.
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
java.lang.Boolean var3 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var6 = var5.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var7 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var5.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
java.lang.String var9 = var5.getName();
// <NormalExecution object=null>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var11 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var6]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var11]  : true

allSequences.size()=447
-------------------------------------------
randoop.util.Randomness: total calls to random: 2068
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 112 sequences.
components: 112
randoop.util.Randomness: total calls to random: 2069
randoop.util.Randomness: total calls to random: 2070
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2071
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 156 sequences.
components: 156
randoop.util.Randomness: total calls to random: 2072
randoop.util.Randomness: total calls to random: 2073
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2074
randoop.util.Randomness: total calls to random: 2075
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var6 =  prim : double:10.0 : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
double var5 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var6 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0.0 [var5]  : true

allSequences.size()=448
-------------------------------------------
randoop.util.Randomness: total calls to random: 2076
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 2077
randoop.util.Randomness: total calls to random: 2078
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
double var4 = var2.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=449
-------------------------------------------
randoop.util.Randomness: total calls to random: 2079
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 2080
randoop.util.Randomness: total calls to random: 2081
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2082
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 636 sequences.
components: 636
randoop.util.Randomness: total calls to random: 2083
randoop.util.Randomness: total calls to random: 2084
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var16 
var18 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var16 var18 
var20 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var15 var18 
var21 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var22 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var21 
var23 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var22 
var24 =  prim : float:-1.0 : 
var25 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var22 var24 
var26 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var22 
var27 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var28 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var26 var27 
var29 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var15 var27 
var30 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var30 
var32 =  prim : boolean:false : 
var33 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var30 var32 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var30 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var30 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var30 
var37 =  prim : double:10.0 : 
var38 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var15 var30 var37 
var39 =  prim : double:100.0 : 
var40 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var30 var39 
var41 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var39 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 41, 41
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 41, 41
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 active.
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is null)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is null)
Making index 41 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var17 = new org.softlang.util.AddToList((java.lang.Object)var16);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var18 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var16.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
var15.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var21 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var22 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var21);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var22.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var24 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var25 = var22.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var26 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var22);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var27 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var28 = var26.add((java.lang.Object)var27);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var15.createSampleCompany((org.softlang.company.factory.Factory)var27);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var30 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var31 = var30.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var32 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var30.setManager(false);
// <NormalExecution object=null>;
java.lang.String var34 = var30.getAddress();
// <NormalExecution object=null>;
java.lang.String var35 = var30.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var36 = var30.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var37 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(var30, 10.0d);
// <NormalExecution object=null>;
java.lang.Double var39 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var30, 100.0d);
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var41 = new org.softlang.util.RemoveFromList((java.lang.Object)100.0d);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=true [var28]  : true
<randoop.PrimValue, value=false [var31]  : true
<randoop.IsNull@25 [var34]  : true
<randoop.PrimValue, value=cep [var35]  : true
<randoop.PrimValue, value=0.0 [var36]  : true

allSequences.size()=450
-------------------------------------------
randoop.util.Randomness: total calls to random: 2085
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 2086
randoop.util.Randomness: total calls to random: 2087
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var6 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var2.getName();
// <NormalExecution object=null>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("");
// <NormalExecution object=null>;
java.lang.String var8 = var2.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNull@25 [var8]  : true

allSequences.size()=451
-------------------------------------------
randoop.util.Randomness: total calls to random: 2088
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 112 sequences.
components: 112
randoop.util.Randomness: total calls to random: 2089
randoop.util.Randomness: total calls to random: 2090
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 365 sequences.
components: 365
randoop.util.Randomness: total calls to random: 2091
randoop.util.Randomness: total calls to random: 2092
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var5 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var8 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var6 var7 
var9 =  method : org.softlang.main.Main.getSampleCompany() : var6 
var10 =  method : org.softlang.main.Main.getSampleCompany() : var6 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var11 
var13 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var11 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var11 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var11 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var6 var11 
var17 =  cons : org.softlang.main.Main.<init>() : 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var20 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var18 var19 
var21 =  method : org.softlang.main.Main.getSampleCompany() : var18 
var22 =  method : org.softlang.main.Main.getSampleCompany() : var18 
var23 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var24 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var23 
var26 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var27 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var26 
var28 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var26 
var29 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var26 
var30 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var26 
var31 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var23 var26 
var32 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var18 var26 
var33 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var17 var26 
var34 =  method : org.softlang.main.Main.getEmp() : var17 
var35 =  prim : double:100.0 : 
var36 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var6 var34 var35 
var37 =  method : java.util.Observable.hasChanged() : var34 
var38 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var34 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 24, 24
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 24, 24
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 active.
Making index 23 active.
Making index 24 active.
Making index 25 inactive (value is null)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var4 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var5 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var7 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var6.createSampleCompany((org.softlang.company.factory.Factory)var7);
// <NormalExecution object=null>;
org.softlang.company.Company var9 = var6.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var10 = var6.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var12 = var11.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var13 = var11.getParent();
// <NormalExecution object=null>;
java.lang.String var14 = var11.getAddress();
// <NormalExecution object=null>;
double var15 = var11.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var6.setEmp(var11);
// <NormalExecution object=null>;
org.softlang.main.Main var17 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var19 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var18.createSampleCompany((org.softlang.company.factory.Factory)var19);
// <NormalExecution object=null>;
org.softlang.company.Company var21 = var18.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var22 = var18.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var23 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var24 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var25 = var23.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var26 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var27 = var26.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var28 = var26.getParent();
// <NormalExecution object=null>;
java.lang.String var29 = var26.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var30 = var26.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var31 = var23.remove((org.softlang.company.Subunit)var26);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var32 = var18.getSalary(var26);
// <NormalExecution object=object-of-type-java.lang.Double>;
var17.setEmp(var26);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var34 = var17.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var35 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var6.setSalary(var34, 100.0d);
// <NormalExecution object=null>;
boolean var37 = var34.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var38 = var0.remove((org.softlang.company.Subunit)var34);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.IsNotNull@1f [var9]  : true
<randoop.IsNotNull@1f [var10]  : true
<randoop.PrimValue, value=false [var12]  : true
<randoop.IsNull@25 [var13]  : true
<randoop.IsNull@25 [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var21]  : true
<randoop.IsNotNull@1f [var22]  : true
<randoop.IsNotNull@1f [var24]  : true
<randoop.IsNull@25 [var25]  : true
<randoop.PrimValue, value=false [var27]  : true
<randoop.IsNull@25 [var28]  : true
<randoop.PrimValue, value=cep [var29]  : true
<randoop.PrimValue, value=0.0 [var30]  : true
<randoop.PrimValue, value=false [var31]  : true
<randoop.PrimValue, value=0.0 [var32]  : true
<randoop.IsNotNull@1f [var34]  : true
<randoop.PrimValue, value=false [var37]  : true
<randoop.PrimValue, value=false [var38]  : true

allSequences.size()=452
-------------------------------------------
randoop.util.Randomness: total calls to random: 2093
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 2094
randoop.util.Randomness: total calls to random: 2095
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.main.Main.<init>() : 
var10 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var9 
var11 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var9 var11 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var9 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var9 
var16 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var17 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var16 
var18 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var16 
var21 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var9 var16 
var22 =  prim : java.lang.String:"" : 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var16 var22 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var16 
var25 =  method : java.util.Observable.deleteObservers() : var16 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var16 
var27 =  method : java.util.Observable.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.main.Main var9 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var10 = new org.softlang.util.AddToList((java.lang.Object)var9);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var11 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var9.setSampleCompany((org.softlang.company.Company)var11);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var9.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var9.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var16 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var17 = var16.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var18 = var16.getParent();
// <NormalExecution object=null>;
double var19 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var20 = var16.getParent();
// <NormalExecution object=null>;
double var21 = var9.getSalary(var16);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var22 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var16.setAddress("");
// <NormalExecution object=null>;
double var24 = var16.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var16.deleteObservers();
// <NormalExecution object=null>;
boolean var26 = var0.add((org.softlang.company.Subunit)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.PrimValue, value=false [var17]  : true
<randoop.IsNull@25 [var18]  : true
<randoop.PrimValue, value=0.0 [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=0.0 [var21]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=true [var26]  : true

allSequences.size()=453
-------------------------------------------
randoop.util.Randomness: total calls to random: 2096
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 2097
randoop.util.Randomness: total calls to random: 2098
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 368 sequences.
components: 368
randoop.util.Randomness: total calls to random: 2099
randoop.util.Randomness: total calls to random: 2100
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var9 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var0 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var10 
var12 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var13 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var10 var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var12 
var17 =  prim : java.lang.String:"" : 
var18 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var12 var17 
var19 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.company.Employee var9 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = var10.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var12 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var10.notifyObservers((java.lang.Object)var12);
// <NormalExecution object=null>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
java.lang.String var16 = var12.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var17 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var12.setAddress("");
// <NormalExecution object=null>;
boolean var19 = var0.add((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.PrimValue, value=hi! [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var16]  : true
<randoop.PrimValue, value=true [var19]  : true

allSequences.size()=454
-------------------------------------------
randoop.util.Randomness: total calls to random: 2101
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 2102
randoop.util.Randomness: total calls to random: 2103
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 370 sequences.
components: 370
randoop.util.Randomness: total calls to random: 2104
randoop.util.Randomness: total calls to random: 2105
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  prim : java.lang.String:"cep" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var4 
var6 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var9 var10 
var12 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var12 var13 
var15 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var12 
var16 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var9 var12 
var17 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var18 =  prim : java.lang.String:"hi!" : 
var19 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var17 var18 
var20 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var21 =  prim : java.lang.String:"hi!" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var20 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var20 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var17 var20 
var25 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var26 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var20 var25 
var27 =  prim : java.lang.String:"cep" : 
var28 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var20 var27 
var29 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var12 var20 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var6 var12 
var31 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 inactive (value is a primitive)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("cep");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var6 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var9 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var9.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var12 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var12.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var15 = var12.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var16 = var9.add((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var17 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var18 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var17.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var20 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var21 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var20.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var23 = var20.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var24 = var17.add((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var25 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var20.notifyObservers((java.lang.Object)var25);
// <NormalExecution object=null>;
java.lang.String var27 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var20.setName("cep");
// <NormalExecution object=null>;
boolean var29 = var12.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var30 = var6.add((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var31 = var0.remove((org.softlang.company.Subunit)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.PrimValue, value=true [var16]  : true
<randoop.IsNotNull@1f [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=true [var30]  : true
<randoop.PrimValue, value=false [var31]  : true

allSequences.size()=455
-------------------------------------------
randoop.util.Randomness: total calls to random: 2106
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 2107
randoop.util.Randomness: total calls to random: 2108
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 2109
randoop.util.Randomness: total calls to random: 2110
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var5 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var5 
var10 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var5 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.main.Main.<init>() : 
var13 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var14 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var12 var13 
var15 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var16 =  method : org.softlang.main.Main.getSampleCompany() : var12 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var17 
var19 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var17 
var20 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var20 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var20 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var20 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var20 
var25 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var17 var20 
var26 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var12 var20 
var27 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var11 var20 
var28 =  method : org.softlang.main.Main.getEmp() : var11 
var29 =  prim : double:100.0 : 
var30 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var28 var29 
var31 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var32 =  prim : java.lang.String:"" : 
var33 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var31 var32 
var34 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 
var35 =  cons : org.softlang.main.Main.<init>() : 
var36 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var37 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var36 
var38 =  prim : java.lang.String:"cep" : 
var39 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var36 var38 
var40 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var35 var36 
var41 =  prim : java.lang.String:"hi!" : 
var42 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var36 var41 
var43 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var36 
var44 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var45 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var44 
var46 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var44 
var47 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var44 
var48 =  prim : boolean:false : 
var49 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var44 var48 
var50 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var44 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 active.
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 active.
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is null)
Making index 40 inactive (value is null)
Making index 41 inactive (value is a primitive)
Making index 42 inactive (value is null)
Making index 43 inactive (value is a primitive)
Making index 44 active.
Making index 45 inactive (value is a primitive)
Making index 46 inactive (value is null)
Making index 47 inactive (value is null)
Making index 48 inactive (value is a primitive)
Making index 49 inactive (value is null)
Making index 50 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
java.lang.String var8 = var5.getAddress();
// <NormalExecution object=null>;
double var9 = var5.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var5);
// <NormalExecution object=null>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var12 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var13 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var12.createSampleCompany((org.softlang.company.factory.Factory)var13);
// <NormalExecution object=null>;
org.softlang.company.Company var15 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var16 = var12.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var18 = var17.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var19 = var17.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var20 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var21 = var20.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var22 = var20.getParent();
// <NormalExecution object=null>;
java.lang.String var23 = var20.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var24 = var20.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var25 = var17.remove((org.softlang.company.Subunit)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var26 = var12.getSalary(var20);
// <NormalExecution object=object-of-type-java.lang.Double>;
var11.setEmp(var20);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = var11.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var29 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var28, 100.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var31 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var32 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
org.softlang.main.Main var35 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var36 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var37 = var36.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var38 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setAddress("cep");
// <NormalExecution object=null>;
var35.setEmp(var36);
// <NormalExecution object=null>;
java.lang.String var41 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var36.setName("hi!");
// <NormalExecution object=null>;
double var43 = var0.getSalary(var36);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.EmployeeImpl var44 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var45 = var44.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var46 = var44.getParent();
// <NormalExecution object=null>;
java.lang.String var47 = var44.getAddress();
// <NormalExecution object=null>;
java.lang.Boolean var48 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var44.setManager(false);
// <NormalExecution object=null>;
double var50 = var0.getSalary(var44);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=0.0 [var9]  : true
<randoop.IsNotNull@1f [var15]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.IsNull@25 [var19]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNull@25 [var22]  : true
<randoop.PrimValue, value=cep [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=0.0 [var26]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=false [var37]  : true
<randoop.PrimValue, value=0.0 [var43]  : true
<randoop.PrimValue, value=false [var45]  : true
<randoop.IsNull@25 [var46]  : true
<randoop.IsNull@25 [var47]  : true
<randoop.PrimValue, value=0.0 [var50]  : true

allSequences.size()=456
-------------------------------------------
randoop.util.Randomness: total calls to random: 2111
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 2112
randoop.util.Randomness: total calls to random: 2113
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var2 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
boolean var7 = var2.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("hi!");
// <NormalExecution object=null>;
java.lang.String var10 = var2.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=hi! [var10]  : true

allSequences.size()=457
-------------------------------------------
randoop.util.Randomness: total calls to random: 2114
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 2115
randoop.util.Randomness: total calls to random: 2116
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var4 =  prim : double:0.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getName();
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var6 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=458
-------------------------------------------
randoop.util.Randomness: total calls to random: 2117
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 2118
randoop.util.Randomness: total calls to random: 2119
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2120
randoop.util.Randomness: total calls to random: 2121
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : double:0.0 : 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 
var6 =  prim : java.lang.String:"cep" : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.Double var3 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.String var6 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("cep");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var5]  : true

allSequences.size()=459
-------------------------------------------
randoop.util.Randomness: total calls to random: 2122
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 342 sequences.
components: 342
randoop.util.Randomness: total calls to random: 2123
randoop.util.Randomness: total calls to random: 2124
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  prim : java.lang.String:"hi!" : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var4 var5 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var4 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var4 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var4 
var10 =  method : java.util.Observable.countObservers() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var3 = var0.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var5 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var4.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var7 = var4.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var4.deleteObservers();
// <NormalExecution object=null>;
boolean var9 = var0.add((org.softlang.company.Subunit)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
int var10 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.PrimValue, value=true [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=460
-------------------------------------------
randoop.util.Randomness: total calls to random: 2125
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 160 sequences.
components: 160
randoop.util.Randomness: total calls to random: 2126
randoop.util.Randomness: total calls to random: 2127
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2128
randoop.util.Randomness: total calls to random: 2129
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  prim : double:1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var9 =  prim : double:0.0 : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var9 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var5 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var8 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var9 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(0.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true

allSequences.size()=461
-------------------------------------------
randoop.util.Randomness: total calls to random: 2130
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 2131
randoop.util.Randomness: total calls to random: 2132
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var6 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var5 
var7 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var6 
var8 =  method : org.softlang.util.ObservableSimpleList.iterator() : var6 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var6 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var9 
var12 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var5 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var6 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var5);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var6.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var8 = var6.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var6);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var4.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var9);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var12 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var11);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var8]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=462
-------------------------------------------
randoop.util.Randomness: total calls to random: 2133
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 2134
randoop.util.Randomness: total calls to random: 2135
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var15 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var14 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Making index 15 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var15 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var14);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true

allSequences.size()=463
-------------------------------------------
randoop.util.Randomness: total calls to random: 2136
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 2137
randoop.util.Randomness: total calls to random: 2138
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var5 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var5 
var8 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var8 
var10 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var8 
var11 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var8 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var8 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var8 
var14 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var8 
var15 =  cons : org.softlang.main.Main.<init>() : 
var16 =  cons : org.softlang.main.Main.<init>() : 
var17 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var16 
var18 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var16 var18 
var20 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var15 var18 
var21 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var22 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var21 
var23 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var22 
var24 =  prim : float:-1.0 : 
var25 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var22 var24 
var26 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var22 
var27 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var28 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var26 var27 
var29 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var15 var27 
var30 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var30 
var32 =  prim : boolean:false : 
var33 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var30 var32 
var34 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var30 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var30 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var30 
var37 =  prim : double:10.0 : 
var38 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var15 var30 var37 
var39 =  prim : double:100.0 : 
var40 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var30 var39 
var41 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var30 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 active.
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Making index 21 active.
Making index 22 active.
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is a primitive)
Making index 29 inactive (value is null)
Making index 30 active.
Making index 31 inactive (value is a primitive)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is null)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is null)
Making index 41 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var6 = var5.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var7 = var5.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var8 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var9 = var8.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var10 = var8.getParent();
// <NormalExecution object=null>;
java.lang.String var11 = var8.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var12 = var8.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var13 = var5.remove((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var14 = var0.getSalary(var8);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var15 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var16 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var17 = new org.softlang.util.AddToList((java.lang.Object)var16);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var18 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var16.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
var15.setSampleCompany((org.softlang.company.Company)var18);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var21 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var22 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var21);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var22.deleteObservers();
// <NormalExecution object=null>;
java.lang.Float var24 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var25 = var22.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var26 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var22);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.factory.BeanFactory var27 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
boolean var28 = var26.add((java.lang.Object)var27);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var15.createSampleCompany((org.softlang.company.factory.Factory)var27);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var30 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var31 = var30.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var32 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var30.setManager(false);
// <NormalExecution object=null>;
java.lang.String var34 = var30.getAddress();
// <NormalExecution object=null>;
java.lang.String var35 = var30.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var36 = var30.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var37 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var15.setSalary(var30, 10.0d);
// <NormalExecution object=null>;
java.lang.Double var39 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var30, 100.0d);
// <NormalExecution object=null>;
java.lang.String var41 = var30.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNull@25 [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=cep [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var14]  : true
<randoop.PrimValue, value=false [var25]  : true
<randoop.PrimValue, value=true [var28]  : true
<randoop.PrimValue, value=false [var31]  : true
<randoop.IsNull@25 [var34]  : true
<randoop.PrimValue, value=cep [var35]  : true
<randoop.PrimValue, value=0.0 [var36]  : true
<randoop.PrimValue, value=cep [var41]  : true

allSequences.size()=464
-------------------------------------------
randoop.util.Randomness: total calls to random: 2139
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 2140
randoop.util.Randomness: total calls to random: 2141
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2142
randoop.util.Randomness: total calls to random: 2143
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var3 
var5 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : var0 
var6 =  prim : boolean:false : 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var0 var6 
var8 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var0 
var9 =  prim : double:1.0 : 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var0 var9 
var11 =  prim : java.lang.String:"" : 
var12 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.pojo.EmployeeImpl var0 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
java.lang.Double var1 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
boolean var5 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var6 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;
double var8 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var9 = new java.lang.Double(1.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(1.0d);
// <NormalExecution object=null>;
java.lang.String var11 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=-1.0 [var8]  : true

allSequences.size()=465
-------------------------------------------
randoop.util.Randomness: total calls to random: 2144
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 349 sequences.
components: 349
randoop.util.Randomness: total calls to random: 2145
randoop.util.Randomness: total calls to random: 2146
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 658 sequences.
components: 658
randoop.util.Randomness: total calls to random: 2147
randoop.util.Randomness: total calls to random: 2148
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var7 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var8 =  method : java.util.Observable.countObservers() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var7 
var10 =  prim : boolean:false : 
var11 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var7 var10 
var12 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
java.lang.String var6 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
org.softlang.company.impl.bean.DepartmentImpl var7 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var8 = var7.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var9 = var7.getName();
// <NormalExecution object=null>;
java.lang.Boolean var10 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var7.notifyObservers((java.lang.Object)false);
// <NormalExecution object=null>;
var0.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.IsNull@25 [var9]  : true

allSequences.size()=466
-------------------------------------------
randoop.util.Randomness: total calls to random: 2149
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 2150
randoop.util.Randomness: total calls to random: 2151
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2152
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getCep()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 2153
randoop.util.Randomness: total calls to random: 2154
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2155
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 2156
randoop.util.Randomness: total calls to random: 2157
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2158
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 351 sequences.
components: 351
randoop.util.Randomness: total calls to random: 2159
randoop.util.Randomness: total calls to random: 2160
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
int var9 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=467
-------------------------------------------
randoop.util.Randomness: total calls to random: 2161
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 352 sequences.
components: 352
randoop.util.Randomness: total calls to random: 2162
randoop.util.Randomness: total calls to random: 2163
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=468
-------------------------------------------
randoop.util.Randomness: total calls to random: 2164
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 2165
randoop.util.Randomness: total calls to random: 2166
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 384 sequences.
components: 384
randoop.util.Randomness: total calls to random: 2167
randoop.util.Randomness: total calls to random: 2168
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var1 
var3 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var4 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var3 
var5 =  prim : java.lang.String:"cep" : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var1 var5 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var2 = var1.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var3 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var1.notifyObservers((java.lang.Object)var3);
// <NormalExecution object=null>;
java.lang.String var5 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setName("cep");
// <NormalExecution object=null>;
boolean var7 = var0.add((org.softlang.company.Subunit)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=true [var7]  : true

allSequences.size()=469
-------------------------------------------
randoop.util.Randomness: total calls to random: 2169
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 164 sequences.
components: 164
randoop.util.Randomness: total calls to random: 2170
randoop.util.Randomness: total calls to random: 2171
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
boolean var6 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=cep [var3]  : true
<randoop.PrimValue, value=0.0 [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=470
-------------------------------------------
randoop.util.Randomness: total calls to random: 2172
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 120 sequences.
components: 120
randoop.util.Randomness: total calls to random: 2173
randoop.util.Randomness: total calls to random: 2174
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2175
randoop.util.Randomness: total calls to random: 2176
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var8 
var10 =  prim : java.lang.String:"cep" : 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var10 
var12 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var8 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var3.notifyObservers((java.lang.Object)var8);
// <NormalExecution object=null>;
java.lang.String var10 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("cep");
// <NormalExecution object=null>;
java.lang.Iterable var12 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNotNull@1f [var12]  : true

allSequences.size()=471
-------------------------------------------
randoop.util.Randomness: total calls to random: 2177
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2178
randoop.util.Randomness: total calls to random: 2179
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 
var8 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var9 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.main.Main.<init>() : 
var12 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var11 
var13 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var14 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var11 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var10 var13 
var16 =  prim : java.lang.String:"hi!" : 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var13 var16 
var18 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var13 
var19 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var13 
var20 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var21 =  prim : java.lang.String:"hi!" : 
var22 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var20 var21 
var23 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var24 =  prim : java.lang.String:"hi!" : 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var24 
var26 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var27 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var20 var23 
var28 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var29 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var23 var28 
var30 =  prim : java.lang.String:"cep" : 
var31 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var30 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var23 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var13 var23 
var34 =  prim : java.lang.String:"" : 
var35 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var23 var34 
var36 =  method : java.util.Observable.countObservers() : var23 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 active.
Making index 13 active.
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 active.
Making index 27 inactive (value is a primitive)
Making index 28 active.
Making index 29 inactive (value is null)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 active.
Making index 33 inactive (value is a primitive)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Making index 36 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var8 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var6.setSampleCompany((org.softlang.company.Company)var8);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var11 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var12 = new org.softlang.util.AddToList((java.lang.Object)var11);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var13 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var11.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var10.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
java.lang.String var16 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var13.setName("hi!");
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var13);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var20 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var21 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var20.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var23 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var24 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var26 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var27 = var20.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var28 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var23.notifyObservers((java.lang.Object)var28);
// <NormalExecution object=null>;
java.lang.String var30 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("cep");
// <NormalExecution object=null>;
java.lang.Iterable var32 = var23.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var33 = var13.add((org.softlang.company.Subunit)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var34 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("");
// <NormalExecution object=null>;
int var36 = var23.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.IsNotNull@1f [var26]  : true
<randoop.PrimValue, value=true [var27]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.PrimValue, value=true [var33]  : true
<randoop.PrimValue, value=0 [var36]  : true

allSequences.size()=472
-------------------------------------------
randoop.util.Randomness: total calls to random: 2180
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 2181
randoop.util.Randomness: total calls to random: 2182
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : double:0.0 : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : var2 var8 
var10 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var8 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var2.setSalary(0.0d);
// <NormalExecution object=null>;
double var10 = var2.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true
<randoop.PrimValue, value=0.0 [var10]  : true

allSequences.size()=473
-------------------------------------------
randoop.util.Randomness: total calls to random: 2183
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 2184
randoop.util.Randomness: total calls to random: 2185
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2186
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 2187
randoop.util.Randomness: total calls to random: 2188
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2189
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 2190
randoop.util.Randomness: total calls to random: 2191
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2192
randoop.util.Randomness: total calls to random: 2193
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var6 var8 
var10 =  cons : org.softlang.main.Main.<init>() : 
var11 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var12 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var10 var11 
var13 =  method : org.softlang.main.Main.getSampleCompany() : var10 
var14 =  method : org.softlang.main.Main.getSampleCompany() : var10 
var15 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var16 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var15 
var17 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var15 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var18 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var18 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var18 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var15 var18 
var24 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var10 var18 
var25 =  cons : org.softlang.main.Main.<init>() : 
var26 =  cons : org.softlang.main.Main.<init>() : 
var27 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var28 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var26 var27 
var29 =  method : org.softlang.main.Main.getSampleCompany() : var26 
var30 =  method : org.softlang.main.Main.getSampleCompany() : var26 
var31 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var32 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var31 
var33 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var31 
var34 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var35 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var34 
var36 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var34 
var37 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var34 
var38 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var34 
var39 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var31 var34 
var40 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var26 var34 
var41 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var25 var34 
var42 =  method : org.softlang.main.Main.getEmp() : var25 
var43 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var18 var25 
var44 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var18 
var45 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var18 
var46 =  prim : double:100.0 : 
var47 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var18 var46 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 26, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 26
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 26, 26
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 active.
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 active.
Making index 26 active.
Making index 27 active.
Making index 28 inactive (value is null)
Making index 29 active.
Making index 30 active.
Making index 31 active.
Making index 32 active.
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 inactive (value is a primitive)
Making index 36 inactive (value is null)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is null)
Making index 42 active.
Making index 43 inactive (value is null)
Making index 44 active.
Making index 45 inactive (value is a primitive)
Making index 46 inactive (value is a primitive)
Making index 47 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var7 = var6.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var6, 10.0d);
// <NormalExecution object=null>;
org.softlang.main.Main var10 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var11 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var10.createSampleCompany((org.softlang.company.factory.Factory)var11);
// <NormalExecution object=null>;
org.softlang.company.Company var13 = var10.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var14 = var10.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var15 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var16 = var15.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var17 = var15.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var20 = var18.getParent();
// <NormalExecution object=null>;
java.lang.String var21 = var18.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var22 = var18.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var23 = var15.remove((org.softlang.company.Subunit)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var24 = var10.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var25 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var26 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var27 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var26.createSampleCompany((org.softlang.company.factory.Factory)var27);
// <NormalExecution object=null>;
org.softlang.company.Company var29 = var26.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var30 = var26.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var31 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var32 = var31.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var33 = var31.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var34 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var35 = var34.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var36 = var34.getParent();
// <NormalExecution object=null>;
java.lang.String var37 = var34.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var38 = var34.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var39 = var31.remove((org.softlang.company.Subunit)var34);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var40 = var26.getSalary(var34);
// <NormalExecution object=object-of-type-java.lang.Double>;
var25.setEmp(var34);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var42 = var25.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var18.notifyObservers((java.lang.Object)var25);
// <NormalExecution object=null>;
org.softlang.util.AddToList var44 = new org.softlang.util.AddToList((java.lang.Object)var18);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
double var45 = var0.getSalary(var18);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var46 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var18.setSalary(100.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.IsNotNull@1f [var14]  : true
<randoop.IsNotNull@1f [var16]  : true
<randoop.IsNull@25 [var17]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.IsNull@25 [var20]  : true
<randoop.PrimValue, value=cep [var21]  : true
<randoop.PrimValue, value=0.0 [var22]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.IsNotNull@1f [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.IsNotNull@1f [var32]  : true
<randoop.IsNull@25 [var33]  : true
<randoop.PrimValue, value=false [var35]  : true
<randoop.IsNull@25 [var36]  : true
<randoop.PrimValue, value=cep [var37]  : true
<randoop.PrimValue, value=0.0 [var38]  : true
<randoop.PrimValue, value=false [var39]  : true
<randoop.PrimValue, value=0.0 [var40]  : true
<randoop.IsNotNull@1f [var42]  : true
<randoop.PrimValue, value=0.0 [var45]  : true

allSequences.size()=474
-------------------------------------------
randoop.util.Randomness: total calls to random: 2194
Selected statement: org.softlang.company.impl.pojo.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ComponentImpl
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 2195
randoop.util.Randomness: total calls to random: 2196
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var6 var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var10 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var3 var6 
var11 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var11 var12 
var14 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var15 =  prim : java.lang.String:"hi!" : 
var16 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var15 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var14 
var18 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var11 var14 
var19 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var14 var19 
var21 =  prim : java.lang.String:"cep" : 
var22 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var14 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var14 
var24 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var6 
var25 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.DepartmentImpl var3 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var9 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var10 = var3.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var11 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var14 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var15 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var17 = var14.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var18 = var11.add((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var19 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
var14.notifyObservers((java.lang.Object)var19);
// <NormalExecution object=null>;
java.lang.String var21 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var14.setName("cep");
// <NormalExecution object=null>;
boolean var23 = var6.remove((org.softlang.company.Subunit)var14);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var0.add((org.softlang.company.Subunit)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var25 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.IsNotNull@1f [var17]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true
<randoop.PrimValue, value=hi! [var25]  : true

allSequences.size()=475
-------------------------------------------
randoop.util.Randomness: total calls to random: 2197
Selected statement: org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.CompanyImpl
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 2198
randoop.util.Randomness: total calls to random: 2199
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2200
randoop.util.Randomness: total calls to random: 2201
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : java.util.Observable.countObservers() : var1 
var3 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var1 
var4 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var1 
var5 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var5 var6 
var8 =  method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : var5 
var9 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var5 
var10 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var2 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var3 = var1.getName();
// <NormalExecution object=null>;
boolean var4 = var0.add((org.softlang.company.Subunit)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var5 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var5.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.Employee var8 = var5.getManager();
// <NormalExecution object=null>;
java.lang.Iterable var9 = var5.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.IsNotNull@1f [var9]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=476
-------------------------------------------
randoop.util.Randomness: total calls to random: 2202
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 358 sequences.
components: 358
randoop.util.Randomness: total calls to random: 2203
randoop.util.Randomness: total calls to random: 2204
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var3 =  method : java.util.Observable.hasChanged() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  prim : java.lang.String:"" : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var5 
var7 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var2 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
int var7 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=477
-------------------------------------------
randoop.util.Randomness: total calls to random: 2205
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 359 sequences.
components: 359
randoop.util.Randomness: total calls to random: 2206
randoop.util.Randomness: total calls to random: 2207
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : boolean:false : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 
var4 =  method : java.util.Observable.countObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Boolean var2 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var3 = var1.remove((java.lang.Object)false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
int var4 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=478
-------------------------------------------
randoop.util.Randomness: total calls to random: 2208
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2209
randoop.util.Randomness: total calls to random: 2210
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var4 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
java.lang.String var3 = var0.getAddress();
// <NormalExecution object=null>;
boolean var4 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=479
-------------------------------------------
randoop.util.Randomness: total calls to random: 2211
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 122 sequences.
components: 122
randoop.util.Randomness: total calls to random: 2212
randoop.util.Randomness: total calls to random: 2213
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  method : java.util.Observable.hasChanged() : var0 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 active.
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var9 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var10 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.IsNotNull@1f [var10]  : true

allSequences.size()=480
-------------------------------------------
randoop.util.Randomness: total calls to random: 2214
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 168 sequences.
components: 168
randoop.util.Randomness: total calls to random: 2215
randoop.util.Randomness: total calls to random: 2216
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2217
Selected statement: org.softlang.company.impl.pojo.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.ContainerImpl
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 2218
randoop.util.Randomness: total calls to random: 2219
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : java.util.Observable.countObservers() : var1 
var3 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var1 
var4 =  method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : var0 var1 
var5 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.pojo.CompanyImpl var0 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var2 = var1.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var3 = var1.getName();
// <NormalExecution object=null>;
boolean var4 = var0.add((org.softlang.company.Subunit)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var5 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
<randoop.PrimValue, value=0 [var2]  : true
<randoop.IsNull@25 [var3]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.IsNotNull@1f [var5]  : true

allSequences.size()=481
-------------------------------------------
randoop.util.Randomness: total calls to random: 2220
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 2221
randoop.util.Randomness: total calls to random: 2222
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var7 
var11 =  prim : double:0.0 : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var7 var11 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var4 var7 
var14 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var4 
var15 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var16 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var15 
var17 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 
var19 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var20 =  method : java.util.Observable.countObservers() : var19 
var21 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var16 var20 
var22 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var23 =  prim : java.lang.String:"hi!" : 
var24 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var22 var23 
var25 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var26 =  prim : java.lang.String:"hi!" : 
var27 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var25 var26 
var28 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var25 
var29 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var22 var25 
var30 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var22 
var31 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var16 var22 
var32 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var14 var16 
var33 =  method : org.softlang.util.ObservableSimpleList.iterator() : var16 
var34 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var16 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 active.
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 active.
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 active.
Making index 34 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var4 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var4.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
java.lang.String var10 = var7.getName();
// <NormalExecution object=null>;
java.lang.Double var11 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var7.setSalary(0.0d);
// <NormalExecution object=null>;
boolean var13 = var4.add((java.lang.Object)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var14 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var4);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var15 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var16 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var15);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var16.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var18 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var19 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var20 = var19.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var21 = var16.remove((java.lang.Object)var20);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var22 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var23 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var22.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var25 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var26 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var25.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var28 = var25.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var29 = var22.add((org.softlang.company.Subunit)var25);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var30 = var22.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var16.notifyObservers((java.lang.Object)var22);
// <NormalExecution object=null>;
boolean var32 = var14.add((java.lang.Object)var16);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.util.Iterator var33 = var16.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
var16.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.IsNull@25 [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.IsNotNull@1f [var18]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=false [var21]  : true
<randoop.IsNotNull@1f [var28]  : true
<randoop.PrimValue, value=true [var29]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.PrimValue, value=true [var32]  : true
<randoop.IsNotNull@1f [var33]  : true

allSequences.size()=482
-------------------------------------------
randoop.util.Randomness: total calls to random: 2223
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 168 sequences.
components: 168
randoop.util.Randomness: total calls to random: 2224
randoop.util.Randomness: total calls to random: 2225
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var3 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var9 = new org.softlang.util.RemoveFromList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
java.lang.String var10 = var3.getAddress();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var10]  : true

allSequences.size()=483
-------------------------------------------
randoop.util.Randomness: total calls to random: 2226
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 72 sequences.
components: 72
randoop.util.Randomness: total calls to random: 2227
randoop.util.Randomness: total calls to random: 2228
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 169 sequences.
components: 169
randoop.util.Randomness: total calls to random: 2229
randoop.util.Randomness: total calls to random: 2230
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  cons : org.softlang.main.Main.<init>() : 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var18 
var20 =  prim : java.lang.String:"cep" : 
var21 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var18 var20 
var22 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var17 var18 
var23 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var23 
var25 =  prim : double:10.0 : 
var26 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var17 var23 var25 
var27 =  cons : org.softlang.main.Main.<init>() : 
var28 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var29 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var27 var28 
var30 =  method : org.softlang.main.Main.getSampleCompany() : var27 
var31 =  method : org.softlang.main.Main.getSampleCompany() : var27 
var32 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var33 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var32 
var34 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var32 
var35 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var36 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var35 
var37 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var35 
var38 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var35 
var39 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var35 
var40 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var32 var35 
var41 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var27 var35 
var42 =  cons : org.softlang.main.Main.<init>() : 
var43 =  cons : org.softlang.main.Main.<init>() : 
var44 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var45 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var43 var44 
var46 =  method : org.softlang.main.Main.getSampleCompany() : var43 
var47 =  method : org.softlang.main.Main.getSampleCompany() : var43 
var48 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var49 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var48 
var50 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var48 
var51 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var52 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var51 
var53 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var51 
var54 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var51 
var55 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var51 
var56 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var48 var51 
var57 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var43 var51 
var58 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var42 var51 
var59 =  method : org.softlang.main.Main.getEmp() : var42 
var60 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var35 var42 
var61 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var35 
var62 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var17 var35 
var63 =  prim : double:100.0 : 
var64 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var35 var63 
var65 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var35 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 44, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 44
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 44, 44
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 32, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 32
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 32, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 32
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 48
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 61, 61
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 61, 61
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is null)
Making index 27 active.
Making index 28 active.
Making index 29 inactive (value is null)
Making index 30 active.
Making index 31 active.
Making index 32 active.
Making index 33 active.
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 inactive (value is a primitive)
Making index 37 inactive (value is null)
Making index 38 inactive (value is a primitive)
Making index 39 inactive (value is a primitive)
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is a primitive)
Making index 42 active.
Making index 43 active.
Making index 44 active.
Making index 45 inactive (value is null)
Making index 46 active.
Making index 47 active.
Making index 48 active.
Making index 49 active.
Making index 50 inactive (value is null)
Making index 51 active.
Making index 52 inactive (value is a primitive)
Making index 53 inactive (value is null)
Making index 54 inactive (value is a primitive)
Making index 55 inactive (value is a primitive)
Making index 56 inactive (value is a primitive)
Making index 57 inactive (value is a primitive)
Making index 58 inactive (value is null)
Making index 59 active.
Making index 60 inactive (value is null)
Making index 61 active.
Making index 62 inactive (value is a primitive)
Making index 63 inactive (value is a primitive)
Making index 64 inactive (value is null)
Making index 65 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.main.Main var17 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var19 = var18.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var20 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var18.setAddress("cep");
// <NormalExecution object=null>;
var17.setEmp(var18);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var23 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var24 = var23.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var25 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var17.setSalary(var23, 10.0d);
// <NormalExecution object=null>;
org.softlang.main.Main var27 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var28 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var27.createSampleCompany((org.softlang.company.factory.Factory)var28);
// <NormalExecution object=null>;
org.softlang.company.Company var30 = var27.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var31 = var27.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var32 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var33 = var32.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var34 = var32.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var35 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var36 = var35.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var37 = var35.getParent();
// <NormalExecution object=null>;
java.lang.String var38 = var35.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var39 = var35.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var40 = var32.remove((org.softlang.company.Subunit)var35);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var41 = var27.getSalary(var35);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.main.Main var42 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var43 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var44 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var43.createSampleCompany((org.softlang.company.factory.Factory)var44);
// <NormalExecution object=null>;
org.softlang.company.Company var46 = var43.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var47 = var43.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var48 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var49 = var48.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var50 = var48.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var51 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var52 = var51.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var53 = var51.getParent();
// <NormalExecution object=null>;
java.lang.String var54 = var51.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var55 = var51.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var56 = var48.remove((org.softlang.company.Subunit)var51);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var57 = var43.getSalary(var51);
// <NormalExecution object=object-of-type-java.lang.Double>;
var42.setEmp(var51);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var59 = var42.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
var35.notifyObservers((java.lang.Object)var42);
// <NormalExecution object=null>;
org.softlang.util.AddToList var61 = new org.softlang.util.AddToList((java.lang.Object)var35);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
double var62 = var17.getSalary(var35);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var63 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var35.setSalary(100.0d);
// <NormalExecution object=null>;
double var65 = var0.getSalary(var35);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.PrimValue, value=false [var19]  : true
<randoop.PrimValue, value=0.0 [var24]  : true
<randoop.IsNotNull@1f [var30]  : true
<randoop.IsNotNull@1f [var31]  : true
<randoop.IsNotNull@1f [var33]  : true
<randoop.IsNull@25 [var34]  : true
<randoop.PrimValue, value=false [var36]  : true
<randoop.IsNull@25 [var37]  : true
<randoop.PrimValue, value=cep [var38]  : true
<randoop.PrimValue, value=0.0 [var39]  : true
<randoop.PrimValue, value=false [var40]  : true
<randoop.PrimValue, value=0.0 [var41]  : true
<randoop.IsNotNull@1f [var46]  : true
<randoop.IsNotNull@1f [var47]  : true
<randoop.IsNotNull@1f [var49]  : true
<randoop.IsNull@25 [var50]  : true
<randoop.PrimValue, value=false [var52]  : true
<randoop.IsNull@25 [var53]  : true
<randoop.PrimValue, value=cep [var54]  : true
<randoop.PrimValue, value=0.0 [var55]  : true
<randoop.PrimValue, value=false [var56]  : true
<randoop.PrimValue, value=0.0 [var57]  : true
<randoop.IsNotNull@1f [var59]  : true
<randoop.PrimValue, value=0.0 [var62]  : true
<randoop.PrimValue, value=100.0 [var65]  : true

allSequences.size()=484
-------------------------------------------
randoop.util.Randomness: total calls to random: 2231
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 2232
randoop.util.Randomness: total calls to random: 2233
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2234
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 2235
randoop.util.Randomness: total calls to random: 2236
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2237
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 2238
randoop.util.Randomness: total calls to random: 2239
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var7 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var7 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var7 
var12 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var7 
var13 =  prim : java.lang.String:"" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var7 var13 
var15 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var13 
var16 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var13 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 active.
Making index 16 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var8 = var7.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var9 = var7.getParent();
// <NormalExecution object=null>;
double var10 = var7.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.company.impl.bean.ComponentImpl var11 = var7.getParent();
// <NormalExecution object=null>;
double var12 = var0.getSalary(var7);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var13 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setAddress("");
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var15 = new org.softlang.util.RemoveFromList((java.lang.Object)"");
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.util.AddToList var16 = new org.softlang.util.AddToList((java.lang.Object)"");
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=0.0 [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=0.0 [var12]  : true

allSequences.size()=485
-------------------------------------------
randoop.util.Randomness: total calls to random: 2240
Selected statement: org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 2241
randoop.util.Randomness: total calls to random: 2242
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 2243
randoop.util.Randomness: total calls to random: 2244
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.main.Main.<init>() : 
var2 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var3 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var1 var2 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var1 
var6 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var7 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var6 
var8 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var6 
var9 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var9 
var11 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var9 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var9 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var9 
var14 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var6 var9 
var15 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var1 var9 
var16 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var9 
var17 =  cons : org.softlang.main.Main.<init>() : 
var18 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var19 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var17 var18 
var20 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var21 =  method : org.softlang.main.Main.getSampleCompany() : var17 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 
var23 =  cons : org.softlang.company.impl.pojo.CompanyImpl.<init>() : 
var24 =  prim : java.lang.String:"" : 
var25 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var23 var24 
var26 =  method : org.softlang.company.impl.pojo.ComponentImpl.getName() : var23 
var27 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var23 
var28 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var29 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var28 
var30 =  prim : java.lang.String:"cep" : 
var31 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var28 var30 
var32 =  method : java.util.Observable.hasChanged() : var28 
var33 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var28 
var34 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var28 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 active.
Making index 7 active.
Making index 8 inactive (value is null)
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 active.
Making index 19 inactive (value is null)
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 active.
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is a primitive)
Making index 31 inactive (value is null)
Making index 32 inactive (value is a primitive)
Making index 33 inactive (value is null)
Making index 34 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var1 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var2 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var1.createSampleCompany((org.softlang.company.factory.Factory)var2);
// <NormalExecution object=null>;
org.softlang.company.Company var4 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var1.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var6 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var7 = var6.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var8 = var6.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var9 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var10 = var9.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var11 = var9.getParent();
// <NormalExecution object=null>;
java.lang.String var12 = var9.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var13 = var9.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var14 = var6.remove((org.softlang.company.Subunit)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var15 = var1.getSalary(var9);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setEmp(var9);
// <NormalExecution object=null>;
org.softlang.main.Main var17 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var18 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var17.createSampleCompany((org.softlang.company.factory.Factory)var18);
// <NormalExecution object=null>;
org.softlang.company.Company var20 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var21 = var17.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany(var21);
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.CompanyImpl var23 = new org.softlang.company.impl.pojo.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.CompanyImpl>;
java.lang.String var24 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var23.setName("");
// <NormalExecution object=null>;
java.lang.String var26 = var23.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setSampleCompany((org.softlang.company.Company)var23);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var28 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var29 = var28.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var30 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var28.setAddress("cep");
// <NormalExecution object=null>;
boolean var32 = var28.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var33 = var28.getParent();
// <NormalExecution object=null>;
var0.setEmp(var28);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true
<randoop.IsNotNull@1f [var7]  : true
<randoop.IsNull@25 [var8]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.IsNull@25 [var11]  : true
<randoop.PrimValue, value=cep [var12]  : true
<randoop.PrimValue, value=0.0 [var13]  : true
<randoop.PrimValue, value=false [var14]  : true
<randoop.PrimValue, value=0.0 [var15]  : true
<randoop.IsNotNull@1f [var20]  : true
<randoop.IsNotNull@1f [var21]  : true
<randoop.PrimValue, value= [var26]  : true
<randoop.PrimValue, value=false [var29]  : true
<randoop.PrimValue, value=false [var32]  : true
<randoop.IsNull@25 [var33]  : true

allSequences.size()=486
-------------------------------------------
randoop.util.Randomness: total calls to random: 2245
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 685 sequences.
components: 685
randoop.util.Randomness: total calls to random: 2246
randoop.util.Randomness: total calls to random: 2247
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var0 
var2 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type interface java.lang.Iterable
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
org.softlang.util.AddToList var2 = new org.softlang.util.AddToList((java.lang.Object)var1);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.IsNotNull@1f [var1]  : true

allSequences.size()=487
-------------------------------------------
randoop.util.Randomness: total calls to random: 2248
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 2249
randoop.util.Randomness: total calls to random: 2250
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2251
randoop.util.Randomness: total calls to random: 2252
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : java.util.Observable.notifyObservers() : var0 
var5 =  prim : boolean:true : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true

allSequences.size()=488
-------------------------------------------
randoop.util.Randomness: total calls to random: 2253
Selected statement: org.softlang.main.Main.getEmp()
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 2254
randoop.util.Randomness: total calls to random: 2255
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  method : org.softlang.main.Main.getEmp() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var4 = var0.getEmp();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var4]  : true

allSequences.size()=489
-------------------------------------------
randoop.util.Randomness: total calls to random: 2256
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 2257
randoop.util.Randomness: total calls to random: 2258
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var3 
var7 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var8 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var9 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var8 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : var8 
var11 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var0 var8 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.pojo.DepartmentImpl var0 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var6 = var3.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var7 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var8 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var9 = var8.getName();
// <NormalExecution object=null>;
var8.deleteObservers();
// <NormalExecution object=null>;
boolean var11 = var0.add((org.softlang.company.Subunit)var8);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var12 = var8.getName();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.PrimValue, value=true [var7]  : true
<randoop.IsNull@25 [var9]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.IsNull@25 [var12]  : true

allSequences.size()=490
-------------------------------------------
randoop.util.Randomness: total calls to random: 2259
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 2260
randoop.util.Randomness: total calls to random: 2261
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2262
randoop.util.Randomness: total calls to random: 2263
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var3 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var8 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var3 
var9 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var3 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var3 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var3 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
java.lang.String var6 = var3.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var7 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var8 = var0.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var9 = new org.softlang.util.RemoveFromList((java.lang.Object)var3);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
java.lang.String var10 = var3.getAddress();
// <NormalExecution object=null>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=cep [var6]  : true
<randoop.PrimValue, value=0.0 [var7]  : true
<randoop.PrimValue, value=false [var8]  : true
<randoop.IsNull@25 [var10]  : true

allSequences.size()=491
-------------------------------------------
randoop.util.Randomness: total calls to random: 2264
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 691 sequences.
components: 691
randoop.util.Randomness: total calls to random: 2265
randoop.util.Randomness: total calls to random: 2266
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var2 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var1 
var3 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var4 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var5 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var6 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 active.
Making index 6 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Adding sequence to active sequences of type interface org.softlang.company.Company
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var1 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var1);
// <NormalExecution object=null>;
org.softlang.company.Company var3 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var4 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var5 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.util.RemoveFromList var6 = new org.softlang.util.RemoveFromList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true
<randoop.IsNotNull@1f [var5]  : true

allSequences.size()=492
-------------------------------------------
randoop.util.Randomness: total calls to random: 2267
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 693 sequences.
components: 693
randoop.util.Randomness: total calls to random: 2268
randoop.util.Randomness: total calls to random: 2269
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var3 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var2 

Making all indices inactive (sequence has non-executed statements, so judging it inadequate for further extension).
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var1 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
org.softlang.util.RemoveFromList var3 = new org.softlang.util.RemoveFromList((java.lang.Object)var2);
<not_executed>

allSequences.size()=493
-------------------------------------------
randoop.util.Randomness: total calls to random: 2270
Selected statement: org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 2271
randoop.util.Randomness: total calls to random: 2272
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 2273
randoop.util.Randomness: total calls to random: 2274
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 2275
randoop.util.Randomness: total calls to random: 2276
Sequence discarded because size 124 exceeds maximum allowed size 100
-------------------------------------------
randoop.util.Randomness: total calls to random: 2277
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 2278
randoop.util.Randomness: total calls to random: 2279
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2280
randoop.util.Randomness: total calls to random: 2281
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var3 
var5 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var3 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var3 
var7 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var3 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var3 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.impl.bean.ComponentImpl var1 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var4 = var3.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var5 = var3.getParent();
// <NormalExecution object=null>;
boolean var6 = var0.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var7 = var3.getName();
// <NormalExecution object=null>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setAddress("hi!");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.IsNull@25 [var5]  : true
<randoop.PrimValue, value=true [var6]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=494
-------------------------------------------
randoop.util.Randomness: total calls to random: 2282
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 2283
randoop.util.Randomness: total calls to random: 2284
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var3 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var4 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var5 =  method : java.util.Observable.countObservers() : var4 
var6 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var5 
var7 =  cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : var7 var8 
var10 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var11 
var13 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var10 
var14 =  method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : var7 var10 
var15 =  method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : var7 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var1 var7 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var18 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 
var19 =  method : java.util.Observable.notifyObservers() : var1 
var20 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 13, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 13
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 13, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 13
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is null)
Making index 3 active.
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 active.
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Making index 13 active.
Making index 14 inactive (value is a primitive)
Making index 15 active.
Making index 16 inactive (value is null)
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var3 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.company.impl.bean.DepartmentImpl var4 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var5 = var4.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var6 = var1.remove((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.pojo.DepartmentImpl var7 = new org.softlang.company.impl.pojo.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.DepartmentImpl>;
java.lang.String var8 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var7.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var10 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var11 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
java.lang.Iterable var13 = var10.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
boolean var14 = var7.add((org.softlang.company.Subunit)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Iterable var15 = var7.subunits();
// <NormalExecution object=object-of-type-java.util.LinkedList>;
var1.notifyObservers((java.lang.Object)var7);
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var1.deleteObservers();
// <NormalExecution object=null>;
var1.notifyObservers();
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var20 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var3]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var13]  : true
<randoop.PrimValue, value=true [var14]  : true
<randoop.IsNotNull@1f [var15]  : true

allSequences.size()=495
-------------------------------------------
randoop.util.Randomness: total calls to random: 2285
Selected statement: org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 2286
randoop.util.Randomness: total calls to random: 2287
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 2288
randoop.util.Randomness: total calls to random: 2289
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var1 
var3 =  prim : java.lang.String:"cep" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var1 var3 
var5 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var0 var1 
var6 =  cons : org.softlang.main.Main.<init>() : 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 
var9 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var10 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var9 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var6 var9 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var12 
var14 =  prim : boolean:false : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var12 var14 
var16 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var6 var12 
var17 =  prim : double:-1.0 : 
var18 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var12 var17 
var19 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var19 
var21 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var19 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var23 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var19 
var24 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var19 
var25 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var19 
var26 =  prim : double:0.0 : 
var27 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var0 var19 var26 
var28 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var29 =  method : java.util.Observable.countObservers() : var28 
var30 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var28 
var31 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var28 
var32 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var28 
var33 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var28 
var34 =  cons : org.softlang.main.Main.<init>() : 
var35 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var36 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var34 var35 
var37 =  method : org.softlang.main.Main.getSampleCompany() : var34 
var38 =  method : org.softlang.main.Main.getSampleCompany() : var34 
var39 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var40 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var39 
var41 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var39 
var42 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var39 
var43 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var39 
var44 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var34 var39 
var45 =  cons : org.softlang.main.Main.<init>() : 
var46 =  cons : org.softlang.main.Main.<init>() : 
var47 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var48 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var46 var47 
var49 =  method : org.softlang.main.Main.getSampleCompany() : var46 
var50 =  method : org.softlang.main.Main.getSampleCompany() : var46 
var51 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var52 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var51 
var53 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var51 
var54 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var55 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var54 
var56 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var54 
var57 =  method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : var54 
var58 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var54 
var59 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var51 var54 
var60 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var46 var54 
var61 =  method : org.softlang.main.Main.setEmp(org.softlang.company.impl.bean.EmployeeImpl) : var45 var54 
var62 =  method : org.softlang.main.Main.getEmp() : var45 
var63 =  prim : double:100.0 : 
var64 =  method : org.softlang.main.Main.setSalary(org.softlang.company.impl.bean.EmployeeImpl,double) : var34 var62 var63 
var65 =  method : java.util.Observable.hasChanged() : var62 
var66 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var28 var62 
var67 =  method : org.softlang.main.Main.getSalary(org.softlang.company.impl.bean.EmployeeImpl) : var0 var62 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 34, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 34
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 34, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 34
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 62, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 62
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 62, 62
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 52
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Making index 25 inactive (value is a primitive)
Making index 26 inactive (value is a primitive)
Making index 27 inactive (value is null)
Making index 28 active.
Making index 29 inactive (value is a primitive)
Making index 30 inactive (value is null)
Making index 31 inactive (value is null)
Making index 32 inactive (value is null)
Making index 33 inactive (value is null)
Making index 34 active.
Making index 35 active.
Making index 36 inactive (value is null)
Making index 37 active.
Making index 38 active.
Making index 39 active.
Making index 40 inactive (value is a primitive)
Making index 41 inactive (value is null)
Making index 42 inactive (value is null)
Making index 43 inactive (value is a primitive)
Making index 44 inactive (value is null)
Making index 45 active.
Making index 46 active.
Making index 47 active.
Making index 48 inactive (value is null)
Making index 49 active.
Making index 50 active.
Making index 51 active.
Making index 52 active.
Making index 53 inactive (value is null)
Making index 54 active.
Making index 55 inactive (value is a primitive)
Making index 56 inactive (value is null)
Making index 57 inactive (value is a primitive)
Making index 58 inactive (value is a primitive)
Making index 59 inactive (value is a primitive)
Making index 60 inactive (value is a primitive)
Making index 61 inactive (value is null)
Making index 62 active.
Making index 63 inactive (value is a primitive)
Making index 64 inactive (value is null)
Making index 65 inactive (value is a primitive)
Making index 66 inactive (value is a primitive)
Making index 67 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.impl.bean.EmployeeImpl var1 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var2 = var1.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var3 = "cep";
// <NormalExecution object=object-of-type-java.lang.String>;
var1.setAddress("cep");
// <NormalExecution object=null>;
var0.setEmp(var1);
// <NormalExecution object=null>;
org.softlang.main.Main var6 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var9 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var7.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
var6.setSampleCompany((org.softlang.company.Company)var9);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var13 = var12.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Boolean var14 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var12.setManager(false);
// <NormalExecution object=null>;
double var16 = var6.getSalary(var12);
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.Double var17 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var12, (-1.0d));
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var19 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var20 = var19.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var21 = var19.getParent();
// <NormalExecution object=null>;
java.lang.String var22 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var23 = var19.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var24 = var19.getName();
// <NormalExecution object=null>;
java.lang.String var25 = var19.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Double var26 = new java.lang.Double(0.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(var19, 0.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.DepartmentImpl var28 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
int var29 = var28.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var30 = var28.getName();
// <NormalExecution object=null>;
org.softlang.company.Employee var31 = var28.getManager();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.ComponentImpl var32 = var28.getParent();
// <NormalExecution object=null>;
org.softlang.company.Employee var33 = var28.getManager();
// <NormalExecution object=null>;
org.softlang.main.Main var34 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var35 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var34.createSampleCompany((org.softlang.company.factory.Factory)var35);
// <NormalExecution object=null>;
org.softlang.company.Company var37 = var34.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var38 = var34.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.EmployeeImpl var39 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var40 = var39.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var41 = var39.getParent();
// <NormalExecution object=null>;
java.lang.String var42 = var39.getAddress();
// <NormalExecution object=null>;
double var43 = var39.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var34.setEmp(var39);
// <NormalExecution object=null>;
org.softlang.main.Main var45 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var46 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var47 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var46.createSampleCompany((org.softlang.company.factory.Factory)var47);
// <NormalExecution object=null>;
org.softlang.company.Company var49 = var46.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var50 = var46.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.impl.bean.DepartmentImpl var51 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.Iterable var52 = var51.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.ComponentImpl var53 = var51.getParent();
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var54 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var55 = var54.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var56 = var54.getParent();
// <NormalExecution object=null>;
java.lang.String var57 = var54.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
double var58 = var54.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var59 = var51.remove((org.softlang.company.Subunit)var54);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var60 = var46.getSalary(var54);
// <NormalExecution object=object-of-type-java.lang.Double>;
var45.setEmp(var54);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var62 = var45.getEmp();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Double var63 = new java.lang.Double(100.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var34.setSalary(var62, 100.0d);
// <NormalExecution object=null>;
boolean var65 = var62.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var66 = var28.remove((org.softlang.company.Subunit)var62);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var67 = var0.getSalary(var62);
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=false [var2]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=0.0 [var16]  : true
<randoop.PrimValue, value=false [var20]  : true
<randoop.IsNull@25 [var21]  : true
<randoop.PrimValue, value=cep [var22]  : true
<randoop.PrimValue, value=0.0 [var23]  : true
<randoop.IsNull@25 [var24]  : true
<randoop.PrimValue, value=cep [var25]  : true
<randoop.PrimValue, value=0 [var29]  : true
<randoop.IsNull@25 [var30]  : true
<randoop.IsNull@25 [var31]  : true
<randoop.IsNull@25 [var32]  : true
<randoop.IsNull@25 [var33]  : true
<randoop.IsNotNull@1f [var37]  : true
<randoop.IsNotNull@1f [var38]  : true
<randoop.PrimValue, value=false [var40]  : true
<randoop.IsNull@25 [var41]  : true
<randoop.IsNull@25 [var42]  : true
<randoop.PrimValue, value=0.0 [var43]  : true
<randoop.IsNotNull@1f [var49]  : true
<randoop.IsNotNull@1f [var50]  : true
<randoop.IsNotNull@1f [var52]  : true
<randoop.IsNull@25 [var53]  : true
<randoop.PrimValue, value=false [var55]  : true
<randoop.IsNull@25 [var56]  : true
<randoop.PrimValue, value=cep [var57]  : true
<randoop.PrimValue, value=0.0 [var58]  : true
<randoop.PrimValue, value=false [var59]  : true
<randoop.PrimValue, value=0.0 [var60]  : true
<randoop.IsNotNull@1f [var62]  : true
<randoop.PrimValue, value=false [var65]  : true
<randoop.PrimValue, value=false [var66]  : true
<randoop.PrimValue, value=100.0 [var67]  : true

allSequences.size()=496
-------------------------------------------
randoop.util.Randomness: total calls to random: 2290
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 175 sequences.
components: 175
randoop.util.Randomness: total calls to random: 2291
randoop.util.Randomness: total calls to random: 2292
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var4 =  method : java.util.Observable.notifyObservers() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var1 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.ComponentImpl var2 = var0.getParent();
// <NormalExecution object=null>;
double var3 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.String var5 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var1]  : true
<randoop.IsNull@25 [var2]  : true
<randoop.PrimValue, value=0.0 [var3]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=497
-------------------------------------------
randoop.util.Randomness: total calls to random: 2293
Selected statement: org.softlang.main.Main.setSampleCompany(org.softlang.company.Company)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 2294
randoop.util.Randomness: total calls to random: 2295
Will query component set for objects of typeinterface org.softlang.company.Company
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Company
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 2296
randoop.util.Randomness: total calls to random: 2297
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var7 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var6 
var8 =  cons : org.softlang.main.Main.<init>() : 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var10 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var10 
var12 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var13 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var8 var12 
var14 =  cons : org.softlang.main.Main.<init>() : 
var15 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var14 
var16 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var17 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var14 var16 
var18 =  cons : org.softlang.main.Main.<init>() : 
var19 =  cons : org.softlang.main.Main.<init>() : 
var20 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var19 
var21 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var22 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var19 var21 
var23 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var18 var21 
var24 =  prim : java.lang.String:"hi!" : 
var25 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var21 var24 
var26 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var14 var21 
var27 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var21 
var28 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var21 
var29 =  cons : org.softlang.main.Main.<init>() : 
var30 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var29 
var31 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var32 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var29 var31 
var33 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var34 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var29 var33 
var35 =  method : org.softlang.main.Main.getSampleCompany() : var29 
var36 =  cons : org.softlang.main.Main.<init>() : 
var37 =  cons : org.softlang.main.Main.<init>() : 
var38 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var37 
var39 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var40 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var37 var39 
var41 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var36 var39 
var42 =  prim : java.lang.String:"hi!" : 
var43 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var39 var42 
var44 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var29 var39 
var45 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var46 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var45 
var47 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var46 
var48 =  method : org.softlang.util.ObservableSimpleList.iterator() : var46 
var49 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var46 
var50 =  cons : org.softlang.main.Main.<init>() : 
var51 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var50 
var52 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var53 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var50 var52 
var54 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var55 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var50 var54 
var56 =  method : org.softlang.main.Main.getSampleCompany() : var50 
var57 =  cons : org.softlang.main.Main.<init>() : 
var58 =  cons : org.softlang.main.Main.<init>() : 
var59 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var58 
var60 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var61 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var58 var60 
var62 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var57 var60 
var63 =  prim : java.lang.String:"hi!" : 
var64 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var60 var63 
var65 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var50 var60 
var66 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var46 var60 
var67 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var29 var60 
var68 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var60 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 14, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 36, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 37, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 57, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 14
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 36
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 37
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 57
Contract returned true.
Checking contract class randoop.EqualsHashcode on 58, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 14, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 36, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 37, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 57, 58
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 14
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 36
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 37
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 57
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 58, 58
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 15, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 38, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 51, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 15
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 38
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 51
Contract returned true.
Checking contract class randoop.EqualsHashcode on 59, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 15, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 38, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 51, 59
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 15
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 38
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 51
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 59, 59
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 52, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 52
Contract returned true.
Checking contract class randoop.EqualsHashcode on 60, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 52, 60
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 52
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 60, 60
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 33, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 33
Contract returned true.
Checking contract class randoop.EqualsHashcode on 54, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 33, 54
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 33
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 54, 54
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 35, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 35
Contract returned true.
Checking contract class randoop.EqualsHashcode on 56, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 35, 56
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 35
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 56, 56
Contract returned true.
Checking contract class randoop.EqualsHashcode on 45, 45
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 45, 45
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 48, 48
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 48, 48
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is null)
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 active.
Making index 13 inactive (value is null)
Making index 14 active.
Making index 15 active.
Making index 16 active.
Making index 17 inactive (value is null)
Making index 18 active.
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 inactive (value is null)
Making index 23 inactive (value is null)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Making index 26 inactive (value is null)
Making index 27 inactive (value is null)
Making index 28 inactive (value is null)
Making index 29 active.
Making index 30 active.
Making index 31 active.
Making index 32 inactive (value is null)
Making index 33 active.
Making index 34 inactive (value is null)
Making index 35 active.
Making index 36 active.
Making index 37 active.
Making index 38 active.
Making index 39 active.
Making index 40 inactive (value is null)
Making index 41 inactive (value is null)
Making index 42 inactive (value is a primitive)
Making index 43 inactive (value is null)
Making index 44 inactive (value is null)
Making index 45 active.
Making index 46 active.
Making index 47 inactive (value is null)
Making index 48 active.
Making index 49 active.
Making index 50 active.
Making index 51 active.
Making index 52 active.
Making index 53 inactive (value is null)
Making index 54 active.
Making index 55 inactive (value is null)
Making index 56 active.
Making index 57 active.
Making index 58 active.
Making index 59 active.
Making index 60 active.
Making index 61 inactive (value is null)
Making index 62 inactive (value is null)
Making index 63 inactive (value is a primitive)
Making index 64 inactive (value is null)
Making index 65 inactive (value is null)
Making index 66 inactive (value is a primitive)
Making index 67 inactive (value is null)
Making index 68 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.CompanyImpl var6 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var6);
// <NormalExecution object=null>;
org.softlang.main.Main var8 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var10 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var8.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var12 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var8.createSampleCompany((org.softlang.company.factory.Factory)var12);
// <NormalExecution object=null>;
org.softlang.main.Main var14 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var15 = new org.softlang.util.AddToList((java.lang.Object)var14);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var16 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var14.setSampleCompany((org.softlang.company.Company)var16);
// <NormalExecution object=null>;
org.softlang.main.Main var18 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var19 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var20 = new org.softlang.util.AddToList((java.lang.Object)var19);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var21 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var19.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var18.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
java.lang.String var24 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var21.setName("hi!");
// <NormalExecution object=null>;
var14.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var8.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var21);
// <NormalExecution object=null>;
org.softlang.main.Main var29 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var30 = new org.softlang.util.AddToList((java.lang.Object)var29);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var31 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var29.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var33 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var29.createSampleCompany((org.softlang.company.factory.Factory)var33);
// <NormalExecution object=null>;
org.softlang.company.Company var35 = var29.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var36 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var37 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var38 = new org.softlang.util.AddToList((java.lang.Object)var37);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var39 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var37.setSampleCompany((org.softlang.company.Company)var39);
// <NormalExecution object=null>;
var36.setSampleCompany((org.softlang.company.Company)var39);
// <NormalExecution object=null>;
java.lang.String var42 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var39.setName("hi!");
// <NormalExecution object=null>;
var29.setSampleCompany((org.softlang.company.Company)var39);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var45 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var46 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var45);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var46.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var48 = var46.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var49 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var46);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.main.Main var50 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var51 = new org.softlang.util.AddToList((java.lang.Object)var50);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var52 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var50.setSampleCompany((org.softlang.company.Company)var52);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var54 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var50.createSampleCompany((org.softlang.company.factory.Factory)var54);
// <NormalExecution object=null>;
org.softlang.company.Company var56 = var50.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var57 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var58 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var59 = new org.softlang.util.AddToList((java.lang.Object)var58);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var60 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var58.setSampleCompany((org.softlang.company.Company)var60);
// <NormalExecution object=null>;
var57.setSampleCompany((org.softlang.company.Company)var60);
// <NormalExecution object=null>;
java.lang.String var63 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var60.setName("hi!");
// <NormalExecution object=null>;
var50.setSampleCompany((org.softlang.company.Company)var60);
// <NormalExecution object=null>;
boolean var66 = var46.add((java.lang.Object)var60);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var29.setSampleCompany((org.softlang.company.Company)var60);
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var60);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var35]  : true
<randoop.IsNotNull@1f [var48]  : true
<randoop.IsNotNull@1f [var56]  : true
<randoop.PrimValue, value=true [var66]  : true

allSequences.size()=498
-------------------------------------------
randoop.util.Randomness: total calls to random: 2298
Selected statement: org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.pojo.EmployeeImpl
getActivesequencesThatYield: returning 72 sequences.
components: 72
randoop.util.Randomness: total calls to random: 2299
randoop.util.Randomness: total calls to random: 2300
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 2301
randoop.util.Randomness: total calls to random: 2302
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>() : 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var2 
var4 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var5 
var7 =  method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : var2 
var8 =  prim : boolean:true : 
var9 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : var2 var8 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : var2 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.pojo.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
org.softlang.company.impl.pojo.EmployeeImpl var2 = new org.softlang.company.impl.pojo.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.pojo.EmployeeImpl>;
var0.notifyObservers((java.lang.Object)var2);
// <NormalExecution object=null>;
java.lang.String var4 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(false);
// <NormalExecution object=null>;
java.lang.String var7 = var2.getCep();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.Boolean var8 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var2.setManager(true);
// <NormalExecution object=null>;
java.lang.String var10 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var2.setAddress("hi!");
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.PrimValue, value=cep [var4]  : true
<randoop.PrimValue, value=cep [var7]  : true

allSequences.size()=499
-------------------------------------------
randoop.util.Randomness: total calls to random: 2303
Selected statement: org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory)
Will query component set for objects of typeclass org.softlang.main.Main
getActivesequencesThatYield: entering method, clazz=class org.softlang.main.Main
getActivesequencesThatYield: returning 77 sequences.
components: 77
randoop.util.Randomness: total calls to random: 2304
randoop.util.Randomness: total calls to random: 2305
Will query component set for objects of typeinterface org.softlang.company.factory.Factory
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.factory.Factory
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 2306
randoop.util.Randomness: total calls to random: 2307
Successfully created new unique sequence:var0 =  cons : org.softlang.main.Main.<init>() : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 
var2 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var3 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var2 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var4 
var6 =  method : org.softlang.main.Main.getSampleCompany() : var0 
var7 =  cons : org.softlang.main.Main.<init>() : 
var8 =  cons : org.softlang.main.Main.<init>() : 
var9 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var8 
var10 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var11 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var8 var10 
var12 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var7 var10 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var10 var13 
var15 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var10 
var16 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var17 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var16 
var18 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var17 
var19 =  method : org.softlang.util.ObservableSimpleList.iterator() : var17 
var20 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var17 
var21 =  cons : org.softlang.main.Main.<init>() : 
var22 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var21 
var23 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var24 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var21 var23 
var25 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var26 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var21 var25 
var27 =  method : org.softlang.main.Main.getSampleCompany() : var21 
var28 =  cons : org.softlang.main.Main.<init>() : 
var29 =  cons : org.softlang.main.Main.<init>() : 
var30 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var29 
var31 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var32 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var29 var31 
var33 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var28 var31 
var34 =  prim : java.lang.String:"hi!" : 
var35 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var31 var34 
var36 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var21 var31 
var37 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var17 var31 
var38 =  method : org.softlang.main.Main.setSampleCompany(org.softlang.company.Company) : var0 var31 
var39 =  cons : org.softlang.main.Main.<init>() : 
var40 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var41 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var39 var40 
var42 =  method : org.softlang.main.Main.getSampleCompany() : var39 
var43 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var44 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var39 var43 
var45 =  method : org.softlang.main.Main.getEmp() : var39 
var46 =  cons : org.softlang.main.Main.<init>() : 
var47 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var48 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var46 var47 
var49 =  method : org.softlang.main.Main.getSampleCompany() : var46 
var50 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var51 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var46 var50 
var52 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var39 var50 
var53 =  method : org.softlang.main.Main.createSampleCompany(org.softlang.company.factory.Factory) : var0 var50 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 21, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 28, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 29, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 39, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 21
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 28
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 29
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 39
Contract returned true.
Checking contract class randoop.EqualsHashcode on 46, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 21, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 28, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 29, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 39, 46
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 21
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 28
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 29
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 39
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 46, 46
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 22, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 22
Contract returned true.
Checking contract class randoop.EqualsHashcode on 30, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 22, 30
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 22
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 30, 30
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 10, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 23, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 10
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 23
Contract returned true.
Checking contract class randoop.EqualsHashcode on 31, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 10, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 23, 31
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 10
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 23
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 31, 31
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 25, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 40, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 43, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 47, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 25
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 40
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 43
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 47
Contract returned true.
Checking contract class randoop.EqualsHashcode on 50, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 25, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 40, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 43, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 47, 50
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 25
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 40
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 43
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 47
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 50, 50
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 27, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 42, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 27
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 42
Contract returned true.
Checking contract class randoop.EqualsHashcode on 49, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 27, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 42, 49
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 27
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 42
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 49, 49
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 20, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 20
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 20, 20
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 active.
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is null)
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is null)
Making index 19 active.
Making index 20 active.
Making index 21 active.
Making index 22 active.
Making index 23 active.
Making index 24 inactive (value is null)
Making index 25 active.
Making index 26 inactive (value is null)
Making index 27 active.
Making index 28 active.
Making index 29 active.
Making index 30 active.
Making index 31 active.
Making index 32 inactive (value is null)
Making index 33 inactive (value is null)
Making index 34 inactive (value is a primitive)
Making index 35 inactive (value is null)
Making index 36 inactive (value is null)
Making index 37 inactive (value is a primitive)
Making index 38 inactive (value is null)
Making index 39 active.
Making index 40 active.
Making index 41 inactive (value is null)
Making index 42 active.
Making index 43 active.
Making index 44 inactive (value is null)
Making index 45 inactive (value is null)
Making index 46 active.
Making index 47 active.
Making index 48 inactive (value is null)
Making index 49 active.
Making index 50 active.
Making index 51 inactive (value is null)
Making index 52 inactive (value is null)
Making index 53 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.main.Main
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.main.Main var0 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)var0);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var2 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var0.setSampleCompany((org.softlang.company.Company)var2);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var4);
// <NormalExecution object=null>;
org.softlang.company.Company var6 = var0.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var7 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var8 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var9 = new org.softlang.util.AddToList((java.lang.Object)var8);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var10 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var8.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
var7.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var10.setName("hi!");
// <NormalExecution object=null>;
var0.setSampleCompany((org.softlang.company.Company)var10);
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var16 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var17 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var16);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var17.deleteObservers();
// <NormalExecution object=null>;
java.util.Iterator var19 = var17.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
org.softlang.util.ObservableSimpleList var20 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var17);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.main.Main var21 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var22 = new org.softlang.util.AddToList((java.lang.Object)var21);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var23 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var21.setSampleCompany((org.softlang.company.Company)var23);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var25 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var21.createSampleCompany((org.softlang.company.factory.Factory)var25);
// <NormalExecution object=null>;
org.softlang.company.Company var27 = var21.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.main.Main var28 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.main.Main var29 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.util.AddToList var30 = new org.softlang.util.AddToList((java.lang.Object)var29);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
org.softlang.company.impl.bean.CompanyImpl var31 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
var29.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
var28.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
java.lang.String var34 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var31.setName("hi!");
// <NormalExecution object=null>;
var21.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
boolean var37 = var17.add((java.lang.Object)var31);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setSampleCompany((org.softlang.company.Company)var31);
// <NormalExecution object=null>;
org.softlang.main.Main var39 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var40 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var39.createSampleCompany((org.softlang.company.factory.Factory)var40);
// <NormalExecution object=null>;
org.softlang.company.Company var42 = var39.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var43 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var39.createSampleCompany((org.softlang.company.factory.Factory)var43);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var45 = var39.getEmp();
// <NormalExecution object=null>;
org.softlang.main.Main var46 = new org.softlang.main.Main();
// <NormalExecution object=object-of-type-org.softlang.main.Main>;
org.softlang.company.factory.BeanFactory var47 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var46.createSampleCompany((org.softlang.company.factory.Factory)var47);
// <NormalExecution object=null>;
org.softlang.company.Company var49 = var46.getSampleCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.factory.BeanFactory var50 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
var46.createSampleCompany((org.softlang.company.factory.Factory)var50);
// <NormalExecution object=null>;
var39.createSampleCompany((org.softlang.company.factory.Factory)var50);
// <NormalExecution object=null>;
var0.createSampleCompany((org.softlang.company.factory.Factory)var50);
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var6]  : true
<randoop.IsNotNull@1f [var19]  : true
<randoop.IsNotNull@1f [var27]  : true
<randoop.PrimValue, value=true [var37]  : true
<randoop.IsNotNull@1f [var42]  : true
<randoop.IsNull@25 [var45]  : true
<randoop.IsNotNull@1f [var49]  : true

allSequences.size()=500
