Will not use: public static void br.cin.core.Main.main(java.lang.String[])
  reason: main method not applicable to unit testing.
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
br.cin.core.A.<init>()
br.cin.core.B.<init>()
br.cin.core.Main.<init>()
br.cin.core.C.<init>()
br.cin.core.A.k()
br.cin.core.B.m()
br.cin.core.B.k()
br.cin.core.C.test()
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: br.cin.core.B.m()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: found no sequences matching class class br.cin.core.B
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: found no sequences matching class class br.cin.core.B
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: br.cin.core.C.<init>()
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: found no sequences matching class class br.cin.core.A
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: br.cin.core.B.m()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 6
randoop.util.Randomness: total calls to random: 7
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type int
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: br.cin.core.C.test()
Will query component set for objects of typeclass br.cin.core.C
getActivesequencesThatYield: entering method, clazz=class br.cin.core.C
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 10
randoop.util.Randomness: total calls to random: 11
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 12
Selected statement: br.cin.core.Main.<init>()
Successfully created new unique sequence:var0 =  cons : br.cin.core.Main.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class br.cin.core.Main
Sequence after execution: 
br.cin.core.Main var0 = new br.cin.core.Main();
// <NormalExecution object=object-of-type-br.cin.core.Main>;

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 13
Selected statement: br.cin.core.C.test()
Will query component set for objects of typeclass br.cin.core.C
getActivesequencesThatYield: entering method, clazz=class br.cin.core.C
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 14
randoop.util.Randomness: total calls to random: 15
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 16
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: found no sequences matching class class br.cin.core.A
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 17
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 18
randoop.util.Randomness: total calls to random: 19
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type int
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 20
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: found no sequences matching class class br.cin.core.A
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 21
Selected statement: br.cin.core.B.<init>()
Successfully created new unique sequence:var0 =  cons : br.cin.core.B.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class br.cin.core.B
Sequence after execution: 
br.cin.core.B var0 = new br.cin.core.B();
// <NormalExecution object=object-of-type-br.cin.core.B>;

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 22
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 23
randoop.util.Randomness: total calls to random: 24
Successfully created new unique sequence:var0 =  cons : br.cin.core.B.<init>() : 
var1 =  method : br.cin.core.B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.B
Sequence after execution: 
br.cin.core.B var0 = new br.cin.core.B();
// <NormalExecution object=object-of-type-br.cin.core.B>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 25
Selected statement: br.cin.core.B.m()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 26
randoop.util.Randomness: total calls to random: 27
Successfully created new unique sequence:var0 =  cons : br.cin.core.B.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.B
Sequence after execution: 
br.cin.core.B var0 = new br.cin.core.B();
// <NormalExecution object=object-of-type-br.cin.core.B>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 28
Selected statement: br.cin.core.B.m()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 29
randoop.util.Randomness: total calls to random: 30
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.C.test() : var0 
var3 =  method : br.cin.core.B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 31
Selected statement: br.cin.core.A.<init>()
Successfully created new unique sequence:var0 =  cons : br.cin.core.A.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class br.cin.core.A
Sequence after execution: 
br.cin.core.A var0 = new br.cin.core.A();
// <NormalExecution object=object-of-type-br.cin.core.A>;

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 32
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 33
randoop.util.Randomness: total calls to random: 34
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 35
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 36
randoop.util.Randomness: total calls to random: 37
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.C.test() : var0 
var3 =  method : br.cin.core.B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 38
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 39
randoop.util.Randomness: total calls to random: 40
Successfully created new unique sequence:var0 =  cons : br.cin.core.A.<init>() : 
var1 =  method : br.cin.core.A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.A
Sequence after execution: 
br.cin.core.A var0 = new br.cin.core.A();
// <NormalExecution object=object-of-type-br.cin.core.A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 41
Selected statement: br.cin.core.C.test()
Will query component set for objects of typeclass br.cin.core.C
getActivesequencesThatYield: entering method, clazz=class br.cin.core.C
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 42
randoop.util.Randomness: total calls to random: 43
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 44
Selected statement: br.cin.core.C.test()
Will query component set for objects of typeclass br.cin.core.C
getActivesequencesThatYield: entering method, clazz=class br.cin.core.C
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 45
randoop.util.Randomness: total calls to random: 46
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.C.test() : var0 
var3 =  method : br.cin.core.B.m() : var0 
var4 =  method : br.cin.core.C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 47
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 48
randoop.util.Randomness: total calls to random: 49
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.C.test() : var0 
var3 =  method : br.cin.core.B.m() : var0 
var4 =  method : br.cin.core.C.test() : var0 
var5 =  method : br.cin.core.B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 50
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 51
randoop.util.Randomness: total calls to random: 52
Successfully created new unique sequence:var0 =  cons : br.cin.core.A.<init>() : 
var1 =  method : br.cin.core.A.k() : var0 
var2 =  method : br.cin.core.A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.A
Sequence after execution: 
br.cin.core.A var0 = new br.cin.core.A();
// <NormalExecution object=object-of-type-br.cin.core.A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 53
Selected statement: br.cin.core.B.k()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 54
randoop.util.Randomness: total calls to random: 55
Successfully created new unique sequence:var0 =  cons : br.cin.core.B.<init>() : 
var1 =  method : br.cin.core.B.k() : var0 
var2 =  method : br.cin.core.B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.B
Sequence after execution: 
br.cin.core.B var0 = new br.cin.core.B();
// <NormalExecution object=object-of-type-br.cin.core.B>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 56
Selected statement: br.cin.core.C.test()
Will query component set for objects of typeclass br.cin.core.C
getActivesequencesThatYield: entering method, clazz=class br.cin.core.C
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 57
randoop.util.Randomness: total calls to random: 58
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 59
Selected statement: br.cin.core.A.k()
Will query component set for objects of typeclass br.cin.core.A
getActivesequencesThatYield: entering method, clazz=class br.cin.core.A
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 60
randoop.util.Randomness: total calls to random: 61
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 62
Selected statement: br.cin.core.B.m()
Will query component set for objects of typeclass br.cin.core.B
getActivesequencesThatYield: entering method, clazz=class br.cin.core.B
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 63
randoop.util.Randomness: total calls to random: 64
Successfully created new unique sequence:var0 =  cons : br.cin.core.C.<init>() : 
var1 =  method : br.cin.core.B.m() : var0 
var2 =  method : br.cin.core.B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class br.cin.core.C
Sequence after execution: 
br.cin.core.C var0 = new br.cin.core.C();
// <NormalExecution object=object-of-type-br.cin.core.C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=18
