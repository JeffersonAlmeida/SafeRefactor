Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
org.softlang.util.RemoveFromList.<init>(java.lang.Object)
org.softlang.company.impl.bean.CompanyImpl.<init>()
org.softlang.util.SimpleLinkedList.<init>()
org.softlang.tests.Basics.<init>()
org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
org.softlang.company.factory.BeanFactory.<init>()
org.softlang.company.impl.bean.DepartmentImpl.<init>()
org.softlang.company.impl.bean.EmployeeImpl.<init>()
org.softlang.util.AddToList.<init>(java.lang.Object)
org.softlang.company.impl.bean.CompanyImpl.accept(org.softlang.visitor.VoidVisitor)
org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
org.softlang.company.impl.bean.ContainerImpl.subunits()
org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
org.softlang.company.impl.bean.ComponentImpl.getName()
org.softlang.company.impl.bean.ComponentImpl.getParent()
org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
java.util.Observable.hasChanged()
java.util.Observable.notifyObservers()
java.util.Observable.notifyObservers(java.lang.Object)
java.util.Observable.countObservers()
org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
org.softlang.util.SimpleLinkedList.add(java.lang.Object)
org.softlang.util.SimpleLinkedList.iterator()
org.softlang.tests.Basics.test()
org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
org.softlang.util.ObservableSimpleList.add(java.lang.Object)
org.softlang.util.ObservableSimpleList.iterator()
org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
org.softlang.util.ObservableSimpleList.deleteObservers()
org.softlang.company.factory.BeanFactory.mkCompany()
org.softlang.company.factory.BeanFactory.mkDepartment()
org.softlang.company.factory.BeanFactory.mkEmployee()
org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
org.softlang.company.impl.bean.DepartmentImpl.getManager()
org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
java.util.Observable.addObserver(java.util.Observer)
java.util.Observable.deleteObserver(java.util.Observer)
java.util.Observable.deleteObservers()
org.softlang.company.impl.bean.EmployeeImpl.getAddress()
org.softlang.company.impl.bean.EmployeeImpl.getName()
org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
org.softlang.company.impl.bean.EmployeeImpl.getManager()
org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
org.softlang.company.impl.bean.EmployeeImpl.getSalary()
org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: found no sequences matching class class org.softlang.tests.Basics
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: org.softlang.util.SimpleLinkedList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 6
Selected statement: org.softlang.company.impl.bean.CompanyImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.CompanyImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.CompanyImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.CompanyImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 7
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: org.softlang.util.SimpleLinkedList.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 10
randoop.util.Randomness: total calls to random: 11
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 12
randoop.util.Randomness: total calls to random: 13
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : long:0 : 
var2 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Long var1 = new java.lang.Long(0L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var0.notifyObservers((java.lang.Object)0L);
// <NormalExecution object=null>;

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 14
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 15
randoop.util.Randomness: total calls to random: 16
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 17
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 18
randoop.util.Randomness: total calls to random: 19
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 20
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 21
randoop.util.Randomness: total calls to random: 22
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 23
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: found no sequences matching class class org.softlang.tests.Basics
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 24
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 25
randoop.util.Randomness: total calls to random: 26
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 27
randoop.util.Randomness: total calls to random: 28
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 29
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 30
randoop.util.Randomness: total calls to random: 31
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 32
randoop.util.Randomness: total calls to random: 33
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 34
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 35
randoop.util.Randomness: total calls to random: 36
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 37
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: found no sequences matching class class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 38
Selected statement: org.softlang.tests.Basics.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.tests.Basics.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.tests.Basics
Sequence after execution: 
org.softlang.tests.Basics var0 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 39
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 40
randoop.util.Randomness: total calls to random: 41
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 42
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 43
randoop.util.Randomness: total calls to random: 44
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Adding sequence to active sequences of type interface java.util.Iterator
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.util.Iterator var2 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
<randoop.IsNotNull@1f [var2]  : true

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 45
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 46
randoop.util.Randomness: total calls to random: 47
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 48
randoop.util.Randomness: total calls to random: 49
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 50
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 51
randoop.util.Randomness: total calls to random: 52
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 53
Selected statement: org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeinterface org.softlang.company.Component
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Component
getActivesequencesThatYield: found no sequences matching class interface org.softlang.company.Component
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 54
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 55
randoop.util.Randomness: total calls to random: 56
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 57
randoop.util.Randomness: total calls to random: 58
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 59
Selected statement: org.softlang.company.impl.bean.CompanyImpl.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.bean.CompanyImpl var0 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 60
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 61
randoop.util.Randomness: total calls to random: 62
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 63
randoop.util.Randomness: total calls to random: 64
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Adding sequence to active sequences of type class org.softlang.tests.Basics
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 65
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 66
Selected statement: org.softlang.util.SimpleLinkedList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 67
randoop.util.Randomness: total calls to random: 68
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 69
randoop.util.Randomness: total calls to random: 70
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 71
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 72
randoop.util.Randomness: total calls to random: 73
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
boolean var3 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 74
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 75
randoop.util.Randomness: total calls to random: 76
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 77
randoop.util.Randomness: total calls to random: 78
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : float:100.0 : 
var3 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Float var2 = new java.lang.Float(100.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var3 = var1.add((java.lang.Object)100.0f);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true

allSequences.size()=18
-------------------------------------------
randoop.util.Randomness: total calls to random: 79
Selected statement: org.softlang.company.factory.BeanFactory.mkCompany()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 80
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 81
randoop.util.Randomness: total calls to random: 82
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 83
randoop.util.Randomness: total calls to random: 84
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var4 = var1.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=19
-------------------------------------------
randoop.util.Randomness: total calls to random: 85
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 86
randoop.util.Randomness: total calls to random: 87
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 88
randoop.util.Randomness: total calls to random: 89
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;

allSequences.size()=20
-------------------------------------------
randoop.util.Randomness: total calls to random: 90
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 91
randoop.util.Randomness: total calls to random: 92
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
boolean var3 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=hi! [var4]  : true

allSequences.size()=21
-------------------------------------------
randoop.util.Randomness: total calls to random: 93
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 94
randoop.util.Randomness: total calls to random: 95
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 96
randoop.util.Randomness: total calls to random: 97
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  prim : double:10.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=22
-------------------------------------------
randoop.util.Randomness: total calls to random: 98
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 99
randoop.util.Randomness: total calls to random: 100
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;

allSequences.size()=23
-------------------------------------------
randoop.util.Randomness: total calls to random: 101
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 102
randoop.util.Randomness: total calls to random: 103
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=24
-------------------------------------------
randoop.util.Randomness: total calls to random: 104
Selected statement: org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 105
Selected statement: org.softlang.company.factory.BeanFactory.mkDepartment()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 106
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 107
randoop.util.Randomness: total calls to random: 108
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 109
randoop.util.Randomness: total calls to random: 110
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  prim : float:-1.0 : 
var7 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Float var6 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var7 = var0.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=25
-------------------------------------------
randoop.util.Randomness: total calls to random: 111
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 112
randoop.util.Randomness: total calls to random: 113
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 114
randoop.util.Randomness: total calls to random: 115
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true

allSequences.size()=26
-------------------------------------------
randoop.util.Randomness: total calls to random: 116
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 117
randoop.util.Randomness: total calls to random: 118
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.company.Employee var1 = var0.getManager();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=27
-------------------------------------------
randoop.util.Randomness: total calls to random: 119
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 120
randoop.util.Randomness: total calls to random: 121
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 122
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 123
randoop.util.Randomness: total calls to random: 124
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 125
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 126
randoop.util.Randomness: total calls to random: 127
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var5 = var0.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=28
-------------------------------------------
randoop.util.Randomness: total calls to random: 128
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 129
randoop.util.Randomness: total calls to random: 130
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 131
randoop.util.Randomness: total calls to random: 132
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  prim : double:10.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 
var6 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var6 var7 
var9 =  prim : java.lang.String:"" : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var6 var9 
var11 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var6 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var7 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var9 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var6.setAddress("");
// <NormalExecution object=null>;
var0.notifyObservers((java.lang.Object)var6);
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=29
-------------------------------------------
randoop.util.Randomness: total calls to random: 133
Selected statement: org.softlang.company.factory.BeanFactory.mkDepartment()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 134
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 135
randoop.util.Randomness: total calls to random: 136
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 137
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 138
randoop.util.Randomness: total calls to random: 139
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var5 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.PrimValue, value=0.0 [var5]  : true

allSequences.size()=30
-------------------------------------------
randoop.util.Randomness: total calls to random: 140
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 141
randoop.util.Randomness: total calls to random: 142
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 143
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 144
randoop.util.Randomness: total calls to random: 145
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var1 var3 
var5 =  method : java.util.Observable.hasChanged() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.DepartmentImpl var3 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var4 = var1.add((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var5 = var1.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=31
-------------------------------------------
randoop.util.Randomness: total calls to random: 146
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 147
randoop.util.Randomness: total calls to random: 148
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 149
randoop.util.Randomness: total calls to random: 150
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var4 =  prim : double:-1.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
boolean var3 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var4 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=32
-------------------------------------------
randoop.util.Randomness: total calls to random: 151
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 152
randoop.util.Randomness: total calls to random: 153
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 154
randoop.util.Randomness: total calls to random: 155
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;

allSequences.size()=33
-------------------------------------------
randoop.util.Randomness: total calls to random: 156
Selected statement: org.softlang.company.factory.BeanFactory.mkCompany()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 157
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 158
randoop.util.Randomness: total calls to random: 159
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=34
-------------------------------------------
randoop.util.Randomness: total calls to random: 160
Selected statement: org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 161
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 162
randoop.util.Randomness: total calls to random: 163
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 164
Selected statement: org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeinterface org.softlang.company.Component
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Component
getActivesequencesThatYield: found no sequences matching class interface org.softlang.company.Component
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 165
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 166
randoop.util.Randomness: total calls to random: 167
Successfully created new unique sequence:var0 =  cons : org.softlang.tests.Basics.<init>() : 
var1 =  method : org.softlang.tests.Basics.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.tests.Basics
Sequence after execution: 
org.softlang.tests.Basics var0 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
var0.test();
// <NormalExecution object=null>;

allSequences.size()=35
-------------------------------------------
randoop.util.Randomness: total calls to random: 168
Selected statement: org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeinterface org.softlang.company.Component
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Component
getActivesequencesThatYield: found no sequences matching class interface org.softlang.company.Component
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 169
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 170
randoop.util.Randomness: total calls to random: 171
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 172
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 173
randoop.util.Randomness: total calls to random: 174
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 175
randoop.util.Randomness: total calls to random: 176
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.countObservers() : var5 
var7 =  prim : double:10.0 : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var7 
var9 =  prim : double:10.0 : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var9 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var11 var12 
var14 =  prim : java.lang.String:"" : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var11 var14 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var11 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var2 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var6 = var5.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var7 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var9 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setAddress("");
// <NormalExecution object=null>;
var5.notifyObservers((java.lang.Object)var11);
// <NormalExecution object=null>;
boolean var17 = var2.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=true [var17]  : true

allSequences.size()=36
-------------------------------------------
randoop.util.Randomness: total calls to random: 177
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 178
randoop.util.Randomness: total calls to random: 179
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 180
Selected statement: org.softlang.company.factory.BeanFactory.<init>()
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;

allSequences.size()=37
-------------------------------------------
randoop.util.Randomness: total calls to random: 181
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 182
randoop.util.Randomness: total calls to random: 183
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 184
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 185
randoop.util.Randomness: total calls to random: 186
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.PrimValue, value=true [var2]  : true

allSequences.size()=38
-------------------------------------------
randoop.util.Randomness: total calls to random: 187
Selected statement: java.util.Observable.notifyObservers(java.lang.Object)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 188
randoop.util.Randomness: total calls to random: 189
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 190
randoop.util.Randomness: total calls to random: 191
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  prim : long:100 : 
var6 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.Long var5 = new java.lang.Long(100L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var0.notifyObservers((java.lang.Object)100L);
// <NormalExecution object=null>;

allSequences.size()=39
-------------------------------------------
randoop.util.Randomness: total calls to random: 192
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 193
randoop.util.Randomness: total calls to random: 194
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 195
randoop.util.Randomness: total calls to random: 196
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  prim : double:10.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var5 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;

allSequences.size()=40
-------------------------------------------
randoop.util.Randomness: total calls to random: 197
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 198
randoop.util.Randomness: total calls to random: 199
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 89 sequences.
components: 89
randoop.util.Randomness: total calls to random: 200
randoop.util.Randomness: total calls to random: 201
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var4 =  prim : long:-1 : 
var5 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var3 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var4 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var5 = var3.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=41
-------------------------------------------
randoop.util.Randomness: total calls to random: 202
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 203
randoop.util.Randomness: total calls to random: 204
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var2.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=42
-------------------------------------------
randoop.util.Randomness: total calls to random: 205
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 206
randoop.util.Randomness: total calls to random: 207
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var2.deleteObservers();
// <NormalExecution object=null>;
var2.deleteObservers();
// <NormalExecution object=null>;

allSequences.size()=43
-------------------------------------------
randoop.util.Randomness: total calls to random: 208
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 209
randoop.util.Randomness: total calls to random: 210
Successfully created new unique sequence:var0 =  cons : org.softlang.tests.Basics.<init>() : 
var1 =  method : org.softlang.tests.Basics.test() : var0 
var2 =  method : org.softlang.tests.Basics.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.tests.Basics
Sequence after execution: 
org.softlang.tests.Basics var0 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
var0.test();
// <NormalExecution object=null>;
var0.test();
// <NormalExecution object=null>;

allSequences.size()=44
-------------------------------------------
randoop.util.Randomness: total calls to random: 211
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 212
randoop.util.Randomness: total calls to random: 213
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 214
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 215
randoop.util.Randomness: total calls to random: 216
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 217
Selected statement: org.softlang.company.factory.BeanFactory.mkEmployee()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 218
randoop.util.Randomness: total calls to random: 219
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var1 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Adding sequence to active sequences of type interface org.softlang.company.Employee
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var1 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
<randoop.IsNotNull@1f [var1]  : true

allSequences.size()=45
-------------------------------------------
randoop.util.Randomness: total calls to random: 220
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 221
randoop.util.Randomness: total calls to random: 222
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 223
randoop.util.Randomness: total calls to random: 224
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  prim : long:0 : 
var5 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var3 var4 
var6 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Long var4 = new java.lang.Long(0L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var3.notifyObservers((java.lang.Object)0L);
// <NormalExecution object=null>;
boolean var6 = var1.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=46
-------------------------------------------
randoop.util.Randomness: total calls to random: 225
Selected statement: org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 226
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 227
randoop.util.Randomness: total calls to random: 228
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 229
randoop.util.Randomness: total calls to random: 230
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.countObservers() : var5 
var7 =  prim : double:10.0 : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var7 
var9 =  prim : double:10.0 : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var9 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var11 var12 
var14 =  prim : java.lang.String:"" : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var11 var14 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var11 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var2 var11 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  prim : long:0 : 
var20 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var18 var19 
var21 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var2 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var6 = var5.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var7 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var9 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setAddress("");
// <NormalExecution object=null>;
var5.notifyObservers((java.lang.Object)var11);
// <NormalExecution object=null>;
boolean var17 = var2.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Long var19 = new java.lang.Long(0L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var18.notifyObservers((java.lang.Object)0L);
// <NormalExecution object=null>;
boolean var21 = var2.remove((org.softlang.company.Subunit)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=false [var21]  : true

allSequences.size()=47
-------------------------------------------
randoop.util.Randomness: total calls to random: 231
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 232
randoop.util.Randomness: total calls to random: 233
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=48
-------------------------------------------
randoop.util.Randomness: total calls to random: 234
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 235
randoop.util.Randomness: total calls to random: 236
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 237
Selected statement: org.softlang.company.factory.BeanFactory.mkCompany()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 238
randoop.util.Randomness: total calls to random: 239
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var1 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 
var2 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var1 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.Company var2 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNotNull@1f [var2]  : true

allSequences.size()=49
-------------------------------------------
randoop.util.Randomness: total calls to random: 240
Selected statement: java.util.Observable.countObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 241
randoop.util.Randomness: total calls to random: 242
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=50
-------------------------------------------
randoop.util.Randomness: total calls to random: 243
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 244
randoop.util.Randomness: total calls to random: 245
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 246
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 247
randoop.util.Randomness: total calls to random: 248
Will query component set for objects of typedouble
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 249
randoop.util.Randomness: total calls to random: 250
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  prim : double:-1.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Double var5 = new java.lang.Double((-1.0d));
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary((-1.0d));
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=51
-------------------------------------------
randoop.util.Randomness: total calls to random: 251
Selected statement: org.softlang.company.impl.bean.ContainerImpl.subunits()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 252
randoop.util.Randomness: total calls to random: 253
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Adding sequence to active sequences of type interface java.lang.Iterable
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
java.lang.Iterable var4 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=52
-------------------------------------------
randoop.util.Randomness: total calls to random: 254
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 255
randoop.util.Randomness: total calls to random: 256
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 257
randoop.util.Randomness: total calls to random: 258
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.bean.CompanyImpl var0 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;

allSequences.size()=53
-------------------------------------------
randoop.util.Randomness: total calls to random: 259
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 260
randoop.util.Randomness: total calls to random: 261
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 262
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 263
randoop.util.Randomness: total calls to random: 264
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.countObservers() : var5 
var7 =  prim : double:10.0 : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var7 
var9 =  prim : double:10.0 : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var9 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var11 var12 
var14 =  prim : java.lang.String:"" : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var11 var14 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var11 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var2 var11 
var18 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var17 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var6 = var5.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var7 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var9 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setAddress("");
// <NormalExecution object=null>;
var5.notifyObservers((java.lang.Object)var11);
// <NormalExecution object=null>;
boolean var17 = var2.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var18 = new org.softlang.util.RemoveFromList((java.lang.Object)var17);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=true [var17]  : true

allSequences.size()=54
-------------------------------------------
randoop.util.Randomness: total calls to random: 265
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 266
randoop.util.Randomness: total calls to random: 267
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 268
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 269
randoop.util.Randomness: total calls to random: 270
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  prim : double:10.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var5 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
double var7 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=10.0 [var7]  : true

allSequences.size()=55
-------------------------------------------
randoop.util.Randomness: total calls to random: 271
Selected statement: org.softlang.company.factory.BeanFactory.mkCompany()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 272
randoop.util.Randomness: total calls to random: 273
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var1 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 
var2 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 
var3 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Adding sequence to active sequences of type interface org.softlang.company.Company
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var1 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.Company var2 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var3 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNotNull@1f [var2]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=56
-------------------------------------------
randoop.util.Randomness: total calls to random: 274
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 275
randoop.util.Randomness: total calls to random: 276
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 277
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 278
randoop.util.Randomness: total calls to random: 279
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var6 = new org.softlang.util.RemoveFromList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=57
-------------------------------------------
randoop.util.Randomness: total calls to random: 280
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 281
randoop.util.Randomness: total calls to random: 282
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.bean.CompanyImpl var0 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true

allSequences.size()=58
-------------------------------------------
randoop.util.Randomness: total calls to random: 283
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 284
randoop.util.Randomness: total calls to random: 285
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
boolean var3 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var4 = var0.getName();
// <NormalExecution object=object-of-type-java.lang.String>;
java.lang.String var5 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=hi! [var4]  : true
<randoop.IsNull@25 [var5]  : true

allSequences.size()=59
-------------------------------------------
randoop.util.Randomness: total calls to random: 286
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 287
randoop.util.Randomness: total calls to random: 288
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 289
randoop.util.Randomness: total calls to random: 290
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var3 =  prim : char:34 : 
var4 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.util.Iterator var2 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
java.lang.Character var3 = new java.lang.Character('4');
// <NormalExecution object=object-of-type-java.lang.Character>;
boolean var4 = var1.add((java.lang.Object)'4');
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var2]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=60
-------------------------------------------
randoop.util.Randomness: total calls to random: 291
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 292
randoop.util.Randomness: total calls to random: 293
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 294
randoop.util.Randomness: total calls to random: 295
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.countObservers() : var5 
var7 =  prim : boolean:true : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var5 var7 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var5 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var6 = var5.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var7 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var5.setManager(true);
// <NormalExecution object=null>;
boolean var9 = var5.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var10 = var0.add((org.softlang.company.Subunit)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=true [var9]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=61
-------------------------------------------
randoop.util.Randomness: total calls to random: 296
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 297
randoop.util.Randomness: total calls to random: 298
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 299
randoop.util.Randomness: total calls to random: 300
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  prim : double:10.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=62
-------------------------------------------
randoop.util.Randomness: total calls to random: 301
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 302
randoop.util.Randomness: total calls to random: 303
Will query component set for objects of typeinterface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: entering method, clazz=interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: found no sequences matching class interface org.softlang.visitor.VoidVisitor
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 304
Selected statement: java.util.Observable.deleteObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 305
randoop.util.Randomness: total calls to random: 306
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  prim : double:10.0 : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var4 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var6 
var8 =  method : java.util.Observable.deleteObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var4 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
var0.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=63
-------------------------------------------
randoop.util.Randomness: total calls to random: 307
Selected statement: org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: found no sequences matching class class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 308
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 309
randoop.util.Randomness: total calls to random: 310
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 311
randoop.util.Randomness: total calls to random: 312
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var2 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var3 = var1.remove((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true

allSequences.size()=64
-------------------------------------------
randoop.util.Randomness: total calls to random: 313
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 314
randoop.util.Randomness: total calls to random: 315
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 316
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 317
randoop.util.Randomness: total calls to random: 318
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 
var6 =  method : java.util.Observable.notifyObservers() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var0.notifyObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=65
-------------------------------------------
randoop.util.Randomness: total calls to random: 319
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 320
randoop.util.Randomness: total calls to random: 321
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var4 =  prim : long:-1 : 
var5 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var3 var4 
var6 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var4 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var5 = var3.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var3.deleteObservers();
// <NormalExecution object=null>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=66
-------------------------------------------
randoop.util.Randomness: total calls to random: 322
Selected statement: org.softlang.company.factory.BeanFactory.mkEmployee()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 323
randoop.util.Randomness: total calls to random: 324
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var1 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 
var2 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 
var3 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 
var4 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 active.
Adding sequence to active sequences of type interface org.softlang.company.Employee
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var1 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.Company var2 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Company var3 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Employee var4 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNotNull@1f [var2]  : true
<randoop.IsNotNull@1f [var3]  : true
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=67
-------------------------------------------
randoop.util.Randomness: total calls to random: 325
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 326
randoop.util.Randomness: total calls to random: 327
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var5 
var7 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.RemoveFromList var6 = new org.softlang.util.RemoveFromList((java.lang.Object)var5);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;
org.softlang.util.AddToList var7 = new org.softlang.util.AddToList((java.lang.Object)var6);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=68
-------------------------------------------
randoop.util.Randomness: total calls to random: 328
Selected statement: org.softlang.company.impl.bean.DepartmentImpl.getManager()
Will query component set for objects of typeclass org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.DepartmentImpl
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 329
randoop.util.Randomness: total calls to random: 330
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 331
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 332
randoop.util.Randomness: total calls to random: 333
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 334
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 335
randoop.util.Randomness: total calls to random: 336
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 
var6 =  method : java.util.Observable.notifyObservers() : var0 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.String var7 = var0.getAddress();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=69
-------------------------------------------
randoop.util.Randomness: total calls to random: 337
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 338
randoop.util.Randomness: total calls to random: 339
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var3 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getName() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.company.impl.bean.EmployeeImpl var2 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var3 = var1.remove((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var4 = var2.getName();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.IsNull@25 [var4]  : true

allSequences.size()=70
-------------------------------------------
randoop.util.Randomness: total calls to random: 340
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 341
randoop.util.Randomness: total calls to random: 342
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 343
Selected statement: org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 344
randoop.util.Randomness: total calls to random: 345
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 346
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 347
randoop.util.Randomness: total calls to random: 348
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 129 sequences.
components: 129
randoop.util.Randomness: total calls to random: 349
randoop.util.Randomness: total calls to random: 350
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var7 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=71
-------------------------------------------
randoop.util.Randomness: total calls to random: 351
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 352
randoop.util.Randomness: total calls to random: 353
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 354
randoop.util.Randomness: total calls to random: 355
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 
var6 =  method : java.util.Observable.notifyObservers() : var0 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
var0.notifyObservers();
// <NormalExecution object=null>;
java.lang.String var7 = var0.getAddress();
// <NormalExecution object=null>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("");
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.IsNull@25 [var7]  : true

allSequences.size()=72
-------------------------------------------
randoop.util.Randomness: total calls to random: 356
Selected statement: org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 357
randoop.util.Randomness: total calls to random: 358
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 359
randoop.util.Randomness: total calls to random: 360
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var5 =  prim : java.lang.String:"hi!" : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
java.lang.Iterable var4 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var5 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var4]  : true

allSequences.size()=73
-------------------------------------------
randoop.util.Randomness: total calls to random: 361
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 362
randoop.util.Randomness: total calls to random: 363
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 364
randoop.util.Randomness: total calls to random: 365
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=74
-------------------------------------------
randoop.util.Randomness: total calls to random: 366
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 367
randoop.util.Randomness: total calls to random: 368
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
double var4 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0.0 [var4]  : true

allSequences.size()=75
-------------------------------------------
randoop.util.Randomness: total calls to random: 369
Selected statement: java.util.Observable.notifyObservers()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 370
randoop.util.Randomness: total calls to random: 371
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 
var4 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 
var5 =  method : java.util.Observable.notifyObservers() : var2 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var2.deleteObservers();
// <NormalExecution object=null>;
var2.deleteObservers();
// <NormalExecution object=null>;
var2.notifyObservers();
// <NormalExecution object=null>;

allSequences.size()=76
-------------------------------------------
randoop.util.Randomness: total calls to random: 372
Selected statement: org.softlang.util.ObservableSimpleList.iterator()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 373
randoop.util.Randomness: total calls to random: 374
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 375
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 376
randoop.util.Randomness: total calls to random: 377
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 378
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 379
randoop.util.Randomness: total calls to random: 380
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 381
randoop.util.Randomness: total calls to random: 382
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : float:100.0 : 
var3 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var2 
var4 =  prim : byte:-1 : 
var5 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Float var2 = new java.lang.Float(100.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var3 = var1.add((java.lang.Object)100.0f);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Byte var4 = new java.lang.Byte((byte)(-1));
// <NormalExecution object=object-of-type-java.lang.Byte>;
boolean var5 = var1.add((java.lang.Object)(byte)(-1));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=77
-------------------------------------------
randoop.util.Randomness: total calls to random: 383
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 136 sequences.
components: 136
randoop.util.Randomness: total calls to random: 384
randoop.util.Randomness: total calls to random: 385
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  prim : float:-1.0 : 
var7 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var6 
var8 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.Float var6 = new java.lang.Float((-1.0f));
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var7 = var0.remove((java.lang.Object)(-1.0f));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.AddToList var8 = new org.softlang.util.AddToList((java.lang.Object)var7);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var7]  : true

allSequences.size()=78
-------------------------------------------
randoop.util.Randomness: total calls to random: 386
Selected statement: org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
Will query component set for objects of typeinterface org.softlang.company.Component
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Component
getActivesequencesThatYield: found no sequences matching class interface org.softlang.company.Component
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 387
Selected statement: java.util.Observable.addObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 388
randoop.util.Randomness: total calls to random: 389
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 390
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 391
randoop.util.Randomness: total calls to random: 392
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 393
randoop.util.Randomness: total calls to random: 394
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.subunits() : var0 
var5 =  prim : java.lang.String:"hi!" : 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : var0 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  method : java.util.Observable.countObservers() : var7 
var9 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var7 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
java.lang.Iterable var4 = var0.subunits();
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var5 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var8 = var7.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
boolean var9 = var0.remove((org.softlang.company.Subunit)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var4]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=false [var9]  : true

allSequences.size()=79
-------------------------------------------
randoop.util.Randomness: total calls to random: 395
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 396
randoop.util.Randomness: total calls to random: 397
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 398
randoop.util.Randomness: total calls to random: 399
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var4 
var6 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var1 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var5 = var4.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var1.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.IsNotNull@1f [var5]  : true
<randoop.PrimValue, value=false [var6]  : true

allSequences.size()=80
-------------------------------------------
randoop.util.Randomness: total calls to random: 400
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 401
randoop.util.Randomness: total calls to random: 402
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 403
Selected statement: org.softlang.company.factory.BeanFactory.mkCompany()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 404
randoop.util.Randomness: total calls to random: 405
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 406
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 407
randoop.util.Randomness: total calls to random: 408
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 409
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 410
randoop.util.Randomness: total calls to random: 411
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 141 sequences.
components: 141
randoop.util.Randomness: total calls to random: 412
randoop.util.Randomness: total calls to random: 413
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var2 = var0.remove((java.lang.Object)"hi!");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var2]  : true

allSequences.size()=81
-------------------------------------------
randoop.util.Randomness: total calls to random: 414
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 415
randoop.util.Randomness: total calls to random: 416
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 142 sequences.
components: 142
randoop.util.Randomness: total calls to random: 417
randoop.util.Randomness: total calls to random: 418
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 
var4 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  prim : long:0 : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var7 var8 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var7 
var11 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var2 var10 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var2.deleteObservers();
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var4 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var6 = var4.add((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Long var8 = new java.lang.Long(0L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var7.notifyObservers((java.lang.Object)0L);
// <NormalExecution object=null>;
boolean var10 = var5.remove((org.softlang.company.Subunit)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var11 = var2.add((java.lang.Object)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var11]  : true

allSequences.size()=82
-------------------------------------------
randoop.util.Randomness: total calls to random: 419
Selected statement: org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 420
randoop.util.Randomness: total calls to random: 421
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 143 sequences.
components: 143
randoop.util.Randomness: total calls to random: 422
randoop.util.Randomness: total calls to random: 423
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var3 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var2 
var4 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var5 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var6 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var4 var5 
var7 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var8 =  prim : long:0 : 
var9 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var7 var8 
var10 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var5 var7 
var11 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var2 var10 
var12 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var12 var13 
var15 =  method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : var2 var12 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 12
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var2.deleteObservers();
// <NormalExecution object=null>;
org.softlang.util.SimpleLinkedList var4 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var5 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var6 = var4.add((java.lang.Object)var5);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var7 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.Long var8 = new java.lang.Long(0L);
// <NormalExecution object=object-of-type-java.lang.Long>;
var7.notifyObservers((java.lang.Object)0L);
// <NormalExecution object=null>;
boolean var10 = var5.remove((org.softlang.company.Subunit)var7);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var11 = var2.add((java.lang.Object)var10);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var12 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var13 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var12.setName("hi!");
// <NormalExecution object=null>;
boolean var15 = var2.remove((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var6]  : true
<randoop.PrimValue, value=false [var10]  : true
<randoop.PrimValue, value=true [var11]  : true
<randoop.PrimValue, value=false [var15]  : true

allSequences.size()=83
-------------------------------------------
randoop.util.Randomness: total calls to random: 424
Selected statement: org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
Will query component set for objects of typeinterface org.softlang.util.SimpleList
getActivesequencesThatYield: entering method, clazz=interface org.softlang.util.SimpleList
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 425
randoop.util.Randomness: total calls to random: 426
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var4 =  prim : long:-1 : 
var5 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var3 var4 
var6 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var3 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 active.
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var4 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var5 = var3.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var3.deleteObservers();
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var3);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var5]  : true

allSequences.size()=84
-------------------------------------------
randoop.util.Randomness: total calls to random: 427
Selected statement: org.softlang.company.factory.BeanFactory.mkDepartment()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 428
randoop.util.Randomness: total calls to random: 429
Successfully created new unique sequence:var0 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var1 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var0 
var2 =  method : org.softlang.company.factory.BeanFactory.mkCompany() : var0 
var3 =  method : org.softlang.company.factory.BeanFactory.mkDepartment() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Adding sequence to active sequences of type interface org.softlang.company.Department
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.factory.BeanFactory var0 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var1 = var0.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
org.softlang.company.Company var2 = var0.mkCompany();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
org.softlang.company.Department var3 = var0.mkDepartment();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
<randoop.IsNotNull@1f [var1]  : true
<randoop.IsNotNull@1f [var2]  : true
<randoop.IsNotNull@1f [var3]  : true

allSequences.size()=85
-------------------------------------------
randoop.util.Randomness: total calls to random: 430
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 431
randoop.util.Randomness: total calls to random: 432
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 433
Selected statement: org.softlang.company.factory.BeanFactory.mkEmployee()
Will query component set for objects of typeclass org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.factory.BeanFactory
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 434
randoop.util.Randomness: total calls to random: 435
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var1 
var3 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var0 var1 
var4 =  cons : org.softlang.company.factory.BeanFactory.<init>() : 
var5 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var4 
var6 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var1 var4 
var7 =  method : org.softlang.company.factory.BeanFactory.mkEmployee() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is null)
Making index 4 active.
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 active.
Adding sequence to active sequences of type interface org.softlang.company.Employee
Adding sequence to active sequences of type class org.softlang.company.factory.BeanFactory
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var2 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var1);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
var0.notifyObservers((java.lang.Object)var1);
// <NormalExecution object=null>;
org.softlang.company.factory.BeanFactory var4 = new org.softlang.company.factory.BeanFactory();
// <NormalExecution object=object-of-type-org.softlang.company.factory.BeanFactory>;
org.softlang.company.Employee var5 = var4.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
boolean var6 = var1.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.Employee var7 = var4.mkEmployee();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
<randoop.IsNotNull@1f [var5]  : true
<randoop.PrimValue, value=false [var6]  : true
<randoop.IsNotNull@1f [var7]  : true

allSequences.size()=86
-------------------------------------------
randoop.util.Randomness: total calls to random: 436
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 437
randoop.util.Randomness: total calls to random: 438
Will query component set for objects of typeclass java.lang.String
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 439
randoop.util.Randomness: total calls to random: 440
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : boolean:true : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var2 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : var0 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var6 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Boolean var2 = new java.lang.Boolean(true);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(true);
// <NormalExecution object=null>;
boolean var4 = var0.getManager();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
double var5 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
java.lang.String var6 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("hi!");
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=true [var4]  : true
<randoop.PrimValue, value=0.0 [var5]  : true

allSequences.size()=87
-------------------------------------------
randoop.util.Randomness: total calls to random: 441
Selected statement: org.softlang.util.ObservableSimpleList.deleteObservers()
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 442
randoop.util.Randomness: total calls to random: 443
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  method : org.softlang.util.ObservableSimpleList.iterator() : var1 
var3 =  prim : char:34 : 
var4 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var3 
var5 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var1 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.util.Iterator var2 = var1.iterator();
// <NormalExecution object=object-of-type-java.util.LinkedList$ListItr>;
java.lang.Character var3 = new java.lang.Character('4');
// <NormalExecution object=object-of-type-java.lang.Character>;
boolean var4 = var1.add((java.lang.Object)'4');
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var1.deleteObservers();
// <NormalExecution object=null>;
<randoop.IsNotNull@1f [var2]  : true
<randoop.PrimValue, value=true [var4]  : true

allSequences.size()=88
-------------------------------------------
randoop.util.Randomness: total calls to random: 444
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getName()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 445
randoop.util.Randomness: total calls to random: 446
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.CompanyImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 
var2 =  method : org.softlang.company.impl.bean.ComponentImpl.getName() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.CompanyImpl
Sequence after execution: 
org.softlang.company.impl.bean.CompanyImpl var0 = new org.softlang.company.impl.bean.CompanyImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.CompanyImpl>;
java.lang.String var1 = var0.getName();
// <NormalExecution object=null>;
java.lang.String var2 = var0.getName();
// <NormalExecution object=null>;
<randoop.IsNull@25 [var1]  : true
<randoop.IsNull@25 [var2]  : true

allSequences.size()=89
-------------------------------------------
randoop.util.Randomness: total calls to random: 447
Selected statement: org.softlang.util.AddToList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 154 sequences.
components: 154
randoop.util.Randomness: total calls to random: 448
randoop.util.Randomness: total calls to random: 449
Successfully created new unique sequence:var0 =  prim : int:10 : 
var1 =  cons : org.softlang.util.AddToList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.AddToList
Sequence after execution: 
java.lang.Integer var0 = new java.lang.Integer(10);
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.softlang.util.AddToList var1 = new org.softlang.util.AddToList((java.lang.Object)10);
// <NormalExecution object=object-of-type-org.softlang.util.AddToList>;

allSequences.size()=90
-------------------------------------------
randoop.util.Randomness: total calls to random: 450
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 451
randoop.util.Randomness: total calls to random: 452
Will query component set for objects of typeboolean
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 453
randoop.util.Randomness: total calls to random: 454
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  prim : boolean:false : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : var0 var5 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.Boolean var5 = new java.lang.Boolean(false);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var0.setManager(false);
// <NormalExecution object=null>;

allSequences.size()=91
-------------------------------------------
randoop.util.Randomness: total calls to random: 455
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 156 sequences.
components: 156
randoop.util.Randomness: total calls to random: 456
randoop.util.Randomness: total calls to random: 457
Successfully created new unique sequence:var0 =  prim : float:1.0 : 
var1 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
java.lang.Float var0 = new java.lang.Float(1.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
org.softlang.util.RemoveFromList var1 = new org.softlang.util.RemoveFromList((java.lang.Object)1.0f);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;

allSequences.size()=92
-------------------------------------------
randoop.util.Randomness: total calls to random: 458
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 459
randoop.util.Randomness: total calls to random: 460
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 461
randoop.util.Randomness: total calls to random: 462
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var4 =  prim : float:100.0 : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Float var4 = new java.lang.Float(100.0f);
// <NormalExecution object=object-of-type-java.lang.Float>;
boolean var5 = var0.remove((java.lang.Object)100.0f);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=93
-------------------------------------------
randoop.util.Randomness: total calls to random: 463
Selected statement: org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 464
randoop.util.Randomness: total calls to random: 465
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 466
randoop.util.Randomness: total calls to random: 467
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var3 var4 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var3 var6 
var8 =  prim : double:10.0 : 
var9 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var3 var8 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var3 
var11 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var1 var3 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var3 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var4 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var3.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var8 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var3.setSalary(10.0d);
// <NormalExecution object=null>;
double var10 = var3.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
boolean var11 = var1.remove((org.softlang.company.Subunit)var3);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=10.0 [var10]  : true
<randoop.PrimValue, value=false [var11]  : true

allSequences.size()=94
-------------------------------------------
randoop.util.Randomness: total calls to random: 468
Selected statement: java.util.Observable.hasChanged()
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 469
randoop.util.Randomness: total calls to random: 470
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  method : java.util.Observable.hasChanged() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
boolean var5 = var0.hasChanged();
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=95
-------------------------------------------
randoop.util.Randomness: total calls to random: 471
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getAddress()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 472
randoop.util.Randomness: total calls to random: 473
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var0 var1 
var3 =  prim : java.lang.String:"" : 
var4 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var0 var3 
var5 =  prim : double:10.0 : 
var6 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var5 
var7 =  method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is null)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var1 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var3 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var0.setAddress("");
// <NormalExecution object=null>;
java.lang.Double var5 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.String var7 = var0.getAddress();
// <NormalExecution object=object-of-type-java.lang.String>;
<randoop.PrimValue, value= [var7]  : true

allSequences.size()=96
-------------------------------------------
randoop.util.Randomness: total calls to random: 474
Selected statement: org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.SimpleLinkedList
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 475
randoop.util.Randomness: total calls to random: 476
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 477
randoop.util.Randomness: total calls to random: 478
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  prim : java.lang.String:"" : 
var7 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var6 
var8 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var9 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var10 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var8 var9 
var11 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var8 
var12 =  prim : long:-1 : 
var13 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var11 var12 
var14 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var11 
var15 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var11 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.SimpleLinkedList
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var6 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var7 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.SimpleLinkedList var8 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var9 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var10 = var8.add((java.lang.Object)var9);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var11 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var8);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var12 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var13 = var11.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var11.deleteObservers();
// <NormalExecution object=null>;
boolean var15 = var0.remove((java.lang.Object)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=true [var10]  : true
<randoop.PrimValue, value=true [var13]  : true
<randoop.PrimValue, value=false [var15]  : true

allSequences.size()=97
-------------------------------------------
randoop.util.Randomness: total calls to random: 479
Selected statement: org.softlang.company.impl.bean.ComponentImpl.getParent()
Will query component set for objects of typeclass org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ComponentImpl
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 480
randoop.util.Randomness: total calls to random: 481
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : java.util.Observable.countObservers() : var0 
var2 =  prim : double:10.0 : 
var3 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var0 var2 
var4 =  method : java.util.Observable.countObservers() : var0 
var5 =  method : java.util.Observable.countObservers() : var0 
var6 =  method : org.softlang.company.impl.bean.ComponentImpl.getParent() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var1 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var2 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var0.setSalary(10.0d);
// <NormalExecution object=null>;
int var4 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
org.softlang.company.impl.bean.ComponentImpl var6 = var0.getParent();
// <NormalExecution object=null>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.IsNull@25 [var6]  : true

allSequences.size()=98
-------------------------------------------
randoop.util.Randomness: total calls to random: 482
Selected statement: org.softlang.util.RemoveFromList.<init>(java.lang.Object)
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 483
randoop.util.Randomness: total calls to random: 484
Successfully created new unique sequence:var0 =  prim : double:10.0 : 
var1 =  cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object) : var0 

Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Making index 0 inactive (value is a primitive)
Making index 1 active.
Adding sequence to active sequences of type class org.softlang.util.RemoveFromList
Sequence after execution: 
java.lang.Double var0 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
org.softlang.util.RemoveFromList var1 = new org.softlang.util.RemoveFromList((java.lang.Object)10.0d);
// <NormalExecution object=object-of-type-org.softlang.util.RemoveFromList>;

allSequences.size()=99
-------------------------------------------
randoop.util.Randomness: total calls to random: 485
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 486
randoop.util.Randomness: total calls to random: 487
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 166 sequences.
components: 166
randoop.util.Randomness: total calls to random: 488
randoop.util.Randomness: total calls to random: 489
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var2 
var4 =  prim : java.lang.String:"" : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var2 var4 
var6 =  cons : org.softlang.tests.Basics.<init>() : 
var7 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var2 var6 
var8 =  prim : java.lang.String:"" : 
var9 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var2 var8 
var10 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var1 var8 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 6, 6
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 6, 6
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 active.
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var2 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var2);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var4 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var5 = var2.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var6 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var7 = var2.remove((java.lang.Object)var6);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var8 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var9 = var2.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var10 = var1.add((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=false [var5]  : true
<randoop.PrimValue, value=false [var7]  : true
<randoop.PrimValue, value=false [var9]  : true
<randoop.PrimValue, value=true [var10]  : true

allSequences.size()=100
-------------------------------------------
randoop.util.Randomness: total calls to random: 490
Selected statement: org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 491
randoop.util.Randomness: total calls to random: 492
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 493
Selected statement: org.softlang.util.ObservableSimpleList.add(java.lang.Object)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 494
randoop.util.Randomness: total calls to random: 495
Will query component set for objects of typeclass java.lang.Object
getActivesequencesThatYield: entering method, clazz=class java.lang.Object
getActivesequencesThatYield: returning 167 sequences.
components: 167
randoop.util.Randomness: total calls to random: 496
randoop.util.Randomness: total calls to random: 497
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var2 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var0 var1 
var3 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var4 =  prim : long:-1 : 
var5 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var3 var4 
var6 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var3 
var7 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var3 
var8 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var9 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var8 
var10 =  prim : java.lang.String:"" : 
var11 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var8 var10 
var12 =  cons : org.softlang.tests.Basics.<init>() : 
var13 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var8 var12 
var14 =  prim : java.lang.String:"" : 
var15 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var8 var14 
var16 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var17 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var18 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var16 var17 
var19 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var16 
var20 =  prim : long:-1 : 
var21 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var19 var20 
var22 =  method : org.softlang.util.ObservableSimpleList.deleteObservers() : var19 
var23 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var8 var19 
var24 =  method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : var3 var23 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 8, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 8
Contract returned true.
Checking contract class randoop.EqualsHashcode on 16, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 8, 16
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 8
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 16, 16
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 17, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 17
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 17, 17
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 3, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 7, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 9, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 3
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 7
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 9
Contract returned true.
Checking contract class randoop.EqualsHashcode on 19, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 3, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 7, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 9, 19
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 3
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 7
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 9
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 19, 19
Contract returned true.
Checking contract class randoop.EqualsHashcode on 12, 12
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 12, 12
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 active.
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Making index 7 active.
Making index 8 active.
Making index 9 active.
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 active.
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 active.
Making index 17 active.
Making index 18 inactive (value is a primitive)
Making index 19 active.
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.util.ObservableSimpleList
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var1 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var2 = var0.add((java.lang.Object)var1);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var3 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var4 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var5 = var3.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var3.deleteObservers();
// <NormalExecution object=null>;
org.softlang.util.ObservableSimpleList var7 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var3);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
org.softlang.util.SimpleLinkedList var8 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var9 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var8);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var10 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var11 = var8.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var12 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var13 = var8.remove((java.lang.Object)var12);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var15 = var8.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.SimpleLinkedList var16 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var17 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var18 = var16.add((java.lang.Object)var17);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.util.ObservableSimpleList var19 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var16);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.Long var20 = new java.lang.Long((-1L));
// <NormalExecution object=object-of-type-java.lang.Long>;
boolean var21 = var19.add((java.lang.Object)(-1L));
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var19.deleteObservers();
// <NormalExecution object=null>;
boolean var23 = var8.remove((java.lang.Object)var19);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var24 = var3.add((java.lang.Object)var23);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var2]  : true
<randoop.PrimValue, value=true [var5]  : true
<randoop.PrimValue, value=false [var11]  : true
<randoop.PrimValue, value=false [var13]  : true
<randoop.PrimValue, value=false [var15]  : true
<randoop.PrimValue, value=true [var18]  : true
<randoop.PrimValue, value=true [var21]  : true
<randoop.PrimValue, value=false [var23]  : true
<randoop.PrimValue, value=true [var24]  : true

allSequences.size()=101
-------------------------------------------
randoop.util.Randomness: total calls to random: 498
Selected statement: org.softlang.company.impl.bean.EmployeeImpl.getSalary()
Will query component set for objects of typeclass org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.EmployeeImpl
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 499
randoop.util.Randomness: total calls to random: 500
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var1 =  method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.EmployeeImpl var0 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
double var1 = var0.getSalary();
// <NormalExecution object=object-of-type-java.lang.Double>;
<randoop.PrimValue, value=0.0 [var1]  : true

allSequences.size()=102
-------------------------------------------
randoop.util.Randomness: total calls to random: 501
Selected statement: org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 502
randoop.util.Randomness: total calls to random: 503
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 504
Selected statement: org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
Will query component set for objects of typeclass org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: entering method, clazz=class org.softlang.util.ObservableSimpleList
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 505
randoop.util.Randomness: total calls to random: 506
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 507
Selected statement: org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
Will query component set for objects of typeclass org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: entering method, clazz=class org.softlang.company.impl.bean.ContainerImpl
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 508
randoop.util.Randomness: total calls to random: 509
Will query component set for objects of typeinterface org.softlang.company.Subunit
getActivesequencesThatYield: entering method, clazz=interface org.softlang.company.Subunit
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 510
randoop.util.Randomness: total calls to random: 511
Successfully created new unique sequence:var0 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var1 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var2 =  cons : org.softlang.company.impl.bean.DepartmentImpl.<init>() : 
var3 =  method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : var1 var2 
var4 =  method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : var0 var2 
var5 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var6 =  method : java.util.Observable.countObservers() : var5 
var7 =  prim : double:10.0 : 
var8 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var7 
var9 =  prim : double:10.0 : 
var10 =  method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : var5 var9 
var11 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var11 var12 
var14 =  prim : java.lang.String:"" : 
var15 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var11 var14 
var16 =  method : java.util.Observable.notifyObservers(java.lang.Object) : var5 var11 
var17 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var2 var11 
var18 =  cons : org.softlang.company.impl.bean.EmployeeImpl.<init>() : 
var19 =  prim : java.lang.String:"hi!" : 
var20 =  method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : var18 var19 
var21 =  prim : java.lang.String:"" : 
var22 =  method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : var18 var21 
var23 =  method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : var2 var18 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 0, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 2, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 2
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 2, 2
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 5, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 11, 18
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 5
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 11
Contract returned true.
Checking contract class randoop.EqualsHashcode on 18, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 5, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 11, 18
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 5
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 11
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 18, 18
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 active.
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 active.
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 active.
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Making index 16 inactive (value is null)
Making index 17 inactive (value is a primitive)
Making index 18 active.
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class org.softlang.company.impl.bean.DepartmentImpl
Adding sequence to active sequences of type class org.softlang.company.impl.bean.EmployeeImpl
Sequence after execution: 
org.softlang.company.impl.bean.DepartmentImpl var0 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
org.softlang.util.SimpleLinkedList var1 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.company.impl.bean.DepartmentImpl var2 = new org.softlang.company.impl.bean.DepartmentImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.DepartmentImpl>;
boolean var3 = var1.add((java.lang.Object)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
boolean var4 = var0.remove((org.softlang.company.Subunit)var2);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var5 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
int var6 = var5.countObservers();
// <NormalExecution object=object-of-type-java.lang.Integer>;
java.lang.Double var7 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
java.lang.Double var9 = new java.lang.Double(10.0d);
// <NormalExecution object=object-of-type-java.lang.Double>;
var5.setSalary(10.0d);
// <NormalExecution object=null>;
org.softlang.company.impl.bean.EmployeeImpl var11 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var12 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var14 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var11.setAddress("");
// <NormalExecution object=null>;
var5.notifyObservers((java.lang.Object)var11);
// <NormalExecution object=null>;
boolean var17 = var2.add((org.softlang.company.Subunit)var11);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.company.impl.bean.EmployeeImpl var18 = new org.softlang.company.impl.bean.EmployeeImpl();
// <NormalExecution object=object-of-type-org.softlang.company.impl.bean.EmployeeImpl>;
java.lang.String var19 = "hi!";
// <NormalExecution object=object-of-type-java.lang.String>;
var18.setName("hi!");
// <NormalExecution object=null>;
java.lang.String var21 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
var18.setAddress("");
// <NormalExecution object=null>;
boolean var23 = var2.add((org.softlang.company.Subunit)var18);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
<randoop.PrimValue, value=true [var3]  : true
<randoop.PrimValue, value=false [var4]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=true [var17]  : true
<randoop.PrimValue, value=true [var23]  : true

allSequences.size()=103
-------------------------------------------
randoop.util.Randomness: total calls to random: 512
Selected statement: java.util.Observable.deleteObserver(java.util.Observer)
Will query component set for objects of typeclass java.util.Observable
getActivesequencesThatYield: entering method, clazz=class java.util.Observable
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 513
randoop.util.Randomness: total calls to random: 514
Will query component set for objects of typeinterface java.util.Observer
getActivesequencesThatYield: entering method, clazz=interface java.util.Observer
getActivesequencesThatYield: found no sequences matching class interface java.util.Observer
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 515
Selected statement: org.softlang.tests.Basics.test()
Will query component set for objects of typeclass org.softlang.tests.Basics
getActivesequencesThatYield: entering method, clazz=class org.softlang.tests.Basics
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 516
randoop.util.Randomness: total calls to random: 517
Successfully created new unique sequence:var0 =  cons : org.softlang.util.SimpleLinkedList.<init>() : 
var1 =  cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList) : var0 
var2 =  prim : java.lang.String:"" : 
var3 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var2 
var4 =  cons : org.softlang.tests.Basics.<init>() : 
var5 =  method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : var0 var4 
var6 =  method : org.softlang.tests.Basics.test() : var4 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Checking contract class randoop.EqualsHashcode on 1, 1
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 1, 1
Contract returned true.
Checking contract class randoop.EqualsHashcode on 4, 4
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 4, 4
Contract returned true.
Making index 0 active.
Making index 1 active.
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 active.
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence to active sequences of type class org.softlang.tests.Basics
Sequence after execution: 
org.softlang.util.SimpleLinkedList var0 = new org.softlang.util.SimpleLinkedList();
// <NormalExecution object=object-of-type-org.softlang.util.SimpleLinkedList>;
org.softlang.util.ObservableSimpleList var1 = new org.softlang.util.ObservableSimpleList((org.softlang.util.SimpleList)var0);
// <NormalExecution object=object-of-type-org.softlang.util.ObservableSimpleList>;
java.lang.String var2 = "";
// <NormalExecution object=object-of-type-java.lang.String>;
boolean var3 = var0.remove((java.lang.Object)"");
// <NormalExecution object=object-of-type-java.lang.Boolean>;
org.softlang.tests.Basics var4 = new org.softlang.tests.Basics();
// <NormalExecution object=object-of-type-org.softlang.tests.Basics>;
boolean var5 = var0.remove((java.lang.Object)var4);
// <NormalExecution object=object-of-type-java.lang.Boolean>;
var4.test();
// <NormalExecution object=null>;
<randoop.PrimValue, value=false [var3]  : true
<randoop.PrimValue, value=false [var5]  : true

allSequences.size()=104
